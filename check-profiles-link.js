// V√©rifier le lien entre profiles et candidate_profiles
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://egdelmcijszuapcpglsy.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVnZGVsbWNpanN6dWFwY3BnbHN5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNjIyMDAsImV4cCI6MjA2OTczODIwMH0.JYV-JxosrfE7kMtFw3XLs27PGf3Fn-rDyJLDWeYXF_U'

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkProfilesLink() {
  console.log('üîó V√©rification du lien entre profiles et candidate_profiles\n')

  try {
    // 1. V√©rifier la table profiles
    console.log('üìä 1. V√©rification table profiles...')
    const { data: profilesData, error: profilesError } = await supabase
      .from('profiles')
      .select('id, email, first_name, last_name, role')
      .eq('email', 'fmeleard+ressource_27_08_cdp@gmail.com')

    if (profilesError) {
      console.log('‚ùå Erreur profiles:', profilesError.message)
    } else {
      console.log('‚úÖ Profiles trouv√©s:', profilesData)
    }

    // 2. V√©rifier candidate_profiles 
    console.log('\nüìä 2. V√©rification candidate_profiles...')
    const { data: candidateData, error: candidateError } = await supabase
      .from('candidate_profiles')
      .select('id, email, user_id, first_name')
      .eq('email', 'fmeleard+ressource_27_08_cdp@gmail.com')

    if (candidateError) {
      console.log('‚ùå Erreur candidate_profiles:', candidateError.message)
    } else {
      console.log('‚úÖ Candidate_profiles trouv√©:', candidateData)
    }

    // 3. Comparer les IDs
    if (profilesData?.[0] && candidateData?.[0]) {
      console.log('\nüîç 3. Comparaison des IDs...')
      const profileId = profilesData[0].id
      const candidateUserId = candidateData[0].user_id
      
      console.log(`   üìä Profiles.id: ${profileId}`)
      console.log(`   üë§ Candidate_profiles.user_id: ${candidateUserId}`)
      console.log(`   ‚úÖ Match: ${profileId === candidateUserId ? 'OUI' : 'NON'}`)

      if (profileId !== candidateUserId) {
        console.log('\n‚ùå PROBL√àME IDENTIFI√â:')
        console.log('   Les IDs ne correspondent pas !')
        console.log('   profiles.id ‚â† candidate_profiles.user_id')
        console.log('')
        console.log('üí° SOLUTIONS POSSIBLES:')
        console.log('   1. Corriger candidate_profiles.user_id pour qu\'il corresponde √† profiles.id')
        console.log('   2. Modifier les politiques RLS pour utiliser profiles au lieu de candidate_profiles')
        console.log('   3. Cr√©er un trigger pour synchroniser automatiquement')
      } else {
        console.log('\n‚úÖ CORRESPONDANCE OK')
        console.log('   Le probl√®me doit √™tre ailleurs (session d\'authentification)')
      }
    }

    // 4. V√©rifier s'il existe d'autres candidats avec des IDs correspondants
    console.log('\nüìä 4. V√©rification globale correspondances...')
    const { data: allCandidates, error: allCandidatesError } = await supabase
      .from('candidate_profiles')
      .select('id, email, user_id, first_name')
      .limit(5)

    if (allCandidatesError) {
      console.log('‚ùå Erreur all candidates:', allCandidatesError.message)
    } else {
      console.log('‚úÖ √âchantillon candidates (5 premiers):')
      
      for (const candidate of allCandidates || []) {
        // V√©rifier si ce user_id existe dans profiles
        const { data: matchingProfile } = await supabase
          .from('profiles')
          .select('id, email')
          .eq('id', candidate.user_id)
          .single()

        console.log(`   üë§ ${candidate.first_name} (${candidate.email})`)
        console.log(`      user_id: ${candidate.user_id}`)
        console.log(`      profiles match: ${matchingProfile ? '‚úÖ' : '‚ùå'}`)
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
  }
}

checkProfilesLink()