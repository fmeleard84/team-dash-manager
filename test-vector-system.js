import { createClient } from '@supabase/supabase-js';

// Configuration
const SUPABASE_URL = 'https://egdelmcijszuapcpglsy.supabase.co';
const ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVnZGVsbWNpanN6dWFwY3BnbHN5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNjIyMDAsImV4cCI6MjA2OTczODIwMH0.JYV-JxosrfE7kMtFw3XLs27PGf3Fn-rDyJLDWeYXF_U';

const supabase = createClient(SUPABASE_URL, ANON_KEY);

async function testVectorSystem() {
  console.log('üß™ TEST DU SYST√àME VECTORIEL\n');
  console.log('=' .repeat(50));

  try {
    // 1. V√©rifier les tables
    console.log('\nüìä 1. V√©rification des tables...');
    
    const { count: faqCount } = await supabase
      .from('faq_items')
      .select('*', { count: 'exact', head: true });
    console.log(`   ‚úÖ Table faq_items : ${faqCount} entr√©es`);

    const { count: promptCount } = await supabase
      .from('prompts_ia')
      .select('*', { count: 'exact', head: true });
    console.log(`   ‚úÖ Table prompts_ia : ${promptCount} entr√©es`);

    const { count: queueCount } = await supabase
      .from('embedding_sync_queue')
      .select('*', { count: 'exact', head: true });
    console.log(`   ‚úÖ Table embedding_sync_queue : ${queueCount} entr√©es`);

    // 2. Ajouter une nouvelle FAQ
    console.log('\nüìù 2. Ajout d\'une nouvelle FAQ de test...');
    
    const testFAQ = {
      question: 'Comment tester le syst√®me vectoriel ?',
      answer: 'Pour tester le syst√®me vectoriel, cr√©ez une FAQ comme celle-ci. Le syst√®me devrait automatiquement cr√©er une entr√©e dans la queue de synchronisation gr√¢ce au trigger PostgreSQL. Ensuite, la fonction process-embedding-queue g√©n√®re l\'embedding via OpenAI.',
      category: 'Test',
      tags: ['test', 'vectoriel', 'embedding']
    };

    const { data: newFAQ, error: faqError } = await supabase
      .from('faq_items')
      .insert(testFAQ)
      .select()
      .single();

    if (faqError) {
      console.error('   ‚ùå Erreur cr√©ation FAQ:', faqError);
      return;
    }

    console.log(`   ‚úÖ FAQ cr√©√©e avec ID: ${newFAQ.id}`);

    // 3. V√©rifier la queue de synchronisation
    console.log('\nüîÑ 3. V√©rification de la queue de synchronisation...');
    
    // Attendre un peu pour que le trigger s'ex√©cute
    await new Promise(resolve => setTimeout(resolve, 1000));

    const { data: queueItems, error: queueError } = await supabase
      .from('embedding_sync_queue')
      .select('*')
      .eq('source_id', newFAQ.id)
      .eq('source_table', 'faq_items');

    if (queueError) {
      console.error('   ‚ùå Erreur lecture queue:', queueError);
    } else if (!queueItems || queueItems.length === 0) {
      console.log('   ‚ö†Ô∏è  Aucune entr√©e dans la queue');
      console.log('   üí° Le trigger n\'est peut-√™tre pas cr√©√©. Ex√©cutez ce SQL:');
      console.log(`
CREATE OR REPLACE FUNCTION add_to_embedding_queue()
RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'DELETE' THEN
    INSERT INTO embedding_sync_queue (source_table, source_id, action, content, metadata)
    VALUES (TG_TABLE_NAME, OLD.id::TEXT, 'delete', OLD.question || ' ' || OLD.answer, 
            jsonb_build_object('type', 'faq', 'category', OLD.category));
  ELSE
    INSERT INTO embedding_sync_queue (source_table, source_id, action, content, metadata)
    VALUES (TG_TABLE_NAME, NEW.id::TEXT, LOWER(TG_OP), NEW.question || ' ' || NEW.answer,
            jsonb_build_object('type', 'faq', 'category', NEW.category, 'question', NEW.question, 'answer', NEW.answer));
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER sync_faq_embeddings
AFTER INSERT OR UPDATE OR DELETE ON faq_items
FOR EACH ROW EXECUTE FUNCTION add_to_embedding_queue();
      `);
    } else {
      console.log(`   ‚úÖ ${queueItems.length} entr√©e(s) dans la queue`);
      console.log(`   üìã Status: ${queueItems[0].status}`);
    }

    // 4. Traiter la queue
    console.log('\n‚öôÔ∏è  4. Traitement de la queue d\'embeddings...');
    
    const response = await fetch(`${SUPABASE_URL}/functions/v1/process-embedding-queue`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${ANON_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ action: 'process', batchSize: 10 })
    });

    const result = await response.json();
    
    if (result.success === false) {
      console.log('   ‚ùå Erreur traitement:', result.error);
      if (result.error?.includes('OPENAI_API_KEY')) {
        console.log('\n   üîë IMPORTANT: Configurez votre cl√© OpenAI !');
        console.log('   1. Dashboard Supabase ‚Üí Settings ‚Üí Edge Functions');
        console.log('   2. Section "Environment Variables"');
        console.log('   3. Add new secret: OPENAI_API_KEY = sk-...');
      }
    } else {
      console.log(`   ‚úÖ Trait√©: ${result.processed || 0} items`);
      if (result.errors && result.errors.length > 0) {
        console.log(`   ‚ö†Ô∏è  Erreurs: ${result.errors.length}`);
        result.errors.forEach(e => console.log(`      - ${e.error}`));
      }
    }

    // 5. V√©rifier les embeddings
    console.log('\nüîç 5. V√©rification des embeddings...');
    
    const { data: embeddings, error: embError } = await supabase
      .from('documentation_embeddings')
      .select('id, content_type, source_table, source_id')
      .eq('source_id', newFAQ.id);

    if (embError) {
      console.log('   ‚ùå Erreur lecture embeddings:', embError);
    } else if (!embeddings || embeddings.length === 0) {
      console.log('   ‚ö†Ô∏è  Aucun embedding trouv√©');
      console.log('   üí° V√©rifiez que la cl√© OpenAI est configur√©e');
    } else {
      console.log(`   ‚úÖ ${embeddings.length} embedding(s) cr√©√©(s)`);
    }

    // 6. Test de recherche
    console.log('\nüîé 6. Test de recherche (si embeddings disponibles)...');
    
    if (embeddings && embeddings.length > 0) {
      // Recherche textuelle simple
      const { data: searchResults } = await supabase
        .from('faq_items')
        .select('question, answer')
        .textSearch('question', 'vectoriel');
      
      if (searchResults && searchResults.length > 0) {
        console.log(`   ‚úÖ Recherche textuelle: ${searchResults.length} r√©sultat(s)`);
      }
    }

    // 7. Status final
    console.log('\nüìä 7. Status de la queue...');
    
    const statusResponse = await fetch(`${SUPABASE_URL}/functions/v1/process-embedding-queue`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${ANON_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ action: 'status' })
    });

    const status = await statusResponse.json();
    if (status.status) {
      console.log('   Queue status:');
      status.status.forEach(s => {
        console.log(`   - ${s.source_table}: ${s.pending_count} pending, ${s.completed_count} completed`);
      });
    }

    console.log('\n' + '=' .repeat(50));
    console.log('‚úÖ TEST TERMIN√â !');
    console.log('\nüí° Prochaines √©tapes:');
    console.log('1. Si la cl√© OpenAI n\'est pas configur√©e, ajoutez-la');
    console.log('2. Cr√©ez plus de FAQs via l\'interface admin');
    console.log('3. Les embeddings seront g√©n√©r√©s automatiquement');
    console.log('4. L\'IA pourra chercher dans ces contenus');

  } catch (error) {
    console.error('\n‚ùå Erreur globale:', error);
  }
}

// Ex√©cuter le test
testVectorSystem();