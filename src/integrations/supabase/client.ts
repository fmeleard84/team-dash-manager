
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://egdelmcijszuapcpglsy.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVnZGVsbWNpanN6dWFwY3BnbHN5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNjIyMDAsImV4cCI6MjA2OTczODIwMH0.JYV-JxosrfE7kMtFw3XLs27PGf3Fn-rDyJLDWeYXF_U";

// Module-level identity storage for Keycloak -> forwarded to PostgREST via custom fetch
let keycloakIdentity: { sub: string | null; email: string | null } = {
  sub: null,
  email: null,
};

// Expose helpers to update/clear identity from anywhere (Provider/Hook)
export const setKeycloakIdentity = (sub?: string, email?: string) => {
  keycloakIdentity.sub = sub ?? null;
  keycloakIdentity.email = email ?? null;
  console.log('[Supabase] Keycloak identity set', { subSet: !!keycloakIdentity.sub, emailSet: !!keycloakIdentity.email });
};

export const clearKeycloakIdentity = () => {
  keycloakIdentity = { sub: null, email: null };
  console.log('[Supabase] Keycloak identity cleared');
};

// Custom fetch that injects Keycloak headers into every request (REST + Edge Functions)
const withKeycloakHeadersFetch: typeof fetch = (input, init) => {
  const headers = new Headers(init?.headers || {});
  if (keycloakIdentity.sub) headers.set('x-keycloak-sub', keycloakIdentity.sub);
  if (keycloakIdentity.email) headers.set('x-keycloak-email', keycloakIdentity.email);
  return fetch(input, { ...init, headers });
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false, // Disable Supabase auth URL detection since we use Keycloak
  },
  global: {
    // headers can be set statically here if needed
    fetch: withKeycloakHeadersFetch, // ensure our custom headers are always forwarded
  }
});
