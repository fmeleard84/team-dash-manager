
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://egdelmcijszuapcpglsy.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVnZGVsbWNpanN6dWFwY3BnbHN5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxNjIyMDAsImV4cCI6MjA2OTczODIwMH0.JYV-JxosrfE7kMtFw3XLs27PGf3Fn-rDyJLDWeYXF_U";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Optionally read a persisted identity (legacy Keycloak compat)
const KEYCLOAK_STORAGE_KEY = 'keycloak_identity';
let legacyHeaders: Record<string, string> = {};

try {
  const raw = localStorage.getItem(KEYCLOAK_STORAGE_KEY);
  if (raw) {
    const parsed = JSON.parse(raw);
    if (parsed?.sub) legacyHeaders['x-keycloak-sub'] = String(parsed.sub);
    if (parsed?.email) legacyHeaders['x-keycloak-email'] = String(parsed.email);
    if (Array.isArray(parsed?.groups)) legacyHeaders['x-keycloak-groups'] = (parsed.groups as string[]).join(',');
  }
} catch {
  // ignore
}

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
  },
  global: {
    headers: {
      ...legacyHeaders,
    },
  },
});

// Backward-compatible no-op helpers for legacy Keycloak flows
export const setKeycloakIdentity = (identity: { sub?: string; email?: string; groups?: string[] } | null) => {
  try {
    if (identity) {
      localStorage.setItem(KEYCLOAK_STORAGE_KEY, JSON.stringify(identity));
    } else {
      localStorage.removeItem(KEYCLOAK_STORAGE_KEY);
    }
  } catch {
    // ignore
  }
};

export const clearKeycloakIdentity = () => {
  try {
    localStorage.removeItem(KEYCLOAK_STORAGE_KEY);
  } catch {
    // ignore
  }
};
