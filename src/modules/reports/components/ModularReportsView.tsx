/**
 * ModularReportsView - Composant Principal du Module RAPPORTS
 *
 * Interface complète pour :
 * - Vue d'ensemble avec métriques clés
 * - Gestion des rapports et génération
 * - Analytics avancés avec visualisations
 * - Templates et configuration
 * - Export multi-format
 * - Planification et automatisation
 */

import React, { useState, useMemo } from 'react';
import {
  BarChart3,
  FileText,
  Template,
  Download,
  Calendar,
  TrendingUp,
  Users,
  DollarSign,
  Clock,
  Play,
  Pause,
  RefreshCw,
  Plus,
  Filter,
  Settings,
  Eye,
  Edit,
  Trash2,
  Share
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/ui/components/card';
import { Badge } from '@/ui/components/badge';
import { Button } from '@/ui/components/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/ui/components/tabs';
import { ScrollArea } from '@/ui/components/scroll-area';
import { Progress } from '@/ui/components/progress';
import { Separator } from '@/ui/components/separator';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/ui/components/select';
import {
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell
} from 'recharts';
import { PageHeaderNeon } from '@/ui/components/page-header-neon';
import { ProjectSelectorNeon } from '@/ui/components/project-selector-neon';
import { UserSelectNeon } from '@/ui/components/user-select-neon';
import { cn } from '@/lib/utils';
import { useReports } from '../hooks/useReports';
import { useReportAnalytics } from '../hooks/useReportAnalytics';
import { useReportTemplates } from '../hooks/useReportTemplates';
import { useReportExport } from '../hooks/useReportExport';
import type {
  ModularReportsViewProps,
  ReportType,
  ReportFormat,
  TimePeriod
} from '../types';

// Couleurs pour les graphiques
const COLORS = ['#8b5cf6', '#ec4899', '#3b82f6', '#10b981', '#f59e0b', '#ef4444'];

export const ModularReportsView: React.FC<ModularReportsViewProps> = ({
  clientId,
  showOverview = true,
  showReports = true,
  showAnalytics = true,
  showTemplates = true,
  showSchedules = false,
  initialView = 'overview',
  className
}) => {
  // ==========================================
  // HOOKS ET ÉTAT
  // ==========================================

  const [activeTab, setActiveTab] = useState(initialView);
  const [selectedTimeRange, setSelectedTimeRange] = useState<TimePeriod>('month');

  // Hooks du module
  const {
    reports,
    loading: reportsLoading,
    error: reportsError,
    quickStats: reportStats,
    createReport,
    generateReport,
    deleteReport,
    refresh: refreshReports
  } = useReports();

  const {
    dashboardMetrics,
    projectAnalytics,
    loading: analyticsLoading,
    error: analyticsError,
    refreshMetrics,
    exportMetrics,
    derivedMetrics,
    trendAnalysis,
    setPredefinedTimeRange
  } = useReportAnalytics();

  const {
    templates,
    systemTemplates,
    popularTemplates,
    loading: templatesLoading,
    useTemplate,
    createDefaultTemplates
  } = useReportTemplates();

  const {
    exports,
    exportReport,
    downloadExport,
    isExporting,
    exportProgress,
    exportStats
  } = useReportExport();

  // ==========================================
  // DONNÉES SIMULÉES POUR LA DÉMONSTRATION
  // ==========================================

  const sampleChartData = useMemo(() => ({
    costEvolution: [
      { name: 'Lun', value: 1200, projects: 3 },
      { name: 'Mar', value: 1380, projects: 4 },
      { name: 'Mer', value: 1150, projects: 3 },
      { name: 'Jeu', value: 1420, projects: 5 },
      { name: 'Ven', value: 1680, projects: 4 },
      { name: 'Sam', value: 980, projects: 2 },
      { name: 'Dim', value: 1100, projects: 3 }
    ],
    projectDistribution: [
      { name: 'Développement', value: 45, color: '#8b5cf6' },
      { name: 'Marketing', value: 25, color: '#ec4899' },
      { name: 'Design', value: 20, color: '#3b82f6' },
      { name: 'Conseil', value: 10, color: '#10b981' }
    ]
  }), []);\n\n  // ==========================================\n  // GESTIONNAIRES D'ÉVÉNEMENTS\n  // ==========================================\n\n  const handleCreateReport = async (type: ReportType) => {\n    const reportData = {\n      title: `Rapport ${type} - ${new Date().toLocaleDateString('fr-FR')}`,\n      description: `Rapport généré automatiquement`,\n      type,\n      category: 'operational' as const,\n      config: {\n        sections: ['executive_summary', 'key_metrics', 'project_analytics', 'trends'],\n        layout: 'single_column' as const,\n        page_size: 'A4' as const,\n        orientation: 'portrait' as const,\n        include_charts: true,\n        include_tables: true,\n        include_summary: true,\n        include_recommendations: true,\n        data_aggregation: 'monthly' as const,\n        comparison_periods: 3,\n        include_forecasts: true,\n        export_formats: ['pdf', 'excel'] as ReportFormat[],\n        auto_archive: true,\n        retention_days: 90\n      },\n      filters: {\n        date_range: {\n          start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          end: new Date().toISOString().split('T')[0]\n        },\n        period_type: 'month' as TimePeriod\n      }\n    };\n\n    const reportId = await createReport(reportData);\n    if (reportId) {\n      await generateReport(reportId);\n    }\n  };\n\n  const handleExportReport = async (reportId: string, format: ReportFormat) => {\n    await exportReport(`report_data_${reportId}`, format);\n  };\n\n  const handleTimeRangeChange = (period: TimePeriod) => {\n    setSelectedTimeRange(period);\n    setPredefinedTimeRange(period);\n  };\n\n  // ==========================================\n  // COMPOSANT PRINCIPAL\n  // ==========================================\n\n  return (\n    <div className={cn('space-y-6', className)}>\n      {/* Header unifié avec design néon */}\n      <PageHeaderNeon\n        icon={BarChart3}\n        title=\"Rapports & Analytics\"\n        subtitle=\"Tableaux de bord, rapports et analyses avancées\"\n        badge={{ text: \"Analytics\", animate: true }}\n        showProjectSelector={false}\n      >\n        <div className=\"flex flex-wrap items-center gap-2\">\n          <Select value={selectedTimeRange} onValueChange={handleTimeRangeChange}>\n            <SelectTrigger className=\"w-[180px] bg-white/10 border-white/20 text-white\">\n              <SelectValue placeholder=\"Période\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"day\">Aujourd'hui</SelectItem>\n              <SelectItem value=\"week\">Cette semaine</SelectItem>\n              <SelectItem value=\"month\">Ce mois</SelectItem>\n              <SelectItem value=\"quarter\">Ce trimestre</SelectItem>\n              <SelectItem value=\"year\">Cette année</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"bg-white/10 hover:bg-white/20 text-white border border-purple-500/30\"\n            onClick={refreshMetrics}\n            disabled={analyticsLoading}\n          >\n            <RefreshCw className={cn('w-3 h-3 mr-1', analyticsLoading && 'animate-spin')} />\n            Actualiser\n          </Button>\n        </div>\n      </PageHeaderNeon>\n\n      {/* Onglets principaux */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5 lg:w-auto lg:inline-flex\">\n          {showOverview && (\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Vue d'ensemble</span>\n            </TabsTrigger>\n          )}\n          {showReports && (\n            <TabsTrigger value=\"reports\" className=\"flex items-center gap-2\">\n              <FileText className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Rapports</span>\n            </TabsTrigger>\n          )}\n          {showAnalytics && (\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Analytics</span>\n            </TabsTrigger>\n          )}\n          {showTemplates && (\n            <TabsTrigger value=\"templates\" className=\"flex items-center gap-2\">\n              <Template className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Templates</span>\n            </TabsTrigger>\n          )}\n          <TabsTrigger value=\"exports\" className=\"flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            <span className=\"hidden sm:inline\">Exports</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* ONGLET: Vue d'ensemble */}\n        {showOverview && (\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Métriques principales */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card className=\"relative overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 to-primary/10\"></div>\n                <CardHeader className=\"relative pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                      <DollarSign className=\"w-4 h-4 text-primary-foreground\" />\n                    </div>\n                    Coût total\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"relative\">\n                  <div className=\"text-3xl font-bold\">\n                    {dashboardMetrics?.total_cost_period.toFixed(2) || '0.00'}€\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {selectedTimeRange === 'month' ? 'Ce mois' : 'Cette période'}\n                  </p>\n                  {trendAnalysis?.costTrend && (\n                    <div className={cn(\n                      \"text-xs mt-2 flex items-center gap-1\",\n                      trendAnalysis.costTrend.isPositive ? \"text-green-600\" : \"text-red-600\"\n                    )}>\n                      {trendAnalysis.costTrend.direction === 'up' ? '↗' : '↘'}\n                      {Math.abs(trendAnalysis.costTrend.percentage).toFixed(1)}%\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card className=\"relative overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/5 to-blue-500/10\"></div>\n                <CardHeader className=\"relative pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center\">\n                      <Clock className=\"w-4 h-4 text-white\" />\n                    </div>\n                    Temps total\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"relative\">\n                  <div className=\"text-3xl font-bold\">\n                    {dashboardMetrics ? Math.floor(dashboardMetrics.total_time_period / 60) : 0}h\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {dashboardMetrics ? dashboardMetrics.total_time_period % 60 : 0} minutes\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"relative overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-500/5 to-emerald-500/10\"></div>\n                <CardHeader className=\"relative pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-emerald-500 rounded-lg flex items-center justify-center\">\n                      <Users className=\"w-4 h-4 text-white\" />\n                    </div>\n                    Projets actifs\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"relative\">\n                  <div className=\"text-3xl font-bold\">\n                    {dashboardMetrics?.active_projects_count || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    En cours d'exécution\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"relative overflow-hidden\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-orange-500/5 to-orange-500/10\"></div>\n                <CardHeader className=\"relative pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <div className=\"w-8 h-8 bg-orange-500 rounded-lg flex items-center justify-center\">\n                      <FileText className=\"w-4 h-4 text-white\" />\n                    </div>\n                    Rapports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"relative\">\n                  <div className=\"text-3xl font-bold\">\n                    {reportStats.totalReports}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {reportStats.recentReports} récents\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Graphiques principaux */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Évolution des coûts */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    Évolution des coûts\n                  </CardTitle>\n                  <CardDescription>\n                    Coûts par jour sur la dernière semaine\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <AreaChart data={sampleChartData.costEvolution}>\n                      <defs>\n                        <linearGradient id=\"colorValue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                          <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                          <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1}/>\n                        </linearGradient>\n                      </defs>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis \n                        dataKey=\"name\" \n                        className=\"text-xs\"\n                        tick={{ fill: '#6b7280' }}\n                      />\n                      <YAxis \n                        className=\"text-xs\"\n                        tick={{ fill: '#6b7280' }}\n                        tickFormatter={(value) => `${value}€`}\n                      />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                          border: '1px solid #e5e7eb',\n                          borderRadius: '8px'\n                        }}\n                        formatter={(value: any, name: string) => [`${value}€`, 'Coût']}\n                      />\n                      <Area \n                        type=\"monotone\" \n                        dataKey=\"value\" \n                        stroke=\"#8b5cf6\" \n                        strokeWidth={2}\n                        fillOpacity={1} \n                        fill=\"url(#colorValue)\" \n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Répartition par projet */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"w-5 h-5\" />\n                    Répartition par domaine\n                  </CardTitle>\n                  <CardDescription>\n                    Distribution des coûts par type de projet\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={sampleChartData.projectDistribution}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={60}\n                        outerRadius={120}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                      >\n                        {sampleChartData.projectDistribution.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        formatter={(value: any, name: string) => [`${value}%`, name]}\n                      />\n                    </PieChart>\n                  </ResponsiveContainer>\n                  <div className=\"grid grid-cols-2 gap-2 mt-4\">\n                    {sampleChartData.projectDistribution.map((item, index) => (\n                      <div key={index} className=\"flex items-center gap-2 text-sm\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\" \n                          style={{ backgroundColor: item.color }}\n                        ></div>\n                        <span className=\"text-muted-foreground\">{item.name}</span>\n                        <span className=\"font-medium ml-auto\">{item.value}%</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Actions rapides */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Actions rapides</CardTitle>\n                <CardDescription>\n                  Créer des rapports standards en un clic\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Button \n                    onClick={() => handleCreateReport('dashboard')}\n                    className=\"h-auto p-4 flex flex-col items-center gap-2\"\n                    variant=\"outline\"\n                  >\n                    <TrendingUp className=\"w-6 h-6\" />\n                    <div className=\"text-center\">\n                      <div className=\"font-medium\">Dashboard</div>\n                      <div className=\"text-xs text-muted-foreground\">Vue d'ensemble</div>\n                    </div>\n                  </Button>\n\n                  <Button \n                    onClick={() => handleCreateReport('financial')}\n                    className=\"h-auto p-4 flex flex-col items-center gap-2\"\n                    variant=\"outline\"\n                  >\n                    <DollarSign className=\"w-6 h-6\" />\n                    <div className=\"text-center\">\n                      <div className=\"font-medium\">Financier</div>\n                      <div className=\"text-xs text-muted-foreground\">Coûts et revenus</div>\n                    </div>\n                  </Button>\n\n                  <Button \n                    onClick={() => handleCreateReport('project_summary')}\n                    className=\"h-auto p-4 flex flex-col items-center gap-2\"\n                    variant=\"outline\"\n                  >\n                    <Users className=\"w-6 h-6\" />\n                    <div className=\"text-center\">\n                      <div className=\"font-medium\">Projets</div>\n                      <div className=\"text-xs text-muted-foreground\">Résumé projets</div>\n                    </div>\n                  </Button>\n\n                  <Button \n                    onClick={() => handleCreateReport('team_performance')}\n                    className=\"h-auto p-4 flex flex-col items-center gap-2\"\n                    variant=\"outline\"\n                  >\n                    <BarChart3 className=\"w-6 h-6\" />\n                    <div className=\"text-center\">\n                      <div className=\"font-medium\">Performance</div>\n                      <div className=\"text-xs text-muted-foreground\">Équipe</div>\n                    </div>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n\n        {/* ONGLET: Rapports */}\n        {showReports && (\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            {/* En-tête avec actions */}\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold\">Mes rapports</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {reportStats.totalReports} rapports • {reportStats.recentReports} récents\n                </p>\n              </div>\n              <Button onClick={() => handleCreateReport('dashboard')}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Nouveau rapport\n              </Button>\n            </div>\n\n            {/* Liste des rapports */}\n            <div className=\"grid gap-4\">\n              {reportsLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Chargement des rapports...</p>\n                </div>\n              ) : reports.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-12\">\n                    <FileText className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                    <h3 className=\"font-semibold mb-2\">Aucun rapport</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Créez votre premier rapport pour commencer\n                    </p>\n                    <Button onClick={() => handleCreateReport('dashboard')}>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Créer un rapport\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                reports.map((report) => (\n                  <Card key={report.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-start gap-4\">\n                          <div className={cn(\n                            \"w-12 h-12 rounded-lg flex items-center justify-center\",\n                            report.type === 'financial' ? 'bg-green-100 text-green-600' :\n                            report.type === 'dashboard' ? 'bg-blue-100 text-blue-600' :\n                            report.type === 'project_summary' ? 'bg-purple-100 text-purple-600' :\n                            'bg-orange-100 text-orange-600'\n                          )}>\n                            {report.type === 'financial' ? <DollarSign className=\"w-6 h-6\" /> :\n                             report.type === 'dashboard' ? <TrendingUp className=\"w-6 h-6\" /> :\n                             report.type === 'project_summary' ? <Users className=\"w-6 h-6\" /> :\n                             <BarChart3 className=\"w-6 h-6\" />}\n                          </div>\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold\">{report.title}</h4>\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              {report.description}\n                            </p>\n                            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                              <span>Créé le {new Date(report.created_at).toLocaleDateString('fr-FR')}</span>\n                              {report.last_generated && (\n                                <span>Généré le {new Date(report.last_generated).toLocaleDateString('fr-FR')}</span>\n                              )}\n                              <Badge variant=\"outline\">\n                                {report.type}\n                              </Badge>\n                              <Badge \n                                variant={report.status === 'ready' ? 'default' : \n                                        report.status === 'generating' ? 'secondary' : 'destructive'}\n                              >\n                                {report.status === 'ready' ? 'Prêt' :\n                                 report.status === 'generating' ? 'Génération...' :\n                                 report.status === 'draft' ? 'Brouillon' : report.status}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Select onValueChange={(format) => handleExportReport(report.id, format as ReportFormat)}>\n                            <SelectTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Download className=\"w-4 h-4\" />\n                              </Button>\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"pdf\">PDF</SelectItem>\n                              <SelectItem value=\"excel\">Excel</SelectItem>\n                              <SelectItem value=\"csv\">CSV</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => deleteReport(report.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n        )}\n\n        {/* ONGLET: Analytics */}\n        {showAnalytics && (\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Métriques détaillées */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                {/* Analytics par projet */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      Analytics par projet\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {analyticsLoading ? (\n                      <div className=\"text-center py-8\">\n                        <div className=\"w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n                        <p className=\"text-sm text-muted-foreground\">Chargement des analytics...</p>\n                      </div>\n                    ) : projectAnalytics.length === 0 ? (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        <BarChart3 className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n                        <p className=\"text-sm\">Aucune donnée disponible</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {projectAnalytics.slice(0, 5).map((project) => (\n                          <div key={project.project_id} className=\"space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"font-medium\">{project.project_name}</span>\n                              <span className=\"text-sm font-semibold\">{project.total_cost.toFixed(2)}€</span>\n                            </div>\n                            <Progress value={project.budget_utilization} className=\"h-2\" />\n                            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                              <span>{Math.floor(project.total_time_minutes / 60)}h {project.total_time_minutes % 60}min</span>\n                              <span>Budget: {project.budget_utilization.toFixed(1)}%</span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Tendances */}\n                {trendAnalysis && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <TrendingUp className=\"w-5 h-5\" />\n                        Analyse des tendances\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"text-center p-4 border rounded-lg\">\n                          <div className={cn(\n                            \"text-2xl font-bold mb-1\",\n                            trendAnalysis.costTrend.isPositive ? \"text-red-600\" : \"text-green-600\"\n                          )}>\n                            {trendAnalysis.costTrend.direction === 'up' ? '↗' : '↘'} \n                            {Math.abs(trendAnalysis.costTrend.percentage).toFixed(1)}%\n                          </div>\n                          <div className=\"text-sm font-medium\">Coûts</div>\n                          <div className=\"text-xs text-muted-foreground\">vs période précédente</div>\n                        </div>\n                        <div className=\"text-center p-4 border rounded-lg\">\n                          <div className={cn(\n                            \"text-2xl font-bold mb-1\",\n                            trendAnalysis.timeTrend.isPositive ? \"text-green-600\" : \"text-red-600\"\n                          )}>\n                            {trendAnalysis.timeTrend.direction === 'up' ? '↗' : '↘'} \n                            {Math.abs(trendAnalysis.timeTrend.percentage).toFixed(1)}%\n                          </div>\n                          <div className=\"text-sm font-medium\">Temps</div>\n                          <div className=\"text-xs text-muted-foreground\">vs période précédente</div>\n                        </div>\n                        <div className=\"text-center p-4 border rounded-lg\">\n                          <div className={cn(\n                            \"text-2xl font-bold mb-1\",\n                            trendAnalysis.projectTrend.isPositive ? \"text-green-600\" : \"text-orange-600\"\n                          )}>\n                            {trendAnalysis.projectTrend.direction === 'up' ? '↗' : '↘'} \n                            {Math.abs(trendAnalysis.projectTrend.percentage).toFixed(1)}%\n                          </div>\n                          <div className=\"text-sm font-medium\">Projets</div>\n                          <div className=\"text-xs text-muted-foreground\">vs période précédente</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n\n              {/* Sidebar avec métriques rapides */}\n              <div className=\"space-y-6\">\n                {/* Métriques dérivées */}\n                {derivedMetrics && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Métriques clés</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <div className=\"text-sm font-medium mb-1\">Coût moyen/projet</div>\n                        <div className=\"text-lg font-bold\">{derivedMetrics.averageProjectCost.toFixed(2)}€</div>\n                      </div>\n                      <Separator />\n                      <div>\n                        <div className=\"text-sm font-medium mb-1\">Durée moyenne/projet</div>\n                        <div className=\"text-lg font-bold\">\n                          {Math.floor(derivedMetrics.averageProjectDuration / 60)}h \n                          {Math.floor(derivedMetrics.averageProjectDuration % 60)}m\n                        </div>\n                      </div>\n                      <Separator />\n                      <div>\n                        <div className=\"text-sm font-medium mb-1\">Ratio efficacité coût</div>\n                        <div className=\"text-lg font-bold\">{derivedMetrics.costEfficiencyRatio.toFixed(2)}€/h</div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Actions d'export */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">Export analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <Button \n                      onClick={() => exportMetrics('pdf')}\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export PDF\n                    </Button>\n                    <Button \n                      onClick={() => exportMetrics('excel')}\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export Excel\n                    </Button>\n                    <Button \n                      onClick={() => exportMetrics('csv')}\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export CSV\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n        )}\n\n        {/* ONGLET: Templates */}\n        {showTemplates && (\n          <TabsContent value=\"templates\" className=\"space-y-6\">\n            {/* Templates populaires */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Template className=\"w-5 h-5\" />\n                  Templates populaires\n                </CardTitle>\n                <CardDescription>\n                  Templates les plus utilisés pour créer rapidement des rapports\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {templatesLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-2\"></div>\n                    <p className=\"text-sm text-muted-foreground\">Chargement des templates...</p>\n                  </div>\n                ) : popularTemplates.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Template className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground opacity-30\" />\n                    <p className=\"text-muted-foreground mb-4\">\n                      Aucun template disponible\n                    </p>\n                    <Button onClick={createDefaultTemplates}>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Créer les templates par défaut\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {popularTemplates.map((template) => (\n                      <Card key={template.id} className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {template.is_system_template ? 'Système' : 'Personnel'}\n                            </Badge>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {template.usage_count} utilisations\n                            </span>\n                          </div>\n                          <h4 className=\"font-semibold mb-2\">{template.name}</h4>\n                          <p className=\"text-sm text-muted-foreground mb-4\">\n                            {template.description}\n                          </p>\n                          <Button \n                            onClick={() => useTemplate(template.id, {\n                              date_range: {\n                                start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n                                end: new Date().toISOString().split('T')[0]\n                              },\n                              period_type: 'month'\n                            })}\n                            className=\"w-full\"\n                            size=\"sm\"\n                          >\n                            Utiliser ce template\n                          </Button>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n\n        {/* ONGLET: Exports */}\n        <TabsContent value=\"exports\" className=\"space-y-6\">\n          {/* Statistiques d'export */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold\">{exportStats.totalExports}</div>\n                <div className=\"text-sm text-muted-foreground\">Total exports</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold\">{exportStats.readyExports}</div>\n                <div className=\"text-sm text-muted-foreground\">Prêts à télécharger</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold\">{exportStats.processingExports}</div>\n                <div className=\"text-sm text-muted-foreground\">En cours</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold\">{exportStats.totalDownloads}</div>\n                <div className=\"text-sm text-muted-foreground\">Téléchargements</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Liste des exports */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Historique des exports</CardTitle>\n              <CardDescription>\n                Tous vos exports de rapports avec possibilité de téléchargement\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {exports.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Download className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground opacity-30\" />\n                  <p className=\"text-muted-foreground\">\n                    Aucun export disponible\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {exports.map((exportItem) => (\n                    <div key={exportItem.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className={cn(\n                          \"w-10 h-10 rounded-lg flex items-center justify-center\",\n                          exportItem.format === 'pdf' ? 'bg-red-100 text-red-600' :\n                          exportItem.format === 'excel' ? 'bg-green-100 text-green-600' :\n                          exportItem.format === 'csv' ? 'bg-blue-100 text-blue-600' :\n                          'bg-gray-100 text-gray-600'\n                        )}>\n                          <Download className=\"w-5 h-5\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{exportItem.file_name}</div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {new Date(exportItem.exported_at).toLocaleDateString('fr-FR')} • \n                            {exportItem.file_size ? `${(exportItem.file_size / 1024).toFixed(1)} KB` : 'Taille inconnue'} • \n                            {exportItem.download_count} téléchargements\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {exportItem.status === 'processing' && exportProgress[exportItem.id] !== undefined && (\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={exportProgress[exportItem.id]} className=\"w-16\" />\n                            <span className=\"text-xs text-muted-foreground\">\n                              {Math.round(exportProgress[exportItem.id])}%\n                            </span>\n                          </div>\n                        )}\n                        <Badge \n                          variant={exportItem.status === 'ready' ? 'default' : \n                                  exportItem.status === 'processing' ? 'secondary' : 'destructive'}\n                        >\n                          {exportItem.status === 'ready' ? 'Prêt' :\n                           exportItem.status === 'processing' ? 'En cours' : exportItem.status}\n                        </Badge>\n                        {exportItem.status === 'ready' && (\n                          <Button \n                            onClick={() => downloadExport(exportItem.id)}\n                            size=\"sm\"\n                          >\n                            <Download className=\"w-4 h-4 mr-1\" />\n                            Télécharger\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};"