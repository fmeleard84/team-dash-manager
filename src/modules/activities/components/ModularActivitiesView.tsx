/**
 * Module ACTIVIT√âS - Composant Principal
 *
 * Vue modulaire compl√®te pour la gestion des activit√©s des candidats.
 * Interface √† onglets avec timer int√©gr√©, statistiques et export.
 *
 * Fonctionnalit√©s :
 * - Timer temps r√©el avec contr√¥les
 * - Vue d'ensemble des activit√©s avec filtres
 * - Statistiques et analytiques
 * - Export multi-format
 * - Gestion des templates d'activit√©
 */

import React, { useState, useMemo, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/ui/components/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/ui/components/tabs';
import { Badge } from '@/ui/components/badge';
import { Button } from '@/ui/components/button';
import { ScrollArea } from '@/ui/components/scroll-area';
import { Input } from '@/ui/components/input';
import { Label } from '@/ui/components/label';
import { Textarea } from '@/ui/components/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/ui/components/select';
import { PageHeaderNeon } from '@/ui/components/page-header-neon';
import { ProjectSelectorNeon } from '@/ui/components/project-selector-neon';
import { FullScreenModal, ModalActions, useFullScreenModal } from '@/ui/components/fullscreen-modal';
import {\n  Activity,\n  Clock,\n  Play,\n  Pause,\n  Square,\n  BarChart3,\n  Download,\n  Filter,\n  Plus,\n  Edit2,\n  Trash2,\n  Calendar,\n  Euro,\n  TrendingUp,\n  Target,\n  Award,\n  Zap\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { fr } from 'date-fns/locale';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\nimport {\n  ModularActivitiesViewProps,\n  TimeSession,\n  CreateTimeSessionData,\n  ActivityFilters,\n  ActivityType,\n  ActivityExportFormat,\n  ACTIVITY_CONSTANTS\n} from '../types';\nimport {\n  useActivities,\n  useActivityActions,\n  useActivityStats,\n  useActivityTimer\n} from '../hooks';\n\nconst ACTIVITY_TYPE_OPTIONS = [\n  { value: 'task', label: 'T√¢che', icon: 'üìã' },\n  { value: 'meeting', label: 'R√©union', icon: 'üë•' },\n  { value: 'research', label: 'Recherche', icon: 'üîç' },\n  { value: 'development', label: 'D√©veloppement', icon: 'üíª' },\n  { value: 'documentation', label: 'Documentation', icon: 'üìö' },\n  { value: 'other', label: 'Autre', icon: 'üìù' }\n];\n\nconst DEFAULT_HOURLY_RATE = 0.5; // 0.5‚Ç¨/minute = 30‚Ç¨/heure\n\nexport default function ModularActivitiesView({\n  candidateId,\n  availableProjects = [],\n  initialFilters = {},\n  showTimer = true,\n  showStats = true,\n  showExportOptions = true,\n  showTemplates = true,\n  className,\n  onSessionStart,\n  onSessionComplete,\n  onExport\n}: ModularActivitiesViewProps) {\n\n  // ==========================================\n  // STATES\n  // ==========================================\n\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedProjectId, setSelectedProjectId] = useState<string>('all');\n  const [dateRange, setDateRange] = useState<'week' | 'month' | 'all'>('month');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activityTypeFilter, setActivityTypeFilter] = useState<ActivityType | 'all'>('all');\n\n  // States pour le nouveau timer/session\n  const [newSessionData, setNewSessionData] = useState<Partial<CreateTimeSessionData>>({\n    activity_type: 'task',\n    hourly_rate: DEFAULT_HOURLY_RATE\n  });\n\n  // ==========================================\n  // HOOKS\n  // ==========================================\n\n  const {\n    activities,\n    stats,\n    loading,\n    error,\n    hasMore,\n    activeSessions,\n    hasActiveSession,\n    loadMore,\n    refetch,\n    setFilters,\n    resetFilters\n  } = useActivities({\n    initialFilters: {\n      ...initialFilters,\n      per_page: 20\n    },\n    autoRefresh: true,\n    realtime: true,\n    enableStats: showStats\n  });\n\n  const {\n    formatDuration,\n    formatCost,\n    getActivityTypeColor,\n    getActivityStatusColor,\n    updateSession,\n    deleteSession,\n    exportActivities\n  } = useActivityActions({\n    onSessionUpdated: () => refetch(),\n    onSessionDeleted: () => refetch()\n  });\n\n  const {\n    topPerformingProjects,\n    mostUsedActivityTypes,\n    getRecommendations,\n    refreshStats\n  } = useActivityStats({\n    autoRefresh: hasActiveSession\n  });\n\n  const {\n    currentSession,\n    isActive,\n    isPaused,\n    elapsedTime,\n    currentCost,\n    formattedTime,\n    formattedCost,\n    startTimer,\n    pauseTimer,\n    resumeTimer,\n    stopTimer,\n    loading: timerLoading\n  } = useActivityTimer({\n    onSessionStart: (session) => {\n      refetch();\n      onSessionStart?.(session);\n      toast.success('Session d√©marr√©e');\n    },\n    onSessionStop: (session) => {\n      refetch();\n      onSessionComplete?.(session);\n      toast.success(`Session termin√©e - ${formatDuration(session.duration_minutes || 0)}`);\n    }\n  });\n\n  // ==========================================\n  // MODALS\n  // ==========================================\n\n  const startSessionModal = useFullScreenModal();\n  const editSessionModal = useFullScreenModal();\n  const [editingSession, setEditingSession] = useState<TimeSession | null>(null);\n\n  // ==========================================\n  // COMPUTED VALUES\n  // ==========================================\n\n  const filteredProjects = useMemo(() => {\n    return availableProjects.map(project => ({\n      id: project.id,\n      title: project.title\n    }));\n  }, [availableProjects]);\n\n  const dateFilters = useMemo(() => {\n    const now = new Date();\n    switch (dateRange) {\n      case 'week':\n        const weekAgo = new Date(now);\n        weekAgo.setDate(weekAgo.getDate() - 7);\n        return { date_from: weekAgo.toISOString() };\n      case 'month':\n        const monthAgo = new Date(now);\n        monthAgo.setMonth(monthAgo.getMonth() - 1);\n        return { date_from: monthAgo.toISOString() };\n      default:\n        return {};\n    }\n  }, [dateRange]);\n\n  // ==========================================\n  // EVENT HANDLERS\n  // ==========================================\n\n  const handleFiltersChange = useCallback(() => {\n    const filters: ActivityFilters = {\n      ...dateFilters,\n      ...(selectedProjectId !== 'all' && { project_id: selectedProjectId }),\n      ...(activityTypeFilter !== 'all' && { activity_type: activityTypeFilter }),\n      ...(searchQuery && { search: searchQuery })\n    };\n\n    setFilters(filters);\n  }, [dateFilters, selectedProjectId, activityTypeFilter, searchQuery, setFilters]);\n\n  React.useEffect(() => {\n    handleFiltersChange();\n  }, [handleFiltersChange]);\n\n  const handleStartSession = useCallback(async () => {\n    if (!newSessionData.project_id || !newSessionData.activity_description) {\n      toast.error('Veuillez remplir tous les champs requis');\n      return;\n    }\n\n    await startTimer(newSessionData as CreateTimeSessionData);\n    startSessionModal.close();\n  }, [newSessionData, startTimer, startSessionModal]);\n\n  const handleEditSession = useCallback((session: TimeSession) => {\n    setEditingSession(session);\n    editSessionModal.open();\n  }, [editSessionModal]);\n\n  const handleDeleteSession = useCallback(async (sessionId: string) => {\n    if (confirm('√ätes-vous s√ªr de vouloir supprimer cette session ?')) {\n      await deleteSession(sessionId);\n    }\n  }, [deleteSession]);\n\n  const handleExport = useCallback(async (format: ActivityExportFormat) => {\n    const filters: ActivityFilters = {\n      ...dateFilters,\n      ...(selectedProjectId !== 'all' && { project_id: selectedProjectId })\n    };\n\n    const response = await exportActivities(filters, format);\n    if (response.success && onExport) {\n      onExport(response.data);\n    }\n  }, [dateFilters, selectedProjectId, exportActivities, onExport]);\n\n  // ==========================================\n  // RENDER HELPERS\n  // ==========================================\n\n  const renderTimer = () => {\n    if (!showTimer) return null;\n\n    return (\n      <Card className=\"mb-6 border-2 border-dashed border-primary/20\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Clock className=\"w-5 h-5 text-primary\" />\n            Timer de Session\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {currentSession ? (\n            <div className=\"space-y-4\">\n              {/* Session Active */}\n              <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-lg\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-lg\">{currentSession.activity_description}</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {currentSession.project_title} ‚Ä¢ {currentSession.activity_type}\n                  </p>\n                  <div className=\"flex items-center gap-4 mt-2\">\n                    <Badge className={getActivityStatusColor(currentSession.status)}>\n                      {isActive ? 'En cours' : isPaused ? 'En pause' : currentSession.status}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">\n                      D√©marr√© √† {format(new Date(currentSession.start_time), 'HH:mm')}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"text-right space-y-1\">\n                  <div className={cn(\n                    \"text-3xl font-bold\",\n                    isActive && \"text-green-600 animate-pulse\"\n                  )}>\n                    {formattedTime}\n                  </div>\n                  <div className=\"text-lg text-green-600 font-semibold\">\n                    {formattedCost}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {currentSession.hourly_rate}‚Ç¨/min\n                  </div>\n                </div>\n              </div>\n\n              {/* Contr√¥les */}\n              <div className=\"flex justify-center gap-2\">\n                {isActive ? (\n                  <Button\n                    onClick={pauseTimer}\n                    disabled={timerLoading}\n                    variant=\"outline\"\n                    size=\"lg\"\n                  >\n                    <Pause className=\"w-4 h-4 mr-2\" />\n                    Pause\n                  </Button>\n                ) : isPaused ? (\n                  <Button\n                    onClick={resumeTimer}\n                    disabled={timerLoading}\n                    variant=\"default\"\n                    size=\"lg\"\n                  >\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    Reprendre\n                  </Button>\n                ) : null}\n                \n                <Button\n                  onClick={stopTimer}\n                  disabled={timerLoading}\n                  variant=\"destructive\"\n                  size=\"lg\"\n                >\n                  <Square className=\"w-4 h-4 mr-2\" />\n                  Arr√™ter\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Clock className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground/50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Aucune session active</h3>\n              <p className=\"text-muted-foreground mb-4\">D√©marrez une nouvelle session pour suivre votre temps</p>\n              <Button onClick={startSessionModal.open} size=\"lg\">\n                <Play className=\"w-4 h-4 mr-2\" />\n                Nouvelle Session\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderOverviewTab = () => (\n    <div className=\"space-y-6\">\n      {renderTimer()}\n      \n      {/* R√©sum√© rapide */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Sessions Totales</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.total_sessions}</div>\n              <p className=\"text-xs text-green-600\">+{stats.completed_sessions} compl√©t√©es</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Temps Total</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatDuration(stats.total_minutes)}</div>\n              <p className=\"text-xs text-muted-foreground\">Moy. {formatDuration(stats.average_session_duration)}/session</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Revenus</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{formatCost(stats.total_cost)}</div>\n              <p className=\"text-xs text-muted-foreground\">Ce mois-ci</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Productivit√©</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.productivity_score}/100</div>\n              <p className={cn(\n                \"text-xs flex items-center gap-1\",\n                stats.efficiency_trend === 'improving' ? 'text-green-600' :\n                stats.efficiency_trend === 'declining' ? 'text-red-600' : 'text-gray-600'\n              )}>\n                <TrendingUp className=\"w-3 h-3\" />\n                {stats.efficiency_trend === 'improving' ? '+' : stats.efficiency_trend === 'declining' ? '-' : ''}\n                {Math.abs(stats.trend_percentage)}%\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Sessions r√©centes */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"w-5 h-5\" />\n            Sessions R√©centes\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ScrollArea className=\"h-64\">\n            {activities.slice(0, 5).map(session => (\n              <div key={session.id} className=\"flex items-center justify-between py-3 border-b last:border-0\">\n                <div className=\"flex-1\">\n                  <p className=\"font-medium line-clamp-1\">{session.activity_description}</p>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge variant=\"outline\" className={getActivityTypeColor(session.activity_type || 'task')}>\n                      {ACTIVITY_TYPE_OPTIONS.find(opt => opt.value === session.activity_type)?.label || 'T√¢che'}\n                    </Badge>\n                    <Badge className={getActivityStatusColor(session.status)}>\n                      {session.status}\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {session.project_title} ‚Ä¢ {format(new Date(session.start_time), 'dd MMM HH:mm', { locale: fr })}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  {session.duration_minutes && (\n                    <p className=\"font-semibold\">{formatDuration(session.duration_minutes)}</p>\n                  )}\n                  {session.total_cost && (\n                    <p className=\"text-sm text-green-600\">{formatCost(session.total_cost)}</p>\n                  )}\n                </div>\n              </div>\n            ))}\n            {activities.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Activity className=\"w-10 h-10 mx-auto mb-3 opacity-50\" />\n                <p>Aucune activit√© enregistr√©e</p>\n              </div>\n            )}\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderActivitiesTab = () => (\n    <div className=\"space-y-6\">\n      {/* Filtres */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"w-5 h-5\" />\n            Filtres\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label>Projet</Label>\n              <ProjectSelectorNeon\n                projects={filteredProjects}\n                selectedProjectId={selectedProjectId === 'all' ? '' : selectedProjectId}\n                onProjectChange={(id) => setSelectedProjectId(id || 'all')}\n                placeholder=\"Tous les projets\"\n                showStatus={false}\n              />\n            </div>\n            \n            <div>\n              <Label>Type d'activit√©</Label>\n              <Select value={activityTypeFilter} onValueChange={(value) => setActivityTypeFilter(value as any)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tous les types</SelectItem>\n                  {ACTIVITY_TYPE_OPTIONS.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.icon} {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label>P√©riode</Label>\n              <Select value={dateRange} onValueChange={(value: any) => setDateRange(value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"week\">Cette semaine</SelectItem>\n                  <SelectItem value=\"month\">Ce mois</SelectItem>\n                  <SelectItem value=\"all\">Tout</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label>Recherche</Label>\n              <Input\n                placeholder=\"Rechercher...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center mt-4\">\n            <Button variant=\"outline\" onClick={resetFilters}>\n              R√©initialiser\n            </Button>\n            {showExportOptions && (\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  CSV\n                </Button>\n                <Button variant=\"outline\" onClick={() => handleExport('json')}>\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  JSON\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Liste des activit√©s */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Historique des Activit√©s ({activities.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ScrollArea className=\"h-96\">\n            <div className=\"space-y-3\">\n              {activities.map(session => (\n                <div\n                  key={session.id}\n                  className={cn(\n                    \"p-4 rounded-lg border transition-colors hover:bg-muted/50\",\n                    session.status === 'active' && \"bg-green-50 border-green-200\",\n                    session.status === 'paused' && \"bg-orange-50 border-orange-200\"\n                  )}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className={getActivityTypeColor(session.activity_type || 'task')}>\n                          {session.project_title}\n                        </Badge>\n                        <Badge className={getActivityStatusColor(session.status)}>\n                          {session.status}\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"font-medium\">{session.activity_description}</p>\n                      \n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <span className=\"flex items-center gap-1\">\n                          <Calendar className=\"w-3 h-3\" />\n                          {format(new Date(session.start_time), 'dd MMM yyyy HH:mm', { locale: fr })}\n                        </span>\n                        {session.duration_minutes && (\n                          <span className=\"flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            {formatDuration(session.duration_minutes)}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start gap-2\">\n                      {session.total_cost && (\n                        <div className=\"text-right\">\n                          <p className=\"text-lg font-semibold text-green-600\">\n                            {formatCost(session.total_cost)}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {session.hourly_rate}‚Ç¨/min\n                          </p>\n                        </div>\n                      )}\n                      \n                      {session.status === 'completed' && (\n                        <div className=\"flex gap-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => handleEditSession(session)}\n                          >\n                            <Edit2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => handleDeleteSession(session.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              {hasMore && (\n                <div className=\"text-center pt-4\">\n                  <Button variant=\"outline\" onClick={loadMore} disabled={loading}>\n                    Charger plus\n                  </Button>\n                </div>\n              )}\n              \n              {activities.length === 0 && (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Activity className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                  <p>Aucune activit√© trouv√©e</p>\n                  <p className=\"text-sm\">Ajustez vos filtres ou d√©marrez une nouvelle session</p>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderStatsTab = () => {\n    if (!showStats || !stats) {\n      return (\n        <div className=\"text-center py-12\">\n          <BarChart3 className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground/50\" />\n          <p className=\"text-muted-foreground\">Statistiques non disponibles</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        {/* M√©triques principales */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                <Target className=\"w-4 h-4\" />\n                Performance Globale\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold mb-2\">{stats.productivity_score}/100</div>\n              <div className=\"flex items-center gap-2\">\n                <div className={cn(\n                  \"px-2 py-1 rounded text-xs font-medium\",\n                  stats.productivity_score >= 80 ? 'bg-green-100 text-green-700' :\n                  stats.productivity_score >= 60 ? 'bg-yellow-100 text-yellow-700' :\n                  'bg-red-100 text-red-700'\n                )}>\n                  {stats.productivity_score >= 80 ? 'Excellent' :\n                   stats.productivity_score >= 60 ? 'Bon' : '√Ä am√©liorer'}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                <Award className=\"w-4 h-4\" />\n                Consistance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold mb-2\">{stats.consistency_score}/100</div>\n              <p className=\"text-xs text-muted-foreground\">R√©gularit√© de vos sessions</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                Efficacit√©\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold mb-2\">{formatDuration(stats.average_session_duration)}</div>\n              <p className=\"text-xs text-muted-foreground\">Dur√©e moyenne par session</p>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Top projets */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Projets les Plus Performants</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {topPerformingProjects.map((project, index) => (\n                <div key={project.project_id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={cn(\n                      \"w-8 h-8 rounded-full flex items-center justify-center text-white font-bold\",\n                      index === 0 ? 'bg-yellow-500' :\n                      index === 1 ? 'bg-gray-400' :\n                      index === 2 ? 'bg-orange-500' : 'bg-gray-300'\n                    )}>\n                      {index + 1}\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{project.project_title}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {project.total_sessions} sessions ‚Ä¢ {formatDuration(project.total_minutes)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-green-600\">{formatCost(project.total_cost)}</p>\n                    <p className=\"text-sm text-muted-foreground\">{project.efficiency_score}/100</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Recommandations */}\n        {getRecommendations().length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Recommandations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {getRecommendations().map(recommendation => (\n                  <div key={recommendation.id} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-semibold\">{recommendation.title}</h4>\n                      <Badge variant={recommendation.priority === 'high' ? 'destructive' : 'secondary'}>\n                        {recommendation.priority}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-3\">{recommendation.description}</p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium text-primary\">{recommendation.action}</span>\n                      <div className=\"flex gap-2 text-xs\">\n                        <span className=\"text-green-600\">Impact: {recommendation.impact_score}/10</span>\n                        <span className=\"text-orange-600\">Effort: {recommendation.effort_required}/10</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  // ==========================================\n  // MAIN RENDER\n  // ==========================================\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Header */}\n      <PageHeaderNeon\n        title=\"Activit√©s\"\n        description=\"Suivi du temps et gestion des activit√©s\"\n        icon={Activity}\n        iconColor=\"from-blue-500 to-cyan-500\"\n      >\n        <div className=\"flex items-center gap-3\">\n          <Button onClick={startSessionModal.open} disabled={hasActiveSession}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Nouvelle Session\n          </Button>\n          <Button variant=\"outline\" onClick={() => refreshStats?.()}>\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Actualiser\n          </Button>\n        </div>\n      </PageHeaderNeon>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\">Vue d'ensemble</TabsTrigger>\n          <TabsTrigger value=\"activities\">Activit√©s</TabsTrigger>\n          {showStats && <TabsTrigger value=\"stats\">Statistiques</TabsTrigger>}\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {renderOverviewTab()}\n        </TabsContent>\n\n        <TabsContent value=\"activities\" className=\"space-y-6\">\n          {renderActivitiesTab()}\n        </TabsContent>\n\n        {showStats && (\n          <TabsContent value=\"stats\" className=\"space-y-6\">\n            {renderStatsTab()}\n          </TabsContent>\n        )}\n      </Tabs>\n\n      {/* Modal Nouvelle Session */}\n      <FullScreenModal\n        isOpen={startSessionModal.isOpen}\n        onClose={startSessionModal.close}\n        title=\"Nouvelle Session\"\n        description=\"D√©marrez une nouvelle session de suivi du temps\"\n        actions={\n          <ModalActions\n            onSave={handleStartSession}\n            onCancel={startSessionModal.close}\n            saveText=\"D√©marrer\"\n            saveDisabled={!newSessionData.project_id || !newSessionData.activity_description}\n            isLoading={timerLoading}\n          />\n        }\n      >\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"project\">Projet *</Label>\n              <ProjectSelectorNeon\n                projects={filteredProjects}\n                selectedProjectId={newSessionData.project_id || ''}\n                onProjectChange={(id) => setNewSessionData(prev => ({ ...prev, project_id: id || '' }))}\n                placeholder=\"S√©lectionner un projet\"\n                showStatus={false}\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"activity_type\">Type d'activit√©</Label>\n              <Select\n                value={newSessionData.activity_type}\n                onValueChange={(value) => setNewSessionData(prev => ({ ...prev, activity_type: value as ActivityType }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {ACTIVITY_TYPE_OPTIONS.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.icon} {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"activity_description\">Description de l'activit√© *</Label>\n            <Textarea\n              id=\"activity_description\"\n              placeholder=\"D√©crivez ce sur quoi vous allez travailler...\"\n              value={newSessionData.activity_description || ''}\n              onChange={(e) => setNewSessionData(prev => ({ ...prev, activity_description: e.target.value }))}\n              className=\"min-h-[100px]\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"hourly_rate\">Tarif (‚Ç¨/minute)</Label>\n            <Input\n              id=\"hourly_rate\"\n              type=\"number\"\n              step=\"0.1\"\n              min=\"0\"\n              value={newSessionData.hourly_rate}\n              onChange={(e) => setNewSessionData(prev => ({ ...prev, hourly_rate: parseFloat(e.target.value) || 0 }))}\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              √âquivaut √† {((newSessionData.hourly_rate || 0) * 60).toFixed(0)}‚Ç¨/heure\n            </p>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">Notes (optionnel)</Label>\n            <Textarea\n              id=\"notes\"\n              placeholder=\"Notes ou contexte suppl√©mentaire...\"\n              value={newSessionData.notes || ''}\n              onChange={(e) => setNewSessionData(prev => ({ ...prev, notes: e.target.value }))}\n            />\n          </div>\n        </div>\n      </FullScreenModal>\n    </div>\n  );\n}