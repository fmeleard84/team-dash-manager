import { useState, lazy, Suspense } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Save, FileText, Users, FolderOpen, GitBranch, Database, AlertCircle, ChevronRight, ChevronDown, Home, Play, Calendar, MessageSquare, Layout, Code, Shield, Server, Zap } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

// Import des pages de design system
const DesignSystemModal = lazy(() => import('./DesignSystemModal'));

interface MenuItem {
  id: string;
  label: string;
  icon?: any;
  children?: MenuItem[];
}

const LLMDashboard = () => {
  const { toast } = useToast();
  const [activeSection, setActiveSection] = useState('general');
  const [isEditing, setIsEditing] = useState(false);
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['projet', 'candidat', 'database']));
  
  const menuItems: MenuItem[] = [
    {
      id: 'general',
      label: 'Vue d\'ensemble',
      icon: Home,
    },
    {
      id: 'candidat',
      label: 'Candidat',
      icon: Users,
      children: [
        { id: 'candidat-flow', label: 'Flux candidat' },
        { id: 'candidat-onboarding', label: 'Onboarding' },
        { id: 'candidat-qualification', label: 'Qualification' },
        { id: 'candidat-missions', label: 'Gestion des missions' },
        { id: 'candidat-activities', label: '‚è±Ô∏è Activit√©s & Time Tracking' },
        { id: 'candidat-realtime', label: 'Temps r√©el' },
      ]
    },
    {
      id: 'projet',
      label: 'Projet',
      icon: FolderOpen,
      children: [
        { id: 'projet-workflow', label: 'Workflow projet' },
        { id: 'projet-pause-reprise', label: '‚è∏Ô∏è Pause/Reprise' },
        { id: 'projet-edition-candidat', label: 'üîÑ √âdition & Changement candidat' },
        { id: 'projet-demarrage', label: 'üî• D√©marrage projet' },
        { id: 'projet-orchestration', label: 'Orchestration' },
        { id: 'projet-collaboration', label: 'Outils collaboratifs' },
        { id: 'projet-planning', label: 'Planning & √âv√©nements' },
        { id: 'projet-messagerie', label: 'üí¨ Messagerie' },
        { id: 'projet-drive', label: 'üìÅ Drive' },
      ]
    },
    {
      id: 'database',
      label: 'Base de donn√©es',
      icon: Database,
      children: [
        { id: 'db-schema', label: 'Sch√©ma principal' },
        { id: 'db-rls', label: 'RLS & S√©curit√©' },
        { id: 'db-realtime', label: 'Tables temps r√©el' },
        { id: 'db-functions', label: 'Edge Functions' },
      ]
    },
    {
      id: 'api',
      label: 'API & Int√©grations',
      icon: Code,
      children: [
        { id: 'api-supabase', label: 'Supabase' },
        { id: 'api-hooks', label: 'React Hooks' },
      ]
    },
    {
      id: 'design',
      label: 'Design System',
      icon: Layout,
      children: [
        { id: 'design-system', label: 'üé® Charte Graphique Premium' },
        { id: 'design-modal', label: 'üì± Modals Plein √âcran' },
        { id: 'design-components', label: 'üß© Composants UI' },
        { id: 'design-patterns', label: 'üìê Patterns UX' },
      ]
    }
  ];

  const toggleSection = (sectionId: string) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(sectionId)) {
      newExpanded.delete(sectionId);
    } else {
      newExpanded.add(sectionId);
    }
    setExpandedSections(newExpanded);
  };

  // Contenu pour chaque section
  const [content, setContent] = useState({
    'design-system': `# üé® Charte Graphique Premium - Syst√®me de Design Impl√©ment√©

## Vue d'ensemble
Ce syst√®me de design premium est inspir√© des meilleurs sites minimalistes modernes. Il privil√©gie les contrastes forts, la typographie massive et l'utilisation parcimonieuse de couleur.

## üÜï Effets Visuels Avanc√©s (Mise √† jour 02/09/2025)

### Effet Division (Chromatic Aberration)
Impl√©ment√© sur le titre principal de la homepage pour un effet moderne et dynamique.

#### Implementation dans HeroLyniqFixed
\`\`\`tsx
// Effet Division avec d√©calages chromatiques
<div className="relative">
  {/* Couche cyan */}
  <div className="absolute inset-0 opacity-60" style={{ transform: 'translate(-2px, 2px)' }}>
    <span className="block text-cyan-400 mix-blend-screen">Digital</span>
  </div>
  
  {/* Couche magenta */}
  <div className="absolute inset-0 opacity-60" style={{ transform: 'translate(2px, -2px)' }}>
    <span className="block text-pink-500 mix-blend-screen">Digital</span>
  </div>
  
  {/* Texte principal */}
  <div className="relative mix-blend-lighten">
    <span className="block text-white">Digital</span>
  </div>
</div>
\`\`\`

### Hero Section avec Vid√©o
- Background vid√©o en loop automatique
- Overlay gradients l√©gers pour la lisibilit√©
- Position fixe avec sections qui glissent par-dessus

### Composants Cr√©√©s
- **IntroOverlay**: Animation d'intro avec logo et fondu
- **HeroLyniqFixed**: Hero section avec vid√©o et effet Division
- **HeroLyniqBlend**: Version alternative avec blend modes avanc√©s

## 1. Configuration Tailwind (tailwind.config.ts)

### Couleurs d√©finies
\`\`\`typescript
colors: {
  // Neutres premium
  black: '#0D0D0F',        // Fond tr√®s sombre
  'near-black': '#111113', // Fond sombre secondaire
  white: '#FFFFFF',        // Blanc pur
  gray: {
    900: '#1B1B1F',        // Tr√®s sombre
    800: '#232327',        // Bordures sombres
    700: '#2B2B30',
    600: '#3A3A40',
    500: '#52525B',        // Texte secondaire
    400: '#8A8A93',        // Texte tertiaire
    300: '#C9C9CF',        // Bordures claires
    200: '#E7E7EA',        // Dividers
    100: '#F3F3F5',        // Fond tr√®s clair
  },
  
  // Accent principal (Violet premium)
  accent: {
    DEFAULT: '#7C3AED',    // Violet principal
    dark: '#6D28D9',       // Violet hover
    light: '#8B5CF6',      // Violet clair
    ink: '#5B21B6',        // Violet texte
  }
}
\`\`\`

### Typographie
\`\`\`typescript
fontSize: {
  'display-xxl': ['clamp(3.5rem, 10vw, 9rem)', { 
    lineHeight: '1.05', 
    letterSpacing: '-0.02em' 
  }],
  'display-xl': ['clamp(2.75rem, 7vw, 5rem)', { 
    lineHeight: '1.06', 
    letterSpacing: '-0.02em' 
  }],
  'display': ['clamp(2.25rem, 6vw, 3.5rem)', { 
    lineHeight: '1.08', 
    letterSpacing: '-0.02em' 
  }],
  'h1': ['clamp(2.25rem, 5vw, 3.5rem)', { 
    lineHeight: '1.1', 
    letterSpacing: '-0.02em' 
  }],
  'h2': ['clamp(1.75rem, 4vw, 2.5rem)', { 
    lineHeight: '1.2', 
    letterSpacing: '-0.01em' 
  }],
  'h3': ['clamp(1.375rem, 3vw, 1.75rem)', { 
    lineHeight: '1.3' 
  }],
  'lead': ['1.25rem', { lineHeight: '1.5' }],
  'body': ['1rem', { lineHeight: '1.6' }],
  'small': ['0.875rem', { lineHeight: '1.5' }],
  'eyebrow': ['0.75rem', { 
    lineHeight: '1.2', 
    letterSpacing: '0.04em' 
  }],
}
\`\`\`

### Autres tokens
\`\`\`typescript
borderRadius: {
  'md': '12px',
  'lg': '16px',
  'xl': '20px',
  '2xl': '24px',
},

boxShadow: {
  'card': '0 8px 24px rgba(0,0,0,.06)',
  'card-hover': '0 12px 32px rgba(0,0,0,.08)',
  'button': '0 1px 2px rgba(0,0,0,.08)',
  'focus': '0 0 0 2px rgba(124,58,237,.35)',
},

backgroundImage: {
  'hero-gradient': 'linear-gradient(90deg, #38E1E1 0%, #21A7F0 35%, #FDB952 70%, #F26A4D 100%)',
  'accent-gradient': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
  'dark-gradient': 'linear-gradient(180deg, #0D0D0F 0%, #1B1B1F 100%)',
}
\`\`\`

## 2. Classes Utilitaires CSS (src/index.css)

### Typographie Premium
\`\`\`css
/* Titres massifs */
.h-display-xxl {
  @apply text-display-xxl font-bold;
}

.h-display-xl {
  @apply text-display-xl font-bold;
}

.h-display {
  @apply text-display font-bold;
}

/* Gradient de texte h√©ro√Øque */
.h-hero-gradient {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

/* Eyebrow (√©tiquette de section) */
.eyebrow {
  @apply text-eyebrow uppercase text-accent font-medium;
}

/* Paragraphe principal */
.lead {
  @apply text-lead text-black/80;
}
\`\`\`

### Boutons Premium
\`\`\`css
.btn-premium {
  @apply h-11 px-5 rounded-md font-semibold inline-flex items-center gap-2.5 transition-all duration-200;
}

.btn-primary-premium {
  @apply bg-black text-white shadow-button hover:bg-gray-900;
}

.btn-secondary-premium {
  @apply bg-white text-black border border-gray-200 hover:border-gray-300;
}

.btn-accent-premium {
  @apply bg-accent text-white hover:bg-accent-dark shadow-button;
}

.btn-ghost-premium {
  @apply bg-transparent text-accent hover:bg-accent/10;
}
\`\`\`

### Cards Premium
\`\`\`css
.card-premium {
  @apply bg-white border border-gray-200 rounded-xl p-5 shadow-card hover:shadow-card-hover transition-shadow duration-200;
}

.card-dark-premium {
  @apply bg-near-black border border-gray-800 text-white rounded-xl p-5;
}
\`\`\`

### Effets Sp√©ciaux
\`\`\`css
/* Effet Noise/Grain */
.noise {
  @apply relative;
}

.noise::after {
  content: "";
  @apply absolute inset-0 opacity-[0.06] pointer-events-none mix-blend-overlay;
  background-image: url("data:image/svg+xml,..."); /* SVG noise pattern */
}

/* Coin marqu√© (accent visuel) */
.corner-mark {
  @apply relative;
}

.corner-mark::after {
  content: "";
  @apply absolute top-2.5 right-2.5 w-3 h-3 border-t-2 border-r-2 border-accent rounded-sm;
}

/* Animation Reveal au scroll */
.reveal {
  @apply opacity-0 translate-y-2 transition-all ease-out;
  transition-duration: 220ms;
}

.reveal.is-inview {
  @apply opacity-100 translate-y-0;
}
\`\`\`

### Liste de Services (fond noir)
\`\`\`css
.service-item {
  @apply text-display font-bold tracking-tight-2 opacity-20 py-6 border-b border-gray-800 transition-opacity duration-200 hover:opacity-100;
}

.service-item.is-active {
  @apply opacity-100;
}
\`\`\`

### Statistiques
\`\`\`css
.stat-num {
  @apply text-[clamp(2.75rem,6vw,4.5rem)] font-bold tracking-tight-2 text-black tabular-nums;
}

.stat-label {
  @apply text-sm text-gray-500;
}
\`\`\`

## 3. Patterns de Composants React

### Hero Section Premium
\`\`\`tsx
<section className="relative min-h-screen flex items-center justify-center overflow-hidden">
  {/* Background avec noise */}
  <div className="absolute inset-0 bg-gradient-to-br from-gray-50 via-white to-gray-100 noise"></div>
  
  <div className="container relative z-10 text-center py-32">
    {/* Eyebrow */}
    <div className="eyebrow mb-8 reveal">
      <span className="inline-flex items-center gap-2">
        <span>‚Ü≥</span> DIGITAL TRANSFORMATION STUDIO
      </span>
    </div>
    
    {/* Titre XXL avec gradient */}
    <h1 className="h-display-xxl mb-8 reveal">
      <span className="block">From ordinary to</span>
      <span className="h-hero-gradient">extraordinary</span>
    </h1>
    
    {/* Lead */}
    <p className="lead max-w-3xl mx-auto mb-12 reveal">
      Description principale...
    </p>
    
    {/* CTA */}
    <button className="btn-premium btn-accent-premium">
      Action principale
      <ArrowRight className="w-4 h-4" />
    </button>
  </div>
</section>
\`\`\`

### Section Stats
\`\`\`tsx
<section className="py-24 border-y border-gray-200">
  <div className="container">
    <div className="grid grid-cols-2 lg:grid-cols-4 gap-8">
      {stats.map((stat) => (
        <div className="text-center reveal">
          <div className="stat-num">{stat.number}</div>
          <div className="stat-label">{stat.label}</div>
        </div>
      ))}
    </div>
  </div>
</section>
\`\`\`

### Liste Services Massive (fond noir)
\`\`\`tsx
<section className="py-24 bg-black text-white">
  <div className="container">
    {services.map((service, index) => (
      <div 
        className={\`border-b border-gray-800 py-12 cursor-pointer transition-all duration-300 hover:pl-8 \${
          activeService === index ? 'pl-8' : ''
        }\`}
        onMouseEnter={() => setActiveService(index)}
      >
        <div className="flex items-baseline gap-6 mb-4">
          <span className={\`text-eyebrow \${
            activeService === index ? 'text-accent' : 'text-gray-600'
          }\`}>
            {service.id}
          </span>
          <h3 className={\`text-h2 font-bold transition-opacity duration-300 \${
            activeService === index ? 'opacity-100' : 'opacity-20'
          }\`}>
            {service.title}
          </h3>
        </div>
        {activeService === index && (
          <p className="text-gray-400 max-w-2xl animate-fade">
            {service.description}
          </p>
        )}
      </div>
    ))}
  </div>
</section>
\`\`\`

### Cards avec Corner Mark
\`\`\`tsx
<div className="grid md:grid-cols-3 gap-8">
  {items.map((item) => (
    <div className="card-premium corner-mark reveal">
      <div className="text-eyebrow text-accent mb-4">{item.step}</div>
      <h3 className="text-h3 font-bold mb-4">{item.title}</h3>
      <p className="text-body text-gray-600">{item.description}</p>
    </div>
  ))}
</div>
\`\`\`

### Citation Large (Testimonial)
\`\`\`tsx
<section className="py-24 bg-black text-white">
  <div className="container max-w-4xl">
    <div className="text-center">
      <div className="text-6xl text-accent mb-8">"</div>
      <blockquote className="h-display mb-8">
        Citation importante avec 
        <span className="text-accent"> partie mise en √©vidence</span> 
        pour l'impact.
      </blockquote>
      <div className="divider-dark-premium mx-auto w-24 mb-8"></div>
      <div>
        <p className="font-bold">Nom Personne</p>
        <p className="text-gray-400 text-small">Titre, Entreprise</p>
      </div>
    </div>
  </div>
</section>
\`\`\`

## 4. Animations et Interactions

### Observer pour Reveal au Scroll
\`\`\`typescript
useEffect(() => {
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-inview');
        }
      });
    },
    { threshold: 0.1 }
  );

  document.querySelectorAll('.reveal').forEach((el) => observer.observe(el));
  return () => observer.disconnect();
}, []);
\`\`\`

### Header Sticky avec Effet
\`\`\`tsx
const [scrolled, setScrolled] = useState(false);

useEffect(() => {
  const handleScroll = () => {
    setScrolled(window.scrollY > 50);
  };
  window.addEventListener('scroll', handleScroll);
  return () => window.removeEventListener('scroll', handleScroll);
}, []);

<header className={\`fixed top-0 w-full z-50 transition-all duration-300 \${
  scrolled ? 'bg-white/95 backdrop-blur-md border-b border-gray-200' : 'bg-transparent'
}\`}>
\`\`\`

## 5. R√®gles d'Usage

### Hi√©rarchie Typographique
1. **Hero**: h-display-xxl ou h-display-xl avec gradient
2. **Sections**: h-display ou h1
3. **Sous-sections**: h2 ou h3
4. **Body**: text-body (16px) avec line-height g√©n√©reux
5. **Eyebrow**: Toujours en UPPERCASE avec fl√®che ‚Ü≥

### Couleurs
- **Texte principal**: black (#0D0D0F) sur fond clair
- **Texte secondaire**: gray-500 (#52525B)
- **Texte tertiaire**: gray-400 (#8A8A93)
- **Accent**: Violet (#7C3AED) - Usage parcimonieux
- **Fond sombre**: black ou near-black
- **Bordures**: gray-200 (clair) ou gray-800 (sombre)

### Espacement
- **Sections**: py-24 (96px) minimum
- **Container**: padding lat√©ral responsive
- **Gap grilles**: gap-6 ou gap-8
- **Marges texte**: mb-4, mb-8, mb-12, mb-16

### Effets
- **Hover cards**: shadow-card ‚Üí shadow-card-hover
- **Hover boutons**: Changement de couleur subtil
- **Transitions**: duration-200 ou duration-300
- **Reveal**: Ajouter classe .reveal pour animation au scroll

## 6. Checklist d'Impl√©mentation

‚úÖ **Configuration Tailwind**
- [ ] Importer les couleurs premium
- [ ] Configurer les fontSize custom
- [ ] Ajouter les borderRadius, shadows, gradients

‚úÖ **Classes CSS**
- [ ] Copier les classes utilitaires dans index.css
- [ ] V√©rifier les @apply et @layer components

‚úÖ **Composants**
- [ ] Utiliser les patterns de sections
- [ ] Appliquer les classes premium
- [ ] Impl√©menter les animations reveal

‚úÖ **Accessibilit√©**
- [ ] Contraste minimum 4.5:1
- [ ] Focus visible sur tous les √©l√©ments interactifs
- [ ] Zones cliquables minimum 44x44px
- [ ] Alt text sur toutes les images

## 7. Exemples de Pages Compl√®tes

### Structure Page Type
\`\`\`tsx
<div className="min-h-screen bg-white">
  {/* Header sticky */}
  <Header />
  
  {/* Hero avec noise effect */}
  <HeroSection />
  
  {/* Stats avec grands chiffres */}
  <StatsSection />
  
  {/* Services liste massive fond noir */}
  <ServicesSection />
  
  {/* Cards avec corner marks */}
  <ProcessSection />
  
  {/* Testimonial citation large */}
  <TestimonialSection />
  
  {/* CTA final */}
  <CTASection />
  
  {/* Footer premium */}
  <Footer />
</div>
\`\`\`

## Notes Importantes pour l'IA

1. **Toujours privil√©gier le contraste**: Noir sur blanc ou blanc sur noir
2. **Accent avec parcimonie**: Le violet ne doit pas dominer
3. **Typographie massive**: Ne pas h√©siter sur les grandes tailles
4. **Espacement g√©n√©reux**: Laisser respirer les √©l√©ments
5. **Animations subtiles**: Reveal au scroll, pas d'overshoot
6. **Mobile-first**: Toutes les classes doivent √™tre responsive
7. **Performance**: Lazy loading des images, optimisation des animations

Cette charte graphique est con√ßue pour cr√©er une exp√©rience premium, minimaliste et moderne. Elle doit √™tre appliqu√©e de mani√®re coh√©rente sur toutes les pages du site.`,
    general: `# Documentation Technique - Team Dash Manager

## Vue d'ensemble
Team Dash Manager est une plateforme de gestion de projets et de ressources humaines permettant de connecter des clients avec des candidats qualifi√©s pour former des √©quipes projet.

## Architecture
- **Frontend**: React + TypeScript + Vite + Tailwind CSS
- **Backend**: Supabase (PostgreSQL + Edge Functions)
- **Real-time**: Supabase Realtime pour les mises √† jour instantan√©es
- **Storage**: Supabase Storage pour les fichiers projet

## Flux m√©tier principal
1. **Client** cr√©e un projet et d√©finit ses besoins en ressources
2. **Syst√®me** recherche les candidats correspondants (status: recherche)
3. **Candidats** re√ßoivent les notifications et peuvent accepter/refuser
4. **Client** d√©marre le projet une fois l'√©quipe compl√®te (kickoff)
5. **√âquipe** acc√®de aux outils collaboratifs (Planning, Kanban, Drive, Messages)

## Points d'attention
- Les candidats doivent √™tre qualifi√©s avant de pouvoir recevoir des missions
- Un projet doit avoir toutes ses ressources accept√©es avant de pouvoir d√©marrer
- Le statut 'play' active les outils collaboratifs pour l'√©quipe
- L'invitation kickoff doit appara√Ætre dans le planning des candidats
- La messagerie utilise **EnhancedMessageSystem** pour TOUS les utilisateurs (unifi√© 30/08/2024)
- Les politiques RLS storage acceptent booking_status IN ('accepted', 'book√©') (corrig√© 31/08/2024)

## Conventions de code
- Utiliser des hooks personnalis√©s pour la logique m√©tier r√©utilisable
- Pr√©fixer les composants partag√©s avec 'Shared'
- Utiliser le real-time Supabase pour les mises √† jour instantan√©es
- Toujours filtrer les donn√©es c√¥t√© serveur (RLS)`,

    'candidat-flow': `# Flux Candidat

## Parcours complet du candidat

### 1. Inscription
- Candidat s'inscrit ‚Üí status: 'qualification'
- qualification_status: 'pending'
- Remplit son profil (comp√©tences, exp√©rience, etc.)

### 2. Onboarding
- Compl√®te les informations personnelles
- Upload CV et documents
- S√©lectionne profil m√©tier et seniorit√©

### 3. Qualification
- Passe le test de qualification
- Score >= 80% ‚Üí qualification_status: 'qualified', status: 'disponible'
- Score 60-79% ‚Üí qualification_status: 'stand_by' (validation manuelle)
- Score < 60% ‚Üí qualification_status: 'rejected'

### 4. R√©ception de missions
- Seuls les candidats avec status != 'qualification' re√ßoivent les notifications
- Le matching se fait sur : profile_id, seniority, comp√©tences
- Notification visible dans le dashboard candidat

### 5. Acceptation/Refus
- Accepte ‚Üí booking_status: 'accepted' ET candidate_id d√©fini
- Refuse ‚Üí booking_status: 'declined'
- Si tous acceptent ‚Üí projet passe en 'attente-team'

### 6. Participation au projet
- Acc√®s aux outils collaboratifs (Planning, Kanban, Drive, Messages)
- R√©ception des invitations aux √©v√©nements
- Collaboration avec l'√©quipe`,

    'candidat-onboarding': `# Onboarding Candidat

## Processus d'onboarding

### √âtapes obligatoires
1. **Informations personnelles**
   - Nom, pr√©nom
   - T√©l√©phone
   - Adresse

2. **Profil professionnel**
   - S√©lection du m√©tier (hr_profiles)
   - Choix de la seniorit√© (junior/confirmed/senior)
   - Ann√©es d'exp√©rience

3. **Documents**
   - Upload CV (optionnel mais recommand√©)
   - Photo de profil (optionnel)

### Tables impact√©es
- candidate_profiles: Mise √† jour des informations
- candidate_skills: Ajout des comp√©tences
- storage: Stockage des documents

### Validation
- onboarding_completed: true une fois termin√©
- Redirection vers le test de qualification`,

    'candidat-qualification': `# Qualification Candidat

## Syst√®me de qualification

### Test de qualification
- Questions g√©n√©r√©es par IA selon le profil
- Score calcul√© automatiquement
- Dur√©e limit√©e (30 minutes)

### Niveaux de qualification
| Score | Status | Action |
|-------|--------|--------|
| >= 80% | qualified | Acc√®s imm√©diat aux missions |
| 60-79% | stand_by | Validation manuelle requise |
| < 60% | rejected | Nouveau test possible apr√®s 30 jours |

### Tables concern√©es
- candidate_qualification_tests: Historique des tests
- candidate_profiles: Mise √† jour qualification_status

### Edge Function
- skill-test-ai: G√©n√®re et √©value les tests`,

    'candidat-missions': `# Gestion des Missions Candidat

## üÜï Corrections Importantes (02/09/2025)

### Probl√®me Edge Function corrig√©
- **Erreur**: Join invalide hr_profiles:profile_id causant erreur 500
- **Solution**: Suppression du join, r√©cup√©ration s√©par√©e du nom du profil
- **Fichier**: resource-booking/mission-management-fixed.ts

### Statuts projet corrig√©s
- **Erreur**: Contrainte DB n'acceptait pas 'attente-team'
- **Valeurs valides**: 'play', 'pause', 'completed', 'archiv√©'
- **Logique**: Quand toutes ressources accept√©es ‚Üí status = 'play'

### Filtrage candidat am√©lior√©
- **Ajout**: Filtre booking_status='recherche' dans CandidateDashboard
- **R√©sultat**: Candidats ne voient que missions disponibles

## R√©ception et gestion des missions

### Notification de mission
- D√©clench√©e quand booking_status passe √† 'recherche'
- Visible dans candidate_notifications
- Affichage dans le dashboard avec d√©tails du projet
- **Filtre important**: Seuls assignments avec booking_status='recherche' ET matching profile/seniority

### Acceptation de mission
1. Candidat clique "Accepter"
2. resource-booking Edge Function appel√©e avec:
   - action: 'accept_mission'
   - assignment_id: ID de l'assignment
   - candidate_email: Email du candidat
3. V√©rifications dans l'Edge Function:
   - Assignment existe et est en 'recherche'
   - Candidat existe dans candidate_profiles
4. Mise √† jour atomique:
   - booking_status ‚Üí 'accepted'
   - candidate_id ‚Üí ID du candidat (CRITIQUE!)
5. Mise √† jour projet:
   - Si toutes ressources accept√©es ‚Üí status = 'play'
   - Si partiellement accept√©es ‚Üí status = 'pause'
6. Notification au client (table notifications)

### Refus de mission
1. Candidat clique "Refuser"
2. booking_status ‚Üí 'declined'
3. Syst√®me cherche un autre candidat
4. Notification au client

### Points critiques
- candidate_id DOIT √™tre d√©fini lors de l'acceptation
- V√©rifier que le candidat n'est pas d√©j√† sur un autre projet actif
- Statuts projet limit√©s par contrainte DB: 'play', 'pause', 'completed', 'archiv√©'`,

    'candidat-realtime': `# Temps R√©el Candidat

## Mises √† jour en temps r√©el

### Tables avec realtime activ√©
- projects: Changements de statut
- hr_resource_assignments: Nouvelles assignations
- candidate_notifications: Nouvelles notifications
- messages: Nouveaux messages
- kanban_cards: Mises √† jour des t√¢ches

### Hook principal am√©lior√©
\`\`\`typescript
useRealtimeProjectsFixed()
// √âcoute les changements sur:
// - projects (status) ‚Üí Synchronisation imm√©diate
// - hr_resource_assignments (booking_status)
// - Met √† jour automatiquement l'UI

// AM√âLIORATION 2024:
// - Synchronisation projets dans assignments
// - Utilisation de refs pour √©viter closures p√©rim√©es
// - Update imm√©diat sans refresh page
\`\`\`

### Indicateurs visuels temps r√©el
- **Badge "En pause"** (orange avec ic√¥ne Pause)
  - Affich√© quand status='pause' ou 'attente-team'
  - Visible sur les cartes projet candidat
  
- **Time Tracker bloqu√©**
  - Projets en pause exclus de la liste
  - Message explicite sur la restriction
  - Seuls projets 'play' permettent le tracking

### Synchronisation client ‚Üî candidat
- Changement status c√¥t√© client ‚Üí Update imm√©diat c√¥t√© candidat
- Les projets changent automatiquement d'onglet (pause/en cours)
- Pas besoin de rafra√Æchir la page
- Badge "En pause" appara√Æt/dispara√Æt en temps r√©el

### √âv√©nements surveill√©s
- INSERT: Nouvelles assignations
- UPDATE: Changements de statut (imm√©diat)
- DELETE: Suppressions (rare)`,

    'candidat-activities': `# ‚è±Ô∏è Activit√©s & Time Tracking Candidat

## Vue d'ensemble

Le syst√®me d'activit√©s pour les candidats est bas√© sur le **Time Tracking** uniquement. Les activit√©s affich√©es dans "Mes activit√©s" correspondent aux sessions de temps enregistr√©es via le Time Tracker.

## Architecture technique

### Composants principaux
\`\`\`typescript
// Tracker de temps dans le header
TimeTrackerSimple
- Localisation: src/components/time-tracking/TimeTrackerSimple.tsx
- Fonction: D√©marrer/Arr√™ter des sessions de temps
- Position: Header du dashboard candidat
- **RESTRICTION**: Ne fonctionne QUE pour les projets avec status='play'
- Les projets en pause sont exclus de la liste

// Page d'affichage des activit√©s
CandidateActivities
- Localisation: src/pages/CandidateActivities.tsx
- Fonction: Afficher, filtrer et exporter les sessions
- Utilise: useCandidateProjectsOptimized() pour la liste des projets
\`\`\`

### Table de base de donn√©es
\`\`\`sql
CREATE TABLE time_tracking_sessions (
  id UUID PRIMARY KEY,
  candidate_id UUID REFERENCES candidate_profiles(id),
  project_id UUID REFERENCES projects(id),
  activity_description TEXT,
  start_time TIMESTAMP,
  end_time TIMESTAMP,
  duration_minutes INTEGER,
  hourly_rate DECIMAL,
  total_cost DECIMAL,
  status VARCHAR(20), -- 'active', 'paused', 'completed'
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);
\`\`\`

## Flux d'enregistrement d'activit√©

### 1. D√©marrage d'une session
1. Candidat clique sur l'ic√¥ne **horloge** dans le header
2. S√©lectionne un projet dans la liste (projets avec status='play')
3. Ajoute une description de l'activit√©
4. Clique sur "D√©marrer"
5. Une entr√©e est cr√©√©e dans time_tracking_sessions avec status='active'

### 2. Pendant la session
- Timer s'affiche en temps r√©el
- Possibilit√© de mettre en pause (status='paused')
- Reprise possible apr√®s pause
- Le temps est calcul√© automatiquement

### 3. Fin de session
1. Candidat clique sur "Stop"
2. La session est marqu√©e comme status='completed'
3. duration_minutes est calcul√©
4. total_cost = duration_minutes √ó hourly_rate

### 4. Affichage dans "Mes activit√©s"
- Liste toutes les sessions avec status='completed'
- Filtrage par projet possible
- Filtrage par p√©riode (semaine/mois/tout)
- Export CSV disponible

## Hook personnalis√©: useTimeTracking

\`\`\`typescript
const {
  activeSession,      // Session en cours si existe
  candidateRate,      // Taux horaire du candidat
  loading,           // √âtat de chargement
  startSession,      // Fonction pour d√©marrer
  togglePause,       // Fonction pause/reprise
  stopSession,       // Fonction pour arr√™ter
  formatTime         // Formatage du temps
} = useTimeTracking();
\`\`\`

## Ce qui EST track√© (activit√©s visibles)

‚úÖ **Sessions de Time Tracking**
- Temps pass√© sur un projet
- Description de l'activit√©
- Calcul automatique du co√ªt
- Dur√©e pr√©cise en minutes

## Ce qui N'EST PAS track√© (non visible dans activit√©s)

‚ùå **Actions Kanban**
- Cr√©ation de cartes
- D√©placement de cartes
- Finalisation de t√¢ches
‚Üí Ces actions sont enregistr√©es dans kanban_cards mais pas dans time_tracking_sessions

‚ùå **Actions Drive**
- Upload de fichiers
- T√©l√©chargement
- Cr√©ation de dossiers
‚Üí Ces actions ne cr√©ent pas d'entr√©es d'activit√©

‚ùå **Messages**
- Envoi de messages
- Participation aux discussions
‚Üí Enregistr√©s dans messages mais pas comme activit√©s

‚ùå **Planning**
- Acceptation/Refus d'√©v√©nements
- Modifications du planning
‚Üí Pas consid√©r√© comme activit√© facturable

## Points importants

### Calcul du taux horaire
- R√©cup√©r√© depuis hr_resource_assignments
- calculated_price = taux pour le projet
- Converti en taux par minute pour pr√©cision

### Projets disponibles
- Seuls les projets avec status='play' sont list√©s
- Le candidat doit avoir booking_status='accepted'
- Utilise useCandidateProjectsOptimized() pour coh√©rence

### Format d'export CSV
\`\`\`csv
Date,Projet,Activit√©,Dur√©e (min),Tarif/min,Co√ªt total
2024-08-31,Projet A,D√©veloppement feature X,120,1.67,200
\`\`\`

## R√©sum√©

Le syst√®me d'activit√©s est **volontairement limit√©** au Time Tracking car :
1. **Facturation** : Seul le temps r√©el travaill√© est facturable
2. **Transparence** : Le client voit exactement le temps pass√©
3. **Simplicit√©** : Pas de tracking automatique intrusif
4. **Contr√¥le** : Le candidat choisit quand tracker son temps

Pour qu'une action apparaisse dans "Mes activit√©s", elle DOIT passer par le Time Tracker.`,

    'projet-workflow': `# Workflow Projet

## Cycle de vie complet d'un projet

### 1. Cr√©ation (status: 'pause')
- Client cr√©e le projet
- D√©finit titre, description, dates, budget
- Configure les ressources n√©cessaires via ReactFlow

### 2. Recherche d'√©quipe
- Pour chaque ressource ‚Üí booking_status: 'recherche'
- Notifications envoy√©es aux candidats match√©s
- Suivi des acceptations/refus

### 3. √âquipe compl√®te (status: 'attente-team')
- Tous les candidats ont accept√©
- Projet pr√™t √† d√©marrer
- En attente du kickoff client
- **Badge "En pause"** affich√© c√¥t√© candidat
- **Time Tracker bloqu√©** (pas de suivi temps possible)

### 4. D√©marrage (status: 'play')
- Client lance le kickoff
- project-orchestrator configure tout
- Outils collaboratifs activ√©s
- Invitations planning envoy√©es
- **Time Tracker disponible** (suivi temps activ√©)
- Mise √† jour realtime imm√©diate c√¥t√© candidat

### 5. En cours
- √âquipe utilise les outils
- Collaboration active
- Suivi du temps et facturation

### 6. Termin√© (status: 'completed')
- Projet marqu√© comme termin√©
- Facturation finale
- Archivage des donn√©es

## üóÇÔ∏è Syst√®me d'Archivage et Suppression

### Archivage de Projet
**Action r√©versible** - Le projet devient lecture seule

#### Processus
1. Client s√©lectionne "Archiver" dans le menu kebab
2. Modal de confirmation avec choix archive/delete
3. Saisie obligatoire: "ARCHIVE [nom du projet]"
4. Raison optionnelle

#### Effets
- **Statut**: archived_at rempli
- **Acc√®s**: Lecture seule pour tous
- **Donn√©es**: Tout est conserv√©
- **UI**: Onglet "Archiv√©s" dans dashboard
- **Notifications**: Tous les candidats notifi√©s
- **R√©versible**: Peut √™tre d√©sarchiv√©

### Suppression Douce (Soft Delete)
**Action irr√©versible** - Conservation des donn√©es critiques

#### Processus
1. Client s√©lectionne "Supprimer" dans le menu
2. Modal avec avertissements d√©taill√©s
3. Saisie obligatoire: "DELETE [nom du projet]"
4. Confirmation de l'irr√©versibilit√©

#### Effets
- **Statut**: deleted_at rempli, status ‚Üí 'cancelled'
- **Acc√®s Drive/Kanban**: R√©voqu√© imm√©diatement
- **Messages**: Archive conserv√©e (lecture seule)
- **Factures**: Toujours accessibles
- **Time Tracking**: Donn√©es conserv√©es pour facturation
- **Notifications**: Type 'project_deleted' envoy√©

### Tableau Comparatif

| Action | R√©versible | Donn√©es | Acc√®s | Facturation |
|--------|------------|---------|--------|-------------|
| **Archivage** | ‚úÖ Oui | Conserv√©es | Lecture seule | Accessible |
| **Suppression** | ‚ùå Non | Partiellement | R√©voqu√© | Historique conserv√© |
| **En pause** | ‚úÖ Oui | Actives | Complet | Time tracking bloqu√© |

### Notifications Syst√®me

#### Types ajout√©s
- \`project_archived\`: Projet mis en archive
- \`project_unarchived\`: Projet r√©activ√©
- \`project_deleted\`: Suppression d√©finitive
- \`project_cancelled\`: Annulation (via suppression)

#### Ic√¥nes
- üìÅ Archive (bleu)
- üîÑ D√©sarchivage (vert)
- üóëÔ∏è Suppression (rouge)
- ‚õî Annulation (orange)

### Tables Base de Donn√©es

#### Nouvelles colonnes dans \`projects\`
\`\`\`sql
archived_at TIMESTAMPTZ,
archived_by UUID REFERENCES profiles(id),
archived_reason TEXT,
deleted_at TIMESTAMPTZ,
deleted_by UUID REFERENCES profiles(id),
deletion_reason TEXT
\`\`\`

#### Nouvelle table \`project_action_logs\`
\`\`\`sql
CREATE TABLE project_action_logs (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  action_type TEXT CHECK (action_type IN ('archived', 'unarchived', 'deleted', 'restored')),
  action_reason TEXT,
  performed_by UUID REFERENCES profiles(id),
  affected_users UUID[],
  created_at TIMESTAMPTZ DEFAULT NOW()
);
\`\`\`

### Fonctions SQL

#### archive_project()
- Param√®tres: project_id, user_id, reason
- Retour: JSONB avec success, affected_users
- Actions: Archive + notifications

#### unarchive_project()
- Param√®tres: project_id, user_id
- Retour: JSONB avec success
- Actions: D√©sarchivage + notifications

#### soft_delete_project()
- Param√®tres: project_id, user_id, reason
- Retour: JSONB avec success, affected_users
- Actions: Suppression douce + notifications urgentes`,

    'projet-pause-reprise': `# ‚è∏Ô∏è Syst√®me de Pause/Reprise des Projets

## Vue d'ensemble

Le syst√®me permet au client de mettre en pause ou reprendre un projet √† tout moment. Cette fonctionnalit√© est essentielle pour g√©rer les projets selon les besoins m√©tier.

## Fonctionnement c√¥t√© Client

### Mise en pause d'un projet actif
1. Le client clique sur "Mettre en pause" sur un projet avec status='play'
2. Le syst√®me met √† jour le statut √† 'pause'
3. Le bouton devient "D√©marrer le projet"
4. Le badge "En pause" appara√Æt sur la carte projet

### Reprise d'un projet en pause
1. Le client clique sur "D√©marrer le projet" sur un projet avec status='pause'
2. V√©rification automatique:
   - Si aucune ressource accept√©e ‚Üí Message d'erreur
   - Si certaines ressources manquantes ‚Üí Status 'attente-team'
   - Si toutes les ressources accept√©es ‚Üí Dialog kickoff
3. Apr√®s kickoff, le projet passe en status='play'

### Code d'impl√©mentation (ClientDashboard.tsx)
\`\`\`typescript
const onToggleStatus = async (id: string, currentStatus: string) => {
  let newStatus: string;
  
  if (currentStatus === 'play') {
    newStatus = 'pause';
  } else if (currentStatus === 'pause') {
    // V√©rifications et d√©marrage via kickoff
    const acceptedResources = resourceAssignments.filter(
      a => a.project_id === id && a.booking_status === 'accepted'
    );
    if (acceptedResources.length === totalResources.length) {
      handleStartProject(project); // Ouvre le dialog kickoff
      return;
    }
  }
  
  await supabase.from('projects').update({ status: newStatus }).eq('id', id);
};
\`\`\`

## Fonctionnement c√¥t√© Candidat

### Restrictions pour projets en pause
- **Outils collaboratifs d√©sactiv√©s**: Planning, Kanban, Drive, Messages
- **Time tracking bloqu√©**: Projets en pause exclus de la liste
- **Consultation uniquement**: Bouton "Voir les d√©tails" au lieu de "Acc√©der au projet"
- **Badge visuel**: Badge orange "En pause" sur la carte projet

### Filtrage automatique (useCandidateProjectsOptimized.ts)
\`\`\`typescript
// Seuls les projets actifs sont retourn√©s pour les outils
const activeProjects = allAcceptedProjects.filter(p => p.status === 'play');
\`\`\`

### Cat√©gorisation (CandidateProjectsSection.tsx)
\`\`\`typescript
// Les projets en pause sont cat√©goris√©s comme "attente-kickoff"
const statusCounts = {
  'attente-kickoff': activeProjects.filter(
    p => p.status === 'attente-team' || p.status === 'pause'
  ).length
};
\`\`\`

## Synchronisation Realtime

- Changement de statut c√¥t√© client ‚Üí Update imm√©diat c√¥t√© candidat
- Badge "En pause" appara√Æt/dispara√Æt en temps r√©el
- Projets changent automatiquement d'onglet sans refresh
- Utilisation du hook useRealtimeProjectsFixed pour la synchronisation

## Points techniques importants

1. **Statuts projet limit√©s par DB**: 'play', 'pause', 'completed', 'archiv√©'
2. **V√©rification des ressources** avant reprise du projet
3. **Kickoff obligatoire** pour passer de 'pause' √† 'play'
4. **Filtrage automatique** des projets pour les outils collaboratifs`,

    'projet-edition-candidat': `# üîÑ √âdition de Projet et Changement de Candidat

## Vue d'ensemble

Lors de l'√©dition d'un projet, certains changements peuvent n√©cessiter de remplacer le candidat assign√©. Ce syst√®me g√®re automatiquement ces transitions.

## R√®gles de changement de candidat

### Changement OBLIGATOIRE si:
- **S√©niorit√© modifi√©e**: Le candidat actuel ne correspond plus au niveau demand√©

### Changement CONDITIONNEL si:
- **Expertises modifi√©es**: V√©rifier si le candidat actuel poss√®de les nouvelles expertises
- **Langues modifi√©es**: V√©rifier si le candidat actuel parle les nouvelles langues
- Si le candidat correspond toujours ‚Üí Garder le m√™me
- Sinon ‚Üí Rechercher un nouveau candidat

## Flux de changement de candidat

### 1. D√©tection du changement
Lors de la sauvegarde du projet modifi√©:
\`\`\`typescript
// V√©rifier si les crit√®res ont chang√©
if (oldSeniority !== newSeniority) {
  needsCandidateChange = true;
} else if (expertisesChanged || languagesChanged) {
  // V√©rifier si le candidat actuel correspond toujours
  const candidateMatches = await checkCandidateMatch(
    candidateId, 
    newExpertises, 
    newLanguages
  );
  needsCandidateChange = !candidateMatches;
}
\`\`\`

### 2. Actions si changement n√©cessaire

#### Pour l'ancien candidat:
1. **NE PAS supprimer** l'assignment
2. Mettre √† jour booking_status √† 'completed'
3. Le projet appara√Æt dans l'onglet "Termin√©s" du candidat
4. Notification: "Le projet {title} a √©t√© cl√¥tur√© suite √† un changement de besoins"

#### Pour le projet:
1. Cr√©er un nouvel assignment avec booking_status='recherche'
2. Mettre √† jour le status du projet √† 'attente-team'
3. Lancer la recherche de nouveaux candidats

#### Pour le client:
1. Affichage du badge "En attente d'√©quipe"
2. CTA devient "Booker les √©quipes" ou "En attente de confirmation"
3. Notification: "Suite aux modifications, une nouvelle recherche de candidat est en cours"

### 3. Impl√©mentation dans EditProjectModal

\`\`\`typescript
const handleSave = async () => {
  // 1. Sauvegarder les modifications du projet
  await updateProject(projectData);
  
  // 2. V√©rifier les changements de ressources
  for (const assignment of resourceAssignments) {
    const needsChange = await checkIfCandidateNeedsChange(
      assignment,
      newRequirements
    );
    
    if (needsChange && assignment.candidate_id) {
      // Cl√¥turer l'assignment actuel
      await supabase
        .from('hr_resource_assignments')
        .update({ 
          booking_status: 'completed',
          completed_at: new Date().toISOString(),
          completion_reason: 'requirements_changed'
        })
        .eq('id', assignment.id);
      
      // Cr√©er un nouvel assignment
      await supabase
        .from('hr_resource_assignments')
        .insert({
          project_id: projectId,
          profile_id: assignment.profile_id,
          seniority: newSeniority,
          expertises: newExpertises,
          languages: newLanguages,
          booking_status: 'recherche'
        });
    }
  }
  
  // 3. Mettre √† jour le statut du projet si n√©cessaire
  const hasSearching = await checkHasSearchingAssignments(projectId);
  if (hasSearching) {
    await supabase
      .from('projects')
      .update({ status: 'attente-team' })
      .eq('id', projectId);
  }
};
\`\`\`

## Tables impact√©es

### hr_resource_assignments
- Ajout de colonnes:
  - completed_at: TIMESTAMPTZ
  - completion_reason: TEXT ('requirements_changed', 'project_completed', etc.)

### candidate_notifications
- Cr√©ation de notifications pour informer les candidats

## Points d'attention

1. **Toujours conserver l'historique**: Ne jamais supprimer les assignments
2. **Notifications claires**: Informer tous les acteurs des changements
3. **Transition en douceur**: Le candidat voit son projet "termin√©" plut√¥t que supprim√©
4. **Coh√©rence des statuts**: Projet en 'attente-team' si recherche en cours`,

    'projet-demarrage': `# üî• D√©marrage Projet (Kickoff)

## Vue d'ensemble technique

Le d√©marrage d'un projet est un processus orchestr√© complexe qui configure automatiquement tous les outils collaboratifs et synchronise l'√©quipe.

## D√©clenchement

### Condition pr√©alable
- Toutes les ressources doivent avoir booking_status = 'accepted'
- Le projet doit √™tre en status 'attente-team' ou 'pause'

### Action client
1. Client va dans "Mes projets" ‚Üí Onglet "En pause"
2. Clique sur "D√©marrer le projet"
3. S√©lectionne date et heure du kickoff
4. Confirme le d√©marrage

## S√©quence d'ex√©cution

### 1. useProjectOrchestrator Hook
\`\`\`typescript
// Appel√© depuis le composant React
const { setupProject } = useProjectOrchestrator();
await setupProject(projectId, kickoffDate);
\`\`\`

### 2. project-orchestrator Edge Function

#### √âtape 1: R√©cup√©ration des donn√©es
- Charge le projet depuis 'projects'
- R√©cup√®re les assignations accept√©es (hr_resource_assignments)
- Pour chaque assignation, trouve le candidat via candidate_id
- R√©cup√®re le profil du client (owner)

#### √âtape 2: Remplissage project_teams
**NOUVEAU (30/08/2024)** - Table critique pour le kickoff
\`\`\`sql
INSERT INTO project_teams (
  project_id, member_id, member_type, 
  email, first_name, last_name, role
) VALUES
-- Client/Owner
(projectId, ownerId, 'client', email, firstName, lastName, 'owner'),
-- Chaque candidat accept√©
(projectId, candidateId, 'resource', email, firstName, lastName, profileType)
\`\`\`

#### √âtape 3: Cr√©ation Kanban
- Cr√©e kanban_boards avec titre et description
- Ajoute les colonnes standards:
  - Setup (rappels projet)
  - √Ä faire
  - En cours
  - √Ä v√©rifier
  - Finalis√©
- Cr√©e des cartes contextuelles dans Setup:
  - Description du projet
  - Dates cl√©s
  - Budget global
  - Constitution de l'√©quipe
  - Livrables √† fournir

#### √âtape 4: Initialisation Storage
- Appelle init-project-storage
- Cr√©e la structure de dossiers dans Supabase Storage:
  - /project/{projectId}/
  - Sous-dossiers par cat√©gorie de ressource

#### √âtape 5: Notifications √©quipe
- Cr√©e une notification pour chaque candidat
- Titre: "Bienvenue dans le projet {title}"
- Les informe de l'acc√®s aux outils

#### √âtape 6: Mise √† jour statut
- project.status ‚Üí 'play'

### 3. project-kickoff Edge Function

#### √âtape 1: R√©cup√©ration √©quipe
\`\`\`sql
SELECT * FROM project_teams 
WHERE project_id = projectId
\`\`\`

#### √âtape 2: Cr√©ation √©v√©nement kickoff
\`\`\`sql
INSERT INTO project_events (
  project_id, title, description,
  start_at, end_at, video_url
) VALUES (
  projectId,
  'Kickoff - {project.title}',
  'R√©union de lancement du projet',
  kickoffDate,
  kickoffDate + 1 hour,
  'https://meet.jit.si/{projectId}-kickoff'
)
\`\`\`

#### √âtape 3: Ajout des attendees
\`\`\`sql
INSERT INTO project_event_attendees (
  event_id, email, required, response_status
) 
SELECT eventId, email, true, 'pending'
FROM project_teams WHERE project_id = projectId
\`\`\`

#### √âtape 4: Notifications candidats
**NOUVEAU (30/08/2024)** - Critical pour visibilit√© planning
\`\`\`sql
INSERT INTO candidate_event_notifications (
  candidate_id, project_id, event_id,
  title, description, event_date,
  video_url, status
)
SELECT 
  member_id, projectId, eventId,
  'Invitation Kickoff - {title}',
  'Vous √™tes invit√© √† la r√©union de lancement',
  kickoffDate, videoUrl, 'pending'
FROM project_teams 
WHERE project_id = projectId 
  AND member_type = 'resource'
\`\`\`

## Tables impact√©es

### Tables principales modifi√©es
1. **projects**: status ‚Üí 'play'
2. **project_teams**: Ajout de tous les membres (client + candidats)
3. **kanban_boards**: Cr√©ation du tableau
4. **kanban_columns**: Ajout des colonnes
5. **kanban_cards**: Cr√©ation des cartes initiales
6. **project_events**: Cr√©ation √©v√©nement kickoff
7. **project_event_attendees**: Ajout des participants
8. **candidate_event_notifications**: Invitations pour candidats
9. **candidate_notifications**: Notifications g√©n√©rales

### Tables consult√©es
- hr_resource_assignments: Pour trouver les candidats accept√©s
- candidate_profiles: Pour les infos des candidats
- profiles: Pour les infos du client
- hr_profiles: Pour les cat√©gories de ressources

## Points d'attention critiques

### ‚ö†Ô∏è Conditions de succ√®s
1. **candidate_id DOIT √™tre d√©fini** dans hr_resource_assignments
2. **project_teams DOIT √™tre remplie** avant d'appeler project-kickoff
3. **Tous les candidats doivent avoir accept√©** (booking_status = 'accepted')

### üêõ Erreurs courantes
- "Aucun candidat trouv√©" ‚Üí candidate_id non d√©fini lors de l'acceptation
- "Kickoff non visible" ‚Üí project_teams non remplie
- "Invitation absente" ‚Üí candidate_event_notifications non cr√©√©e

### ‚úÖ V√©rifications
- V√©rifier que project_teams contient tous les membres
- Confirmer que candidate_event_notifications a les invitations
- S'assurer que le planning candidat affiche l'√©v√©nement

## R√©sultat final

### Pour le client
- Projet en status 'play'
- Kanban configur√© avec cartes initiales
- Planning avec √©v√©nement kickoff
- Espace Drive cr√©√©
- Messagerie active

### Pour les candidats
- Notification de bienvenue
- Invitation kickoff dans le planning
- Acc√®s aux outils collaboratifs
- Visibilit√© du projet dans leur dashboard

### Pour l'√©quipe
- Environnement de travail complet
- Outils synchronis√©s
- Communication √©tablie
- Planning partag√© actif`,

    'projet-orchestration': `# Orchestration Projet

## project-orchestrator Function

### Responsabilit√©s
- Configuration initiale du projet au d√©marrage
- Cr√©ation des espaces de travail (Kanban, Drive)
- Synchronisation de l'√©quipe
- Envoi des notifications

### Flux d'ex√©cution
1. V√©rification des pr√©requis
2. R√©cup√©ration des ressources accept√©es
3. Cr√©ation du Kanban avec colonnes standards
4. Initialisation du storage
5. Notifications √† l'√©quipe
6. Mise √† jour du statut projet

### Tables modifi√©es
- kanban_boards, kanban_columns, kanban_cards
- project_teams (NOUVEAU)
- candidate_notifications
- projects (status)

### Gestion d'erreurs
- Rollback partiel non support√©
- Log d√©taill√© pour debug
- Ne bloque pas sur erreurs non critiques`,

    'projet-collaboration': `# Outils Collaboratifs

## Outils disponibles (status='play' requis)

### Planning
- Calendrier partag√© avec √©v√©nements
- Invitations avec acceptation/refus
- Int√©gration Google Calendar
- Notifications par email
- Composant: SharedPlanningView

### Kanban
- Tableau de gestion des t√¢ches
- Colonnes personnalisables
- Drag & drop
- Assignation de t√¢ches
- Pi√®ces jointes
- Composant: KanbanBoard

### Drive
- Stockage organis√© par projet
- Dossiers par cat√©gorie
- Upload/download de fichiers
- Pr√©visualisation
- Composant: SharedDriveView

### Messages (UNIFI√â 30/08/2024)
- Chat temps r√©el avanc√©
- Groupes de discussion
- Messages priv√©s
- Upload de fichiers avec sync Drive
- Pr√©sence en ligne
- Formatage de texte
- Composant: **EnhancedMessageSystem** (unifi√© pour tous)
- Voir documentation d√©taill√©e: Projet > Messagerie

## Acc√®s et permissions
- Client: Acc√®s complet √† ses projets
- Candidats: Acc√®s aux projets accept√©s uniquement
- Filtrage RLS strict

## Points importants
- Tous les outils n√©cessitent status='play'
- Initialisation automatique au kickoff
- Synchronisation temps r√©el via Supabase
- Interface unifi√©e client/candidat`,

    'projet-planning': `# Planning & √âv√©nements

## Syst√®me d'√©v√©nements

### Tables principales
- project_events: √âv√©nements du projet
- project_event_attendees: Participants
- candidate_event_notifications: Invitations candidats

### Cr√©ation d'√©v√©nement
1. Client cr√©e via l'interface Planning
2. S√©lectionne participants (√©quipe)
3. Envoie invitations par email
4. Cr√©e notifications pour candidats

### Invitation Kickoff
- Cr√©√©e automatiquement au d√©marrage
- Tous les membres invit√©s
- Lien visio inclus
- Visible dans planning candidat

### Synchronisation
- Real-time updates via Supabase
- Export Google Calendar possible
- Rappels par email`,

    'projet-messagerie': `# üí¨ Syst√®me de Messagerie

## Vue d'ensemble

Le syst√®me de messagerie est un outil de communication temps r√©el unifi√© pour tous les utilisateurs (clients et candidats). Il utilise le composant **EnhancedMessageSystem** qui offre des fonctionnalit√©s avanc√©es de chat d'√©quipe.

## Architecture technique

### Composant principal
\`\`\`typescript
EnhancedMessageSystem
‚îú‚îÄ‚îÄ Props: { projectId, userType: 'client' | 'candidate' }
‚îú‚îÄ‚îÄ Hooks utilis√©s:
‚îÇ   ‚îú‚îÄ‚îÄ useMessages() - Gestion des messages et threads
‚îÇ   ‚îú‚îÄ‚îÄ useRealtimeMessages() - Synchronisation temps r√©el
‚îÇ   ‚îú‚îÄ‚îÄ useProjectMembersForMessaging() - Membres du projet
‚îÇ   ‚îú‚îÄ‚îÄ useMessageGroups() - Groupes de discussion
‚îÇ   ‚îî‚îÄ‚îÄ useUserPresence() - Statut en ligne
‚îî‚îÄ‚îÄ Features: Chat, Groupes, Upload, Formatage
\`\`\`

## Fonctionnalit√©s principales

### 1. Chat temps r√©el
- Messages instantan√©s via Supabase Realtime
- Synchronisation automatique entre tous les participants
- Indicateur de saisie en cours
- Horodatage intelligent (aujourd'hui, hier, date)

### 2. Gestion des conversations
- **√âquipe compl√®te**: Discussion avec tous les membres
- **Messages priv√©s**: Conversations 1-√†-1
- **Groupes**: Sous-groupes de discussion personnalis√©s
- Filtrage des messages par conversation

### 3. Upload de fichiers
- Support multi-fichiers
- Synchronisation automatique avec le Drive projet
- Types support√©s: Documents, Images, Archives
- Pr√©visualisation int√©gr√©e pour images
- T√©l√©chargement direct depuis le chat

### 4. Formatage de texte
- **Gras** et *Italique*
- Markdown basique support√©
- Pr√©servation des sauts de ligne
- Emojis natifs

### 5. Pr√©sence utilisateur
- Indicateur en ligne/hors ligne
- Statut temps r√©el
- Avatar avec initiales
- Badge de r√¥le (client/candidat)

## Tables de base de donn√©es

### messages
\`\`\`sql
CREATE TABLE messages (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  thread_id UUID REFERENCES message_threads(id),
  sender_id UUID REFERENCES auth.users(id),
  recipient_id UUID, -- Pour messages priv√©s
  content TEXT,
  attachments JSONB[], -- Fichiers joints
  created_at TIMESTAMP,
  updated_at TIMESTAMP,
  is_edited BOOLEAN DEFAULT false
)
\`\`\`

### message_threads
\`\`\`sql
CREATE TABLE message_threads (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  title VARCHAR(255),
  type VARCHAR(50), -- 'general', 'private', 'group'
  participants UUID[], -- IDs des participants
  created_by UUID,
  created_at TIMESTAMP,
  updated_at TIMESTAMP
)
\`\`\`

### message_groups
\`\`\`sql
CREATE TABLE message_groups (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  name VARCHAR(255),
  members UUID[], -- IDs des membres
  created_by UUID,
  created_at TIMESTAMP
)
\`\`\`

### user_presence
\`\`\`sql
CREATE TABLE user_presence (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id),
  is_online BOOLEAN DEFAULT false,
  last_seen TIMESTAMP,
  current_project_id UUID
)
\`\`\`

## Hooks personnalis√©s

### useMessages()
\`\`\`typescript
const {
  threads,           // Liste des conversations
  messages,          // Messages du thread actuel
  selectedThread,    // Thread s√©lectionn√©
  setSelectedThread, // Changer de thread
  sendMessage,       // Envoyer un message
  loading,          // √âtat de chargement
  sending           // Envoi en cours
} = useMessages(projectId);
\`\`\`

### useRealtimeMessages()
- Subscribe aux changements de messages
- G√®re les INSERT, UPDATE, DELETE
- Met √† jour l'UI en temps r√©el

### useProjectMembersForMessaging()
- Liste des membres du projet
- Infos: nom, email, r√¥le, avatar
- Filtrage par type (client/candidat)

### useMessageGroups()
- CRUD des groupes de discussion
- Gestion des membres
- Synchronisation temps r√©el

### useUserPresence()
- Statut en ligne/hors ligne
- Derni√®re activit√©
- Heartbeat automatique

## Flux de donn√©es

### Envoi de message
1. User tape le message
2. Appui sur Entr√©e ou clic Send
3. **sendMessage()** appel√©
4. Si fichiers ‚Üí **uploadMultipleFiles()**
5. INSERT dans table messages
6. **syncMessageFilesToDrive()** si fichiers
7. Broadcast Realtime √† tous les clients
8. UI mise √† jour instantan√©ment

### R√©ception de message
1. Subscription Realtime active
2. √âv√©nement INSERT re√ßu
3. **handleNewMessage()** traite le message
4. Ajout √† la liste locale
5. Notification si n√©cessaire
6. UI mise √† jour

## S√©curit√© (RLS)

### Policies messages
- SELECT: Membres du projet uniquement
- INSERT: Authentifi√© + membre du projet
- UPDATE: Auteur du message uniquement
- DELETE: Auteur ou admin projet

### Policies threads
- SELECT: Participants uniquement
- INSERT: Membres du projet
- UPDATE: Cr√©ateur du thread
- DELETE: Admin projet uniquement

## Initialisation

### Au d√©marrage du projet
\`\`\`typescript
// Appel√© par project-orchestrator
await initializeProjectMessaging({
  projectId,
  members: [...] // Tous les membres
});

// Cr√©e automatiquement:
// - Thread g√©n√©ral "√âquipe compl√®te"
// - Threads priv√©s si n√©cessaire
// - Permissions et acc√®s
\`\`\`

## Points d'attention

### Performance
- Pagination des messages (50 par page)
- Lazy loading des fichiers joints
- Cache local pour les avatars
- Debounce sur la saisie

### UX
- Auto-scroll vers le bas sur nouveau message
- Persistance du scroll position
- Draft sauvegard√© localement
- Retry automatique si √©chec envoi

### Limitations
- Taille max fichier: 10MB
- Max 10 fichiers par message
- Messages: 5000 caract√®res max
- Groupes: 20 membres max

## Diff√©rences Client vs Candidat

### Client (userType='client')
- Peut cr√©er des groupes
- Peut supprimer ses messages
- Voit tous les membres
- Peut √©pingler des messages

### Candidat (userType='candidate')
- Peut rejoindre des groupes
- Peut √©diter ses messages (30 min)
- Voit les membres actifs uniquement
- Notifications push activ√©es

## Debugging

### Logs utiles
\`\`\`typescript
// Dans la console navigateur
localStorage.setItem('debug:messages', 'true');
// Active les logs d√©taill√©s

// V√©rifier la subscription
supabase.getChannels();
// Liste les canaux actifs

// √âtat des messages
console.table(messages);
// Affiche tous les messages
\`\`\`

### Erreurs courantes
- "Thread not found" ‚Üí V√©rifier project_id
- "Unauthorized" ‚Üí RLS policies √† v√©rifier
- "Realtime disconnected" ‚Üí Reconnexion auto en 5s
- "File upload failed" ‚Üí V√©rifier quota storage

## √âvolutions pr√©vues
- R√©actions emoji sur messages
- Recherche dans l'historique
- Appels vid√©o int√©gr√©s
- Traduction automatique
- Bot IA assistant`,

    'projet-drive': `# üìÅ Syst√®me Drive

## Vue d'ensemble

Le Drive est un syst√®me de stockage et de partage de fichiers int√©gr√© √† chaque projet. Il permet √† tous les membres de l'√©quipe (client et candidats) de collaborer sur des documents, partager des ressources et organiser les livrables du projet.

## Architecture technique

### Composant principal
\`\`\`typescript
SharedDriveView
- Localisation: src/components/shared/SharedDriveView.tsx
- Utilis√© par: ClientDashboard et CandidateDashboard
- Type: Composant unifi√© pour tous les utilisateurs
\`\`\`

### Structure de stockage

‚ö†Ô∏è **Important** : Le chemin utilise "projects/" (avec un 's') et non "project/"

\`\`\`
project-files/ (bucket Supabase Storage)
‚îî‚îÄ‚îÄ projects/                # Notez le 's' dans projects
    ‚îî‚îÄ‚îÄ {project_id}/
        ‚îú‚îÄ‚îÄ shared/          # Fichiers partag√©s avec toute l'√©quipe
        ‚îú‚îÄ‚îÄ client/          # Fichiers du client
        ‚îú‚îÄ‚îÄ candidates/      # Fichiers des candidats
        ‚îî‚îÄ‚îÄ deliverables/    # Livrables du projet
\`\`\`

## Permissions (RLS Policies) - Mises √† jour 31/08/2024

### Structure actuelle des politiques

Le bucket 'project-files' utilise exactement **4 politiques RLS unifi√©es** :

1. **project_members_upload** (INSERT)
2. **project_members_view** (SELECT)
3. **project_members_update** (UPDATE)
4. **project_members_delete** (DELETE)

### Conditions d'acc√®s

#### Pour les Clients
- Acc√®s complet bas√© sur : projects.owner_id correspond √† auth.uid()
- Peuvent : uploader, voir, modifier, supprimer tous les fichiers du projet

#### Pour les Candidats
- Acc√®s bas√© sur : candidate_profiles.user_id correspond √† auth.uid()
- **ET** booking_status IN ('accepted', 'book√©') ‚ö†Ô∏è IMPORTANT
- Peuvent : uploader, voir, modifier, supprimer dans le projet

### ‚ö†Ô∏è Corrections critiques appliqu√©es (31/08/2024)

#### Probl√®me r√©solu
- **Avant** : 12 politiques conflictuelles, candidats ne pouvaient pas uploader
- **Cause** : Politiques v√©rifiaient uniquement booking_status = 'accepted'
- **Solution** : Accepter booking_status IN ('accepted', 'book√©')

#### Configuration correcte des politiques
\`\`\`sql
-- Exemple de condition pour candidats (utilis√©e dans les 4 politiques)
EXISTS (
  SELECT 1 FROM hr_resource_assignments hra
  JOIN candidate_profiles cp ON cp.id = hra.candidate_id
  WHERE hra.project_id::text = SPLIT_PART(name, '/', 2)
    AND cp.user_id = auth.uid()
    AND hra.booking_status IN ('accepted', 'book√©')  -- Accepte les 2 valeurs
)
\`\`\`

### Tables impliqu√©es
\`\`\`sql
-- V√©rification des permissions candidat
hr_resource_assignments
‚îú‚îÄ‚îÄ candidate_id
‚îú‚îÄ‚îÄ project_id
‚îú‚îÄ‚îÄ booking_status ('accepted' requis)
‚îî‚îÄ‚îÄ candidate_profiles
    ‚îî‚îÄ‚îÄ user_id (lien avec auth.uid())

-- V√©rification des permissions client
projects
‚îú‚îÄ‚îÄ id
‚îú‚îÄ‚îÄ owner_id (lien avec auth.uid())
‚îî‚îÄ‚îÄ status

-- V√©rification team members
client_team_members
‚îú‚îÄ‚îÄ project_id
‚îú‚îÄ‚îÄ user_id
‚îî‚îÄ‚îÄ status ('active' requis)
\`\`\`

## Flux d'utilisation

### 1. Initialisation
Lors du d√©marrage du projet (status ‚Üí 'play') :
- Cr√©ation automatique de la structure de dossiers
- Configuration des permissions initiales
- Notification aux membres de l'√©quipe

### 2. Upload de fichiers
\`\`\`typescript
// Frontend: SharedDriveView.tsx
const uploadFiles = async (files: File[]) => {
  // 1. D√©termine le chemin selon userType
  const prefix = userType === 'client' 
    ? \`projects/\${projectId}/client/\`
    : \`projects/\${projectId}/candidates/\`;
  
  // 2. Upload via Supabase Storage
  const { data, error } = await supabase.storage
    .from('project-files')
    .upload(\`\${prefix}\${file.name}\`, file);
  
  // 3. RLS v√©rifie automatiquement les permissions
};
\`\`\`

### 3. Navigation et t√©l√©chargement
- Interface type explorateur de fichiers
- Breadcrumb pour la navigation
- Actions: t√©l√©charger, renommer, supprimer
- Pr√©visualisation pour images et PDF

## Fonctionnalit√©s

### Pour les clients
- ‚úÖ Upload illimit√© dans leur projet
- ‚úÖ Cr√©ation de dossiers
- ‚úÖ Gestion compl√®te des fichiers
- ‚úÖ Partage de liens temporaires
- ‚úÖ Export en ZIP

### Pour les candidats
- ‚úÖ Upload dans dossiers autoris√©s
- ‚úÖ T√©l√©chargement de tous les fichiers projet
- ‚úÖ Cr√©ation de sous-dossiers dans candidates/
- ‚úÖ Suppression de leurs propres fichiers

### Limitations
- Taille max par fichier: 50MB
- Types autoris√©s: documents, images, archives
- Quota par projet: 5GB (configurable)

## Int√©gration temps r√©el

Le Drive utilise les subscriptions Supabase pour :
- Mise √† jour instantan√©e de la liste des fichiers
- Notification lors de nouveaux uploads
- Synchronisation multi-utilisateurs

\`\`\`typescript
// Subscription temps r√©el
supabase
  .channel(\`project-files-\${projectId}\`)
  .on('postgres_changes', {
    event: '*',
    schema: 'storage',
    table: 'objects',
    filter: \`bucket_id=eq.project-files\`
  }, handleFileChange)
  .subscribe();
\`\`\`

## R√©solution des probl√®mes

### Erreur "RLS policy violation" pour candidats
**Sympt√¥mes** : Candidats ne peuvent pas uploader, erreur "new row violates row-level security policy"

**Causes possibles** :
1. booking_status n'est pas dans ('accepted', 'book√©')
2. candidate_profiles.user_id ne correspond pas √† auth.uid()
3. Politiques RLS conflictuelles ou manquantes

**Solutions** :
1. V√©rifier que booking_status IN ('accepted', 'book√©')
2. V√©rifier le lien user_id entre candidate_profiles et auth.users
3. S'assurer qu'il y a exactement 4 politiques pour project-files

### Historique des corrections

#### Fix 30/08/2024 - Chemin storage
- **Changement** : "project/" ‚Üí "projects/" (ajout du 's')
- **Fichier** : SharedDriveView.tsx ligne 61
- **Impact** : Alignement avec la structure r√©elle du bucket

#### Fix 31/08/2024 - Politiques RLS (MAJEUR)
- **Probl√®me** : 12 politiques conflictuelles, candidats bloqu√©s
- **Cause** : V√©rification uniquement de booking_status = 'accepted'
- **Solution appliqu√©e** :
  - Suppression de toutes les anciennes politiques
  - Cr√©ation de 4 politiques unifi√©es acceptant ('accepted', 'book√©')
  - Test et validation avec candidat r√©el

## API Endpoints

### Storage API
\`\`\`
POST   /storage/v1/object/project-files
GET    /storage/v1/object/project-files/{path}
DELETE /storage/v1/object/project-files/{path}
\`\`\`

### Edge Functions associ√©es
- **fix-drive-rls-direct** : Applique les corrections RLS
- **storage-operations** : Op√©rations batch sur fichiers
- **init-project-storage** : Initialise la structure lors du kickoff

## Monitoring

### M√©triques cl√©s
- Taux d'upload r√©ussis/√©chou√©s
- Espace utilis√© par projet
- Temps de r√©ponse storage API
- Nombre de t√©l√©chargements

### Logs utiles
\`\`\`typescript
console.log(\`üìÅ \${userType.toUpperCase()}: Uploading to \${prefix}\`);
console.log(\`üìÅ Storage error: \${error.message}\`);
\`\`\`

## √âvolutions pr√©vues
- Versioning des fichiers
- Commentaires sur fichiers
- Pr√©visualisation Office
- Int√©gration Google Drive/Dropbox
- OCR et recherche dans documents
- Signatures √©lectroniques`,

    'db-schema': `# Sch√©ma Base de Donn√©es

## Tables Principales

### profiles (auth.users)
- id: UUID
- email: string
- first_name: string
- last_name: string
- user_type: 'client' | 'candidate' | 'admin'

### projects
- id: UUID
- title: string
- description: text
- status: 'pause' | 'attente-team' | 'play' | 'completed'
  - **pause**: Projet en attente (badge orange c√¥t√© candidat)
  - **attente-team**: Tous accept√©s, attente kickoff
  - **play**: Projet actif (seul statut permettant le time tracking)
  - **completed**: Projet termin√©
- owner_id: UUID ‚Üí profiles
- project_date: date
- due_date: date
- client_budget: number

### candidate_profiles
- id: UUID
- email: string (unique)
- first_name: string
- last_name: string
- status: 'qualification' | 'disponible' | 'en_pause' | 'indisponible'
- qualification_status: 'pending' | 'stand_by' | 'qualified' | 'rejected'
- profile_id: UUID ‚Üí hr_profiles
- seniority: 'junior' | 'confirmed' | 'senior'

### hr_resource_assignments
- id: UUID
- project_id: UUID ‚Üí projects
- profile_id: UUID ‚Üí hr_profiles
- seniority: string
- booking_status: 'draft' | 'recherche' | 'accepted' | 'declined'
- candidate_id: UUID ‚Üí candidate_profiles (CRITIQUE!)
- calculated_price: number

### project_teams (NOUVEAU)
- id: UUID
- project_id: UUID ‚Üí projects
- member_id: UUID
- member_type: 'client' | 'resource'
- email: string
- first_name: string
- last_name: string
- role: string

## Relations cl√©s
- projects ‚Üí hr_resource_assignments (1:N)
- hr_resource_assignments ‚Üí candidate_profiles (N:1)
- projects ‚Üí project_teams (1:N)`,

    'db-rls': `# RLS & S√©curit√©

## Row Level Security

### Principe g√©n√©ral
- Toutes les tables ont RLS activ√©
- Filtrage c√¥t√© serveur obligatoire
- Pas d'acc√®s direct aux donn√©es
- **IMPORTANT**: Les politiques storage.objects doivent accepter 'accepted' ET 'book√©' pour booking_status

### Politiques par r√¥le

#### Client
- SELECT/UPDATE/DELETE sur ses projets
- SELECT sur les candidats de ses projets
- INSERT/UPDATE/DELETE sur les outils de ses projets
- Acc√®s complet au storage de ses projets (via owner_id)

#### Candidat
- SELECT sur ses assignations accept√©es
- SELECT/UPDATE sur son profil
- SELECT sur les projets o√π il est assign√©
- INSERT/SELECT sur les messages de ses projets
- Acc√®s au storage SI booking_status IN ('accepted', 'book√©')

#### Admin
- Acc√®s complet (service role)

### Tables critiques
- hr_resource_assignments: Filtrage strict par candidate_id
- projects: Filtrage par owner_id ou membre
- messages: Filtrage par projet membre
- storage.objects: V√©rification booking_status pour candidats

## Politiques Storage (Corrig√©es 31/08/2024)

### Structure des politiques storage.objects

Le bucket 'project-files' a exactement 4 politiques RLS:

#### 1. project_members_upload (INSERT)
Permet l'upload aux:
- Clients (propri√©taires du projet)
- Candidats avec booking_status IN ('accepted', 'book√©')

#### 2. project_members_view (SELECT)
Permet la visualisation aux:
- Clients (propri√©taires du projet)
- Candidats avec booking_status IN ('accepted', 'book√©')

#### 3. project_members_update (UPDATE)
Permet la modification aux:
- Clients (propri√©taires du projet)
- Candidats avec booking_status IN ('accepted', 'book√©')

#### 4. project_members_delete (DELETE)
Permet la suppression aux:
- Clients (propri√©taires du projet)
- Candidats avec booking_status IN ('accepted', 'book√©')

### ‚ö†Ô∏è Points d'attention critiques

#### Probl√®me r√©solu (31/08/2024)
- **Sympt√¥me**: Candidats ne pouvaient pas uploader (erreur RLS)
- **Cause**: Les politiques ne v√©rifiaient que booking_status = 'accepted'
- **Solution**: Accepter booking_status IN ('accepted', 'book√©')

#### V√©rifications importantes
1. **candidate_profiles.user_id** DOIT correspondre √† auth.uid()
2. **booking_status** peut avoir les valeurs 'accepted' OU 'book√©'
3. Ne JAMAIS avoir de politiques conflictuelles sur le m√™me bucket

### Requ√™te type pour v√©rifier les acc√®s
\`\`\`sql
-- V√©rifier qu'un candidat a acc√®s au storage
SELECT 
    cp.first_name,
    cp.user_id,
    hra.booking_status,
    hra.project_id
FROM candidate_profiles cp
JOIN hr_resource_assignments hra ON hra.candidate_id = cp.id
WHERE cp.user_id = auth.uid()
    AND hra.booking_status IN ('accepted', 'book√©');
\`\`\``,

    'db-realtime': `# Tables Temps R√©el

## Tables avec Realtime activ√©

### Configuration
\`\`\`sql
ALTER TABLE table_name REPLICA IDENTITY FULL;
ALTER PUBLICATION supabase_realtime ADD TABLE table_name;
\`\`\`

### Tables actives
1. **projects**: Changements de statut
2. **hr_resource_assignments**: Nouvelles assignations
3. **candidate_notifications**: Nouvelles notifs
4. **messages**: Chat temps r√©el
5. **kanban_cards**: Mises √† jour t√¢ches
6. **kanban_columns**: Changements colonnes
7. **project_events**: Nouveaux √©v√©nements
8. **candidate_event_notifications**: Invitations

### Abonnements c√¥t√© client
\`\`\`typescript
supabase
  .channel('project-changes')
  .on('postgres_changes', {
    event: '*',
    schema: 'public',
    table: 'projects',
    filter: \`id=eq.\${projectId}\`
  }, handleChange)
  .subscribe()
\`\`\``,

    'db-functions': `# Edge Functions

## Functions critiques

### project-orchestrator
- Configure le projet au d√©marrage
- Cr√©e Kanban, Drive, notifications
- Remplit project_teams

### project-kickoff
- Cr√©e l'√©v√©nement kickoff
- Ajoute les attendees
- Envoie les invitations candidats

### resource-booking
- G√®re acceptation/refus candidats
- DOIT d√©finir candidate_id si accept√©
- Met √† jour booking_status

### init-project-storage
- Cr√©e la structure de dossiers
- Configure les permissions

### fix-kickoff-invitations
- Corrige les invitations manquantes
- Utilitaire de maintenance

## D√©ploiement
\`\`\`bash
npx supabase functions deploy function-name
\`\`\``,

    'api-supabase': `# API Supabase

## Configuration

### Client
\`\`\`typescript
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://egdelmcijszuapcpglsy.supabase.co',
  'anon-key'
)
\`\`\`

### Authentification
- Magic link email
- Session persistante
- Refresh token automatique

### Requ√™tes
\`\`\`typescript
// SELECT avec jointure
const { data } = await supabase
  .from('projects')
  .select(\`
    *,
    hr_resource_assignments (
      *,
      candidate_profiles (*)
    )
  \`)
  .eq('status', 'play')

// INSERT
await supabase
  .from('table')
  .insert({ ... })

// UPDATE
await supabase
  .from('table')
  .update({ ... })
  .eq('id', id)
\`\`\``,

    'api-hooks': `# React Hooks

## Hooks principaux

### useAuth()
- Gestion authentification
- user, login, logout, loading

### useUserProjects()
- Projets du client connect√©
- Filtrage automatique

### useCandidateProjectsOptimized()
- Projets actifs du candidat
- Real-time updates inclus

### useRealtimeProjectsFixed()
- Synchronisation temps r√©el
- Gestion des changements d'√©tat

### useProjectOrchestrator()
- D√©marrage de projet
- Appel des Edge Functions

### useProjectUsers()
- Membres d'un projet
- Fallback sur hr_resource_assignments

### useKanbanSupabase()
- Gestion du Kanban
- CRUD des cartes et colonnes

## Patterns
- Toujours g√©rer loading et error
- Cleanup des subscriptions
- Optimistic updates quand possible`
  });

  const getContent = () => {
    return content[activeSection as keyof typeof content] || content.general;
  };

  const getSectionTitle = () => {
    // Chercher dans tous les menus
    for (const item of menuItems) {
      if (item.id === activeSection) return item.label;
      if (item.children) {
        const child = item.children.find(c => c.id === activeSection);
        if (child) return child.label;
      }
    }
    return 'Documentation';
  };

  const handleSave = () => {
    localStorage.setItem('llm_documentation', JSON.stringify(content));
    toast({
      title: "Documentation sauvegard√©e",
      description: "Les modifications ont √©t√© enregistr√©es localement"
    });
    setIsEditing(false);
  };

  const handleContentChange = (value: string) => {
    setContent(prev => ({
      ...prev,
      [activeSection]: value
    }));
  };

  // Charger depuis localStorage
  useState(() => {
    const saved = localStorage.getItem('llm_documentation');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setContent(prev => ({ ...prev, ...parsed }));
      } catch (e) {
        console.error('Error loading saved documentation:', e);
      }
    }
  });

  const renderMenuItem = (item: MenuItem, level = 0) => {
    const hasChildren = item.children && item.children.length > 0;
    const isExpanded = expandedSections.has(item.id);
    const Icon = item.icon;

    return (
      <div key={item.id}>
        <button
          onClick={() => {
            if (hasChildren) {
              toggleSection(item.id);
            } else {
              setActiveSection(item.id);
            }
          }}
          className={cn(
            "w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md transition-colors",
            "hover:bg-gray-100",
            activeSection === item.id && "bg-blue-50 text-blue-700 font-medium",
            level > 0 && "pl-8"
          )}
        >
          {hasChildren && (
            <span className="w-4">
              {isExpanded ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />}
            </span>
          )}
          {Icon && <Icon className="w-4 h-4" />}
          <span className="flex-1 text-left">{item.label}</span>
        </button>
        
        {hasChildren && isExpanded && (
          <div className="ml-2">
            {item.children!.map(child => renderMenuItem(child, level + 1))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <div className="w-80 bg-white border-r">
        <div className="p-6 border-b">
          <h1 className="text-2xl font-bold flex items-center gap-2">
            <FileText className="w-6 h-6" />
            Documentation LLM
          </h1>
          <p className="text-sm text-gray-600 mt-2">
            R√©f√©rence technique pour l'IA
          </p>
        </div>
        
        <ScrollArea className="h-[calc(100vh-120px)]">
          <div className="p-4 space-y-1">
            {menuItems.map(item => renderMenuItem(item))}
          </div>
        </ScrollArea>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-auto">
        <div className="max-w-5xl mx-auto p-8">
          <Alert className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              Cette documentation est utilis√©e comme r√©f√©rence par l'IA pour comprendre l'architecture du projet.
              Les sections marqu√©es üî• contiennent les derni√®res mises √† jour importantes.
            </AlertDescription>
          </Alert>

          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <div>
                  <CardTitle className="text-2xl">{getSectionTitle()}</CardTitle>
                  <CardDescription>
                    {activeSection === 'projet-demarrage' && 
                      "Documentation technique compl√®te du processus de d√©marrage de projet"
                    }
                    {activeSection === 'general' && 
                      "Vue d'ensemble de l'architecture et des conventions"
                    }
                    {activeSection.startsWith('candidat') && 
                      "Documentation du flux et processus candidat"
                    }
                    {activeSection.startsWith('db') && 
                      "Structure et configuration de la base de donn√©es"
                    }
                  </CardDescription>
                </div>
                <div className="flex gap-2">
                  {/* Hide edit button for design system sections */}
                  {!activeSection.startsWith('design-') && (
                    isEditing ? (
                      <>
                        <Button onClick={handleSave} size="sm">
                          <Save className="w-4 h-4 mr-2" />
                          Sauvegarder
                        </Button>
                        <Button onClick={() => setIsEditing(false)} variant="outline" size="sm">
                          Annuler
                        </Button>
                      </>
                    ) : (
                      <Button onClick={() => setIsEditing(true)} variant="outline" size="sm">
                        <FileText className="w-4 h-4 mr-2" />
                        √âditer
                      </Button>
                    )
                  )}
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {/* Render React components for design system sections */}
              {activeSection === 'design-modal' ? (
                <Suspense fallback={<div className="flex items-center justify-center p-8">Chargement...</div>}>
                  <DesignSystemModal />
                </Suspense>
              ) : isEditing ? (
                <Textarea
                  value={getContent()}
                  onChange={(e) => handleContentChange(e.target.value)}
                  className="min-h-[600px] font-mono text-sm"
                  placeholder="Documentation..."
                />
              ) : (
                <div className="prose prose-sm max-w-none">
                  <pre className="whitespace-pre-wrap bg-gray-50 p-6 rounded-lg overflow-x-auto">
                    {getContent()}
                  </pre>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default LLMDashboard;