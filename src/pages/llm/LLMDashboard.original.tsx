import { useState, useEffect, lazy, Suspense } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Save, FileText, Users, FolderOpen, GitBranch, Database, AlertCircle, ChevronRight, ChevronDown, Home, Play, Calendar, MessageSquare, Layout, Code, Shield, Server, Zap, BookOpen, CreditCard } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

// Import des pages de design system
const DesignSystemModal = lazy(() => import('./DesignSystemModal'));

interface MenuItem {
  id: string;
  label: string;
  icon?: any;
  children?: MenuItem[];
}

const LLMDashboard = () => {
  const { toast } = useToast();
  const [activeSection, setActiveSection] = useState('general');
  const [isEditing, setIsEditing] = useState(false);
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['projet', 'candidat', 'database']));
  
  const menuItems: MenuItem[] = [
    {
      id: 'general',
      label: 'Vue d\'ensemble',
      icon: Home,
    },
    {
      id: 'candidat',
      label: 'Candidat',
      icon: Users,
      children: [
        { id: 'candidat-flow', label: 'Flux candidat' },
        { id: 'candidat-onboarding', label: 'Onboarding' },
        { id: 'candidat-qualification', label: 'Qualification' },
        { id: 'candidat-missions', label: 'Gestion des missions' },
        { id: 'candidat-activities', label: '‚è±Ô∏è Activit√©s & Time Tracking' },
        { id: 'candidat-realtime', label: 'Temps r√©el' },
      ]
    },
    {
      id: 'projet',
      label: 'Projet',
      icon: FolderOpen,
      children: [
        { id: 'projet-workflow', label: 'Workflow projet' },
        { id: 'projet-pause-reprise', label: '‚è∏Ô∏è Pause/Reprise' },
        { id: 'projet-edition-candidat', label: 'üîÑ √âdition & Changement candidat' },
        { id: 'projet-demarrage', label: 'üî• D√©marrage projet' },
        { id: 'projet-orchestration', label: 'Orchestration' },
        { id: 'projet-collaboration', label: 'Outils collaboratifs' },
        { id: 'projet-planning', label: 'Planning & √âv√©nements' },
        { id: 'projet-messagerie', label: 'üí¨ Messagerie' },
        { id: 'projet-drive', label: 'üìÅ Drive' },
      ]
    },
    {
      id: 'database',
      label: 'Base de donn√©es',
      icon: Database,
      children: [
        { id: 'db-schema', label: 'Sch√©ma principal' },
        { id: 'db-rls', label: 'RLS & S√©curit√©' },
        { id: 'db-realtime', label: 'Tables temps r√©el' },
        { id: 'db-functions', label: 'Edge Functions' },
      ]
    },
    {
      id: 'corrections',
      label: 'Historique Corrections',
      icon: AlertCircle,
      children: [
        { id: 'corrections-unified-ids', label: 'üîÑ Unification IDs (05/09/2025)' },
        { id: 'corrections-session5', label: 'üîß Session 5 (05/09/2025)' },
        { id: 'corrections-session4', label: 'üîß Session 4 (04/09/2025)' },
        { id: 'corrections-session3', label: 'üîß Session 3 (03/09/2025)' },
        { id: 'corrections-session2', label: 'üîß Session 2 (03/09/2025)' },
        { id: 'corrections-session1', label: 'üîß Session 1 (02/09/2025)' },
      ]
    },
    {
      id: 'wiki',
      label: 'üìö Wiki Collaboratif',
      icon: BookOpen,
      children: [
        { id: 'wiki-overview', label: 'üéØ Vue d\'ensemble' },
        { id: 'wiki-architecture', label: 'üèóÔ∏è Architecture technique' },
        { id: 'wiki-permissions', label: 'üîê Syst√®me de permissions' },
        { id: 'wiki-realtime', label: '‚ö° Synchronisation temps r√©el' },
        { id: 'wiki-comments', label: 'üí¨ Syst√®me de commentaires' },
        { id: 'wiki-navigation', label: 'üß≠ Navigation et organisation' },
        { id: 'wiki-editor', label: '‚úèÔ∏è √âditeur BlockNote' },
      ]
    },
    {
      id: 'api',
      label: 'API & Int√©grations',
      icon: Code,
      children: [
        { id: 'api-supabase', label: 'Supabase' },
        { id: 'api-hooks', label: 'React Hooks' },
      ]
    },
    {
      id: 'payment',
      label: 'üí≥ Paiements',
      icon: CreditCard,
      children: [
        { id: 'payment-system', label: 'Syst√®me de paiement Stripe' },
      ]
    },
    {
      id: 'design',
      label: 'Design System',
      icon: Layout,
      children: [
        { id: 'design-system', label: 'üé® Charte Graphique Premium' },
        { id: 'design-modal', label: 'üì± Modals Plein √âcran' },
        { id: 'design-components', label: 'üß© Composants UI' },
        { id: 'design-patterns', label: 'üìê Patterns UX' },
      ]
    }
  ];

  const toggleSection = (sectionId: string) => {
    const newExpanded = new Set(expandedSections);
    if (newExpanded.has(sectionId)) {
      newExpanded.delete(sectionId);
    } else {
      newExpanded.add(sectionId);
    }
    setExpandedSections(newExpanded);
  };

  // Contenu pour chaque section
  const [content, setContent] = useState({
    'general': `# üìö Documentation Vaya

## Vue d'ensemble
Vaya est une plateforme compl√®te de gestion de projets et de ressources humaines, con√ßue pour faciliter la collaboration entre clients et candidats.

### üéØ Objectifs principaux
- **Gestion de projets** : Cr√©ation, suivi et orchestration de projets complexes
- **Matching candidats** : Syst√®me intelligent de mise en relation bas√© sur les comp√©tences
- **Collaboration temps r√©el** : Outils int√©gr√©s pour la communication et le partage
- **Time tracking** : Suivi pr√©cis du temps et des activit√©s

### üèóÔ∏è Architecture
- **Frontend** : React + TypeScript + Vite
- **Backend** : Supabase (PostgreSQL + Edge Functions)
- **Temps r√©el** : WebSockets via Supabase Realtime
- **Authentification** : Supabase Auth

### üìÇ Structure du projet
- **/src/pages** : Pages principales de l'application
- **/src/components** : Composants r√©utilisables
- **/src/hooks** : Hooks React personnalis√©s
- **/src/integrations** : Int√©grations externes (Supabase)
- **/supabase/functions** : Edge Functions Supabase

### üöÄ Fonctionnalit√©s cl√©s
1. **Workflow de projet complet** : De la cr√©ation au kickoff
2. **Syst√®me de matching intelligent** : 5 crit√®res de correspondance
3. **Outils collaboratifs** : Kanban, Drive, Messages, Planning
4. **Time tracking int√©gr√©** : Suivi des activit√©s en temps r√©el
5. **Design system premium** : Interface moderne et coh√©rente

### üìñ Navigation
Utilisez le menu de gauche pour explorer les diff√©rentes sections de la documentation :
- **Candidat** : Flux et fonctionnalit√©s c√¥t√© candidat
- **Projet** : Gestion compl√®te des projets
- **Base de donn√©es** : Sch√©ma et architecture
- **Corrections** : Historique des bugs corrig√©s
- **API** : Documentation technique
- **Design System** : Charte graphique et composants`,
    'design-system': `# üé® Charte Graphique Premium - Syst√®me de Design Impl√©ment√©

## Vue d'ensemble
Ce syst√®me de design premium est inspir√© des meilleurs sites minimalistes modernes. Il privil√©gie les contrastes forts, la typographie massive et l'utilisation parcimonieuse de couleur.

## üÜï Effets Visuels Avanc√©s (Mise √† jour 02/09/2025)

### Effet Division (Chromatic Aberration)
Impl√©ment√© sur le titre principal de la homepage pour un effet moderne et dynamique.

#### Implementation dans HeroLyniqFixed
\`\`\`tsx
// Effet Division avec d√©calages chromatiques
<div className="relative">
  {/* Couche cyan */}
  <div className="absolute inset-0 opacity-60" style={{ transform: 'translate(-2px, 2px)' }}>
    <span className="block text-cyan-400 mix-blend-screen">Digital</span>
  </div>
  
  {/* Couche magenta */}
  <div className="absolute inset-0 opacity-60" style={{ transform: 'translate(2px, -2px)' }}>
    <span className="block text-pink-500 mix-blend-screen">Digital</span>
  </div>
  
  {/* Texte principal */}
  <div className="relative mix-blend-lighten">
    <span className="block text-white">Digital</span>
  </div>
</div>
\`\`\`

### Hero Section avec Vid√©o
- Background vid√©o en loop automatique
- Overlay gradients l√©gers pour la lisibilit√©
- Position fixe avec sections qui glissent par-dessus

### Composants Cr√©√©s
- **IntroOverlay**: Animation d'intro avec logo et fondu
- **HeroLyniqFixed**: Hero section avec vid√©o et effet Division
- **HeroLyniqBlend**: Version alternative avec blend modes avanc√©s

## 1. Configuration Tailwind (tailwind.config.ts)

### Couleurs d√©finies
\`\`\`typescript
colors: {
  // Neutres premium
  black: '#0D0D0F',        // Fond tr√®s sombre
  'near-black': '#111113', // Fond sombre secondaire
  white: '#FFFFFF',        // Blanc pur
  gray: {
    900: '#1B1B1F',        // Tr√®s sombre
    800: '#232327',        // Bordures sombres
    700: '#2B2B30',
    600: '#3A3A40',
    500: '#52525B',        // Texte secondaire
    400: '#8A8A93',        // Texte tertiaire
    300: '#C9C9CF',        // Bordures claires
    200: '#E7E7EA',        // Dividers
    100: '#F3F3F5',        // Fond tr√®s clair
  },
  
  // Accent principal (Violet premium)
  accent: {
    DEFAULT: '#7C3AED',    // Violet principal
    dark: '#6D28D9',       // Violet hover
    light: '#8B5CF6',      // Violet clair
    ink: '#5B21B6',        // Violet texte
  }
}
\`\`\`

### Typographie
\`\`\`typescript
fontSize: {
  'display-xxl': ['clamp(3.5rem, 10vw, 9rem)', { 
    lineHeight: '1.05', 
    letterSpacing: '-0.02em' 
  }],
  'display-xl': ['clamp(2.75rem, 7vw, 5rem)', { 
    lineHeight: '1.06', 
    letterSpacing: '-0.02em' 
  }],
  'display': ['clamp(2.25rem, 6vw, 3.5rem)', { 
    lineHeight: '1.08', 
    letterSpacing: '-0.02em' 
  }],
  'h1': ['clamp(2.25rem, 5vw, 3.5rem)', { 
    lineHeight: '1.1', 
    letterSpacing: '-0.02em' 
  }],
  'h2': ['clamp(1.75rem, 4vw, 2.5rem)', { 
    lineHeight: '1.2', 
    letterSpacing: '-0.01em' 
  }],
  'h3': ['clamp(1.375rem, 3vw, 1.75rem)', { 
    lineHeight: '1.3' 
  }],
  'lead': ['1.25rem', { lineHeight: '1.5' }],
  'body': ['1rem', { lineHeight: '1.6' }],
  'small': ['0.875rem', { lineHeight: '1.5' }],
  'eyebrow': ['0.75rem', { 
    lineHeight: '1.2', 
    letterSpacing: '0.04em' 
  }],
}
\`\`\`

### Autres tokens
\`\`\`typescript
borderRadius: {
  'md': '12px',
  'lg': '16px',
  'xl': '20px',
  '2xl': '24px',
},

boxShadow: {
  'card': '0 8px 24px rgba(0,0,0,.06)',
  'card-hover': '0 12px 32px rgba(0,0,0,.08)',
  'button': '0 1px 2px rgba(0,0,0,.08)',
  'focus': '0 0 0 2px rgba(124,58,237,.35)',
},

backgroundImage: {
  'hero-gradient': 'linear-gradient(90deg, #38E1E1 0%, #21A7F0 35%, #FDB952 70%, #F26A4D 100%)',
  'accent-gradient': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
  'dark-gradient': 'linear-gradient(180deg, #0D0D0F 0%, #1B1B1F 100%)',
}
\`\`\`

## 2. Classes Utilitaires CSS (src/index.css)

### Typographie Premium
\`\`\`css
/* Titres massifs */
.h-display-xxl {
  @apply text-display-xxl font-bold;
}

.h-display-xl {
  @apply text-display-xl font-bold;
}

.h-display {
  @apply text-display font-bold;
}

/* Gradient de texte h√©ro√Øque */
.h-hero-gradient {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

/* Eyebrow (√©tiquette de section) */
.eyebrow {
  @apply text-eyebrow uppercase text-accent font-medium;
}

/* Paragraphe principal */
.lead {
  @apply text-lead text-black/80;
}
\`\`\`

### Boutons Premium
\`\`\`css
.btn-premium {
  @apply h-11 px-5 rounded-md font-semibold inline-flex items-center gap-2.5 transition-all duration-200;
}

.btn-primary-premium {
  @apply bg-black text-white shadow-button hover:bg-gray-900;
}

.btn-secondary-premium {
  @apply bg-white text-black border border-gray-200 hover:border-gray-300;
}

.btn-accent-premium {
  @apply bg-accent text-white hover:bg-accent-dark shadow-button;
}

.btn-ghost-premium {
  @apply bg-transparent text-accent hover:bg-accent/10;
}
\`\`\`

### Cards Premium
\`\`\`css
.card-premium {
  @apply bg-white border border-gray-200 rounded-xl p-5 shadow-card hover:shadow-card-hover transition-shadow duration-200;
}

.card-dark-premium {
  @apply bg-near-black border border-gray-800 text-white rounded-xl p-5;
}
\`\`\`

### Effets Sp√©ciaux
\`\`\`css
/* Effet Noise/Grain */
.noise {
  @apply relative;
}

.noise::after {
  content: "";
  @apply absolute inset-0 opacity-[0.06] pointer-events-none mix-blend-overlay;
  background-image: url("data:image/svg+xml,..."); /* SVG noise pattern */
}

/* Coin marqu√© (accent visuel) */
.corner-mark {
  @apply relative;
}

.corner-mark::after {
  content: "";
  @apply absolute top-2.5 right-2.5 w-3 h-3 border-t-2 border-r-2 border-accent rounded-sm;
}

/* Animation Reveal au scroll */
.reveal {
  @apply opacity-0 translate-y-2 transition-all ease-out;
  transition-duration: 220ms;
}

.reveal.is-inview {
  @apply opacity-100 translate-y-0;
}
\`\`\`

### Liste de Services (fond noir)
\`\`\`css
.service-item {
  @apply text-display font-bold tracking-tight-2 opacity-20 py-6 border-b border-gray-800 transition-opacity duration-200 hover:opacity-100;
}

.service-item.is-active {
  @apply opacity-100;
}
\`\`\`

### Statistiques
\`\`\`css
.stat-num {
  @apply text-[clamp(2.75rem,6vw,4.5rem)] font-bold tracking-tight-2 text-black tabular-nums;
}

.stat-label {
  @apply text-sm text-gray-500;
}
\`\`\`

## 3. Patterns de Composants React

### Hero Section Premium
\`\`\`tsx
<section className="relative min-h-screen flex items-center justify-center overflow-hidden">
  {/* Background avec noise */}
  <div className="absolute inset-0 bg-gradient-to-br from-gray-50 via-white to-gray-100 noise"></div>
  
  <div className="container relative z-10 text-center py-32">
    {/* Eyebrow */}
    <div className="eyebrow mb-8 reveal">
      <span className="inline-flex items-center gap-2">
        <span>‚Ü≥</span> DIGITAL TRANSFORMATION STUDIO
      </span>
    </div>
    
    {/* Titre XXL avec gradient */}
    <h1 className="h-display-xxl mb-8 reveal">
      <span className="block">From ordinary to</span>
      <span className="h-hero-gradient">extraordinary</span>
    </h1>
    
    {/* Lead */}
    <p className="lead max-w-3xl mx-auto mb-12 reveal">
      Description principale...
    </p>
    
    {/* CTA */}
    <button className="btn-premium btn-accent-premium">
      Action principale
      <ArrowRight className="w-4 h-4" />
    </button>
  </div>
</section>
\`\`\`

### Section Stats
\`\`\`tsx
<section className="py-24 border-y border-gray-200">
  <div className="container">
    <div className="grid grid-cols-2 lg:grid-cols-4 gap-8">
      {stats.map((stat) => (
        <div className="text-center reveal">
          <div className="stat-num">{stat.number}</div>
          <div className="stat-label">{stat.label}</div>
        </div>
      ))}
    </div>
  </div>
</section>
\`\`\`

### Liste Services Massive (fond noir)
\`\`\`tsx
<section className="py-24 bg-black text-white">
  <div className="container">
    {services.map((service, index) => (
      <div 
        className={\`border-b border-gray-800 py-12 cursor-pointer transition-all duration-300 hover:pl-8 \${
          activeService === index ? 'pl-8' : ''
        }\`}
        onMouseEnter={() => setActiveService(index)}
      >
        <div className="flex items-baseline gap-6 mb-4">
          <span className={\`text-eyebrow \${
            activeService === index ? 'text-accent' : 'text-gray-600'
          }\`}>
            {service.id}
          </span>
          <h3 className={\`text-h2 font-bold transition-opacity duration-300 \${
            activeService === index ? 'opacity-100' : 'opacity-20'
          }\`}>
            {service.title}
          </h3>
        </div>
        {activeService === index && (
          <p className="text-gray-400 max-w-2xl animate-fade">
            {service.description}
          </p>
        )}
      </div>
    ))}
  </div>
</section>
\`\`\`

### Cards avec Corner Mark
\`\`\`tsx
<div className="grid md:grid-cols-3 gap-8">
  {items.map((item) => (
    <div className="card-premium corner-mark reveal">
      <div className="text-eyebrow text-accent mb-4">{item.step}</div>
      <h3 className="text-h3 font-bold mb-4">{item.title}</h3>
      <p className="text-body text-gray-600">{item.description}</p>
    </div>
  ))}
</div>
\`\`\`

### Citation Large (Testimonial)
\`\`\`tsx
<section className="py-24 bg-black text-white">
  <div className="container max-w-4xl">
    <div className="text-center">
      <div className="text-6xl text-accent mb-8">"</div>
      <blockquote className="h-display mb-8">
        Citation importante avec 
        <span className="text-accent"> partie mise en √©vidence</span> 
        pour l'impact.
      </blockquote>
      <div className="divider-dark-premium mx-auto w-24 mb-8"></div>
      <div>
        <p className="font-bold">Nom Personne</p>
        <p className="text-gray-400 text-small">Titre, Entreprise</p>
      </div>
    </div>
  </div>
</section>
\`\`\`

## 4. Animations et Interactions

### Observer pour Reveal au Scroll
\`\`\`typescript
useEffect(() => {
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-inview');
        }
      });
    },
    { threshold: 0.1 }
  );

  document.querySelectorAll('.reveal').forEach((el) => observer.observe(el));
  return () => observer.disconnect();
}, []);
\`\`\`

### Header Sticky avec Effet
\`\`\`tsx
const [scrolled, setScrolled] = useState(false);

useEffect(() => {
  const handleScroll = () => {
    setScrolled(window.scrollY > 50);
  };
  window.addEventListener('scroll', handleScroll);
  return () => window.removeEventListener('scroll', handleScroll);
}, []);

<header className={\`fixed top-0 w-full z-50 transition-all duration-300 \${
  scrolled ? 'bg-white/95 backdrop-blur-md border-b border-gray-200' : 'bg-transparent'
}\`}>
\`\`\`

## 5. R√®gles d'Usage

### Hi√©rarchie Typographique
1. **Hero**: h-display-xxl ou h-display-xl avec gradient
2. **Sections**: h-display ou h1
3. **Sous-sections**: h2 ou h3
4. **Body**: text-body (16px) avec line-height g√©n√©reux
5. **Eyebrow**: Toujours en UPPERCASE avec fl√®che ‚Ü≥

### Couleurs
- **Texte principal**: black (#0D0D0F) sur fond clair
- **Texte secondaire**: gray-500 (#52525B)
- **Texte tertiaire**: gray-400 (#8A8A93)
- **Accent**: Violet (#7C3AED) - Usage parcimonieux
- **Fond sombre**: black ou near-black
- **Bordures**: gray-200 (clair) ou gray-800 (sombre)

### Espacement
- **Sections**: py-24 (96px) minimum
- **Container**: padding lat√©ral responsive
- **Gap grilles**: gap-6 ou gap-8
- **Marges texte**: mb-4, mb-8, mb-12, mb-16

### Effets
- **Hover cards**: shadow-card ‚Üí shadow-card-hover
- **Hover boutons**: Changement de couleur subtil
- **Transitions**: duration-200 ou duration-300
- **Reveal**: Ajouter classe .reveal pour animation au scroll

## 6. Checklist d'Impl√©mentation

‚úÖ **Configuration Tailwind**
- [ ] Importer les couleurs premium
- [ ] Configurer les fontSize custom
- [ ] Ajouter les borderRadius, shadows, gradients

‚úÖ **Classes CSS**
- [ ] Copier les classes utilitaires dans index.css
- [ ] V√©rifier les @apply et @layer components

‚úÖ **Composants**
- [ ] Utiliser les patterns de sections
- [ ] Appliquer les classes premium
- [ ] Impl√©menter les animations reveal

‚úÖ **Accessibilit√©**
- [ ] Contraste minimum 4.5:1
- [ ] Focus visible sur tous les √©l√©ments interactifs
- [ ] Zones cliquables minimum 44x44px
- [ ] Alt text sur toutes les images

## 7. Exemples de Pages Compl√®tes

### Structure Page Type
\`\`\`tsx
<div className="min-h-screen bg-white">
  {/* Header sticky */}
  <Header />
  
  {/* Hero avec noise effect */}
  <HeroSection />
  
  {/* Stats avec grands chiffres */}
  <StatsSection />
  
  {/* Services liste massive fond noir */}
  <ServicesSection />
  
  {/* Cards avec corner marks */}
  <ProcessSection />
  
  {/* Testimonial citation large */}
  <TestimonialSection />
  
  {/* CTA final */}
  <CTASection />
  
  {/* Footer premium */}
  <Footer />
</div>
\`\`\`

## Notes Importantes pour l'IA

1. **Toujours privil√©gier le contraste**: Noir sur blanc ou blanc sur noir
2. **Accent avec parcimonie**: Le violet ne doit pas dominer
3. **Typographie massive**: Ne pas h√©siter sur les grandes tailles
4. **Espacement g√©n√©reux**: Laisser respirer les √©l√©ments
5. **Animations subtiles**: Reveal au scroll, pas d'overshoot
6. **Mobile-first**: Toutes les classes doivent √™tre responsive
7. **Performance**: Lazy loading des images, optimisation des animations

Cette charte graphique est con√ßue pour cr√©er une exp√©rience premium, minimaliste et moderne. Elle doit √™tre appliqu√©e de mani√®re coh√©rente sur toutes les pages du site.`,
    general: `# Documentation Technique - Vaya

## Vue d'ensemble
Vaya est une plateforme de gestion de projets et de ressources humaines permettant de connecter des clients avec des candidats qualifi√©s pour former des √©quipes projet.

## Architecture
- **Frontend**: React + TypeScript + Vite + Tailwind CSS
- **Backend**: Supabase (PostgreSQL + Edge Functions)
- **Real-time**: Supabase Realtime pour les mises √† jour instantan√©es
- **Storage**: Supabase Storage pour les fichiers projet

## Flux m√©tier principal
1. **Client** cr√©e un projet et d√©finit ses besoins en ressources
2. **Syst√®me** recherche les candidats correspondants (status: recherche)
3. **Candidats** re√ßoivent les notifications et peuvent accepter/refuser
4. **Client** d√©marre le projet une fois l'√©quipe compl√®te (kickoff)
5. **√âquipe** acc√®de aux outils collaboratifs (Planning, Kanban, Drive, Messages)

## Points d'attention critiques
- Les candidats doivent √™tre qualifi√©s avant de pouvoir recevoir des missions
- Un projet doit avoir toutes ses ressources accept√©es avant de pouvoir d√©marrer
- Le statut 'play' active les outils collaboratifs pour l'√©quipe
- L'invitation kickoff doit appara√Ætre dans le planning des candidats
- La messagerie utilise **EnhancedMessageSystem** pour TOUS les utilisateurs (unifi√© 30/08/2024)
- Les politiques RLS storage acceptent booking_status IN ('accepted', 'book√©') (corrig√© 31/08/2024)
- **‚ö†Ô∏è Contrainte status projet**: Seuls 'play', 'pause', 'completed' sont autoris√©s (suppression utilise 'completed' + deleted_at)

## Corrections majeures du 03/09/2025
1. **Matching candidats complet**: V√©rifie profile_id, seniority, status, langues ET expertises
2. **Notifications booking**: Corrig√© status IN ('disponible', 'en_pause'), excluant 'qualification'
3. **Realtime ressources**: Ajout subscription dans ProjectCard pour updates instantan√©es
4. **Realtime projets candidat**: Filtrage par assignment avant update
5. **Suppression projet**: Edge Function fix-project-delete pour contrainte SQL
6. **resource-booking-debug supprim√©**: Fonction doublon √©limin√©e

## Conventions de code
- Utiliser des hooks personnalis√©s pour la logique m√©tier r√©utilisable
- Pr√©fixer les composants partag√©s avec 'Shared'
- Utiliser le real-time Supabase pour les mises √† jour instantan√©es
- Toujours filtrer les donn√©es c√¥t√© serveur (RLS)
- Ne jamais cr√©er de fonctions debug, corriger directement les originales`,

    'candidat-flow': `# Flux Candidat

## Parcours complet du candidat

### 1. Inscription
- Candidat s'inscrit ‚Üí status: 'qualification'
- qualification_status: 'pending'
- Remplit son profil (comp√©tences, exp√©rience, etc.)

### 2. Onboarding
- Compl√®te les informations personnelles
- Upload CV et documents
- S√©lectionne profil m√©tier et seniorit√©

### 3. Qualification
- Passe le test de qualification
- Score >= 80% ‚Üí qualification_status: 'qualified', status: 'disponible'
- Score 60-79% ‚Üí qualification_status: 'stand_by' (validation manuelle)
- Score < 60% ‚Üí qualification_status: 'rejected'

### 4. R√©ception de missions
- Seuls les candidats avec status != 'qualification' re√ßoivent les notifications
- Le matching se fait sur 5 crit√®res OBLIGATOIRES:
  - profile_id (m√©tier exact)
  - seniority (niveau exact)
  - status != 'qualification' (candidat qualifi√©)
  - languages (toutes les langues requises)
  - expertises (toutes les expertises requises)
- Notification visible dans le dashboard candidat

### 5. Acceptation/Refus
- Accepte ‚Üí booking_status: 'accepted' ET candidate_id d√©fini
- Refuse ‚Üí booking_status: 'declined'
- Si tous acceptent ‚Üí projet passe en 'attente-team'

### 6. Participation au projet
- Acc√®s aux outils collaboratifs (Planning, Kanban, Drive, Messages)
- R√©ception des invitations aux √©v√©nements
- Collaboration avec l'√©quipe`,

    'candidat-onboarding': `# Onboarding Candidat

## Processus d'onboarding

### √âtapes obligatoires
1. **Informations personnelles**
   - Nom, pr√©nom
   - T√©l√©phone
   - Adresse

2. **Profil professionnel**
   - S√©lection du m√©tier (hr_profiles)
   - Choix de la seniorit√© (junior/confirmed/senior)
   - Ann√©es d'exp√©rience

3. **Documents**
   - Upload CV (optionnel mais recommand√©)
   - Photo de profil (optionnel)

### Tables impact√©es
- candidate_profiles: Mise √† jour des informations
- candidate_skills: Ajout des comp√©tences
- storage: Stockage des documents

### Validation
- onboarding_completed: true une fois termin√©
- Redirection vers le test de qualification`,

    'candidat-qualification': `# Qualification Candidat

## Syst√®me de qualification

### Test de qualification
- Questions g√©n√©r√©es par IA selon le profil
- Score calcul√© automatiquement
- Dur√©e limit√©e (30 minutes)

### Niveaux de qualification
| Score | Status | Action |
|-------|--------|--------|
| >= 80% | qualified | Acc√®s imm√©diat aux missions |
| 60-79% | stand_by | Validation manuelle requise |
| < 60% | rejected | Nouveau test possible apr√®s 30 jours |

### Tables concern√©es
- candidate_qualification_tests: Historique des tests
- candidate_profiles: Mise √† jour qualification_status

### Edge Function
- skill-test-ai: G√©n√®re et √©value les tests`,

    'candidat-missions': `# Gestion des Missions Candidat

## üÜï Corrections Importantes (03/09/2025 - Session compl√®te)

### 1. Syst√®me de matching candidats COMPLET ‚úÖ
- **Fichier principal**: src/pages/CandidateDashboard.tsx
- **Changement majeur**: Impl√©mentation du matching complet √† 5 crit√®res
  - R√©cup√©ration des langues du candidat via candidate_languages
  - R√©cup√©ration des expertises du candidat via candidate_expertises
  - V√©rification profile_id ET seniority ET status ET langues ET expertises
  - Alignement avec la logique de CandidateMissionRequests.tsx
- **R√©sultat**: Les candidats ne voient QUE les projets qui correspondent exactement

### 2. Correction notification "Chercher candidats" ‚úÖ
- **Probl√®me initial**: Candidats ne recevaient pas les notifications
- **Cause racine**: resource-booking-debug cherchait status='active' (inexistant)
- **Solution appliqu√©e**:
  - Correction dans resource-booking: \`.neq('status', 'qualification').in('status', ['disponible', 'en_pause'])\`
  - Suppression compl√®te de resource-booking-debug (doublon)
  - Mise √† jour ProjectCard.tsx pour utiliser resource-booking
- **Statuts valides candidat**: 'qualification', 'disponible', 'en_pause', 'indisponible'

### 3. Realtime loader ressources ‚úÖ
- **Fichier**: src/components/ProjectCard.tsx
- **Ajout**: Subscription realtime pour hr_resource_assignments
- **Code**:
  \`\`\`typescript
  const channel = supabase
    .channel(\`resource-assignments-\${project.id}\`)
    .on('postgres_changes', {
      event: '*',
      schema: 'public',
      table: 'hr_resource_assignments',
      filter: \`project_id=eq.\${project.id}\`
    }, fetchAssignments)
  \`\`\`
- **R√©sultat**: Le loader se met √† jour instantan√©ment apr√®s booking

### 4. Realtime statut projet c√¥t√© candidat ‚úÖ
- **Fichier**: src/hooks/useRealtimeProjectsFixed.ts
- **Probl√®me**: Changement de statut (pause) non refl√©t√© c√¥t√© candidat
- **Solution**: V√©rifier si le candidat est assign√© avant de traiter l'update
- **Code ajout√©**:
  \`\`\`typescript
  if (userType === 'candidate') {
    const { data: assignments } = await supabase
      .from('hr_resource_assignments')
      .select('id')
      .eq('project_id', project.id)
      .eq('candidate_id', candidateProfile?.id)
      .limit(1);
    
    if (assignments && assignments.length > 0) {
      await handleProjectUpdate(payload);
    }
  }
  \`\`\`

### 5. Correction popup projets accept√©s ‚úÖ
- **Fichier**: src/components/candidate/CandidateProjectsSection.tsx
- **Probl√®me**: Bouton "Acc√©der au projet" g√©n√©rait une 404
- **Solution**: Toujours ouvrir le modal au lieu de naviguer
- **Comportement unifi√©**: Modal fullscreen pour tous les projets

### 6. Fix suppression projet (contrainte SQL) ‚úÖ
- **Probl√®me**: projects_status_check n'autorise que 'play', 'pause', 'completed'
- **Solution**: Edge Function fix-project-delete utilisant status='completed' + deleted_at
- **Fichier modifi√©**: src/components/DeleteProjectDialog.tsx
- **Note**: Migration SQL n√©cessaire pour ajouter 'cancelled' et 'archived'

### 7. Logique de filtrage des missions
**R√®gles finales impl√©ment√©es**:
- Si candidate_id = candidat actuel ‚Üí Toujours afficher ‚úì
- Si candidate_id = autre candidat ‚Üí Ne jamais afficher ‚úì
- Si candidate_id = null ET booking_status = 'recherche' ‚Üí V√©rifier:
  1. profile_id correspond exactement ‚úì
  2. seniority correspond exactement ‚úì
  3. status != 'qualification' ‚úì
  4. Toutes les langues requises pr√©sentes ‚úì
  5. Toutes les expertises requises pr√©sentes ‚úì

### 8. Edge Functions d√©ploy√©es aujourd'hui
- **fix-project-delete**: Workaround pour contrainte status
- **resource-booking**: Corrig√© pour matching candidats
- Suppression de resource-booking-debug

### Points d'am√©lioration identifi√©s
1. **Migration SQL n√©cessaire** pour ajouter statuts 'cancelled' et 'archived'
2. **Uniformisation booking_status**: Certaines parties utilisent 'book√©' vs 'accepted'
3. **Performance**: Le matching pourrait √™tre optimis√© c√¥t√© SQL

## R√©ception et gestion des missions

### Notification de mission
- D√©clench√©e quand booking_status passe √† 'recherche'
- Visible dans candidate_notifications
- Affichage dans le dashboard avec d√©tails du projet
- **Filtre important**: Seuls assignments avec booking_status='recherche' ET matching profile/seniority

### Acceptation de mission
1. Candidat clique "Accepter"
2. resource-booking Edge Function appel√©e avec:
   - action: 'accept_mission'
   - assignment_id: ID de l'assignment
   - candidate_email: Email du candidat
3. V√©rifications dans l'Edge Function:
   - Assignment existe et est en 'recherche'
   - Candidat existe dans candidate_profiles
4. Mise √† jour atomique:
   - booking_status ‚Üí 'accepted'
   - candidate_id ‚Üí ID du candidat (CRITIQUE!)
5. Mise √† jour projet:
   - Si toutes ressources accept√©es ‚Üí status = 'play'
   - Si partiellement accept√©es ‚Üí status = 'pause'
6. Notification au client (table notifications)

### Refus de mission
1. Candidat clique "Refuser"
2. booking_status ‚Üí 'declined'
3. Syst√®me cherche un autre candidat
4. Notification au client

### Points critiques
- candidate_id DOIT √™tre d√©fini lors de l'acceptation
- V√©rifier que le candidat n'est pas d√©j√† sur un autre projet actif
- Statuts projet limit√©s par contrainte DB: 'play', 'pause', 'completed', 'archiv√©'`,

    'candidat-realtime': `# Temps R√©el Candidat

## Mises √† jour en temps r√©el

### Tables avec realtime activ√©
- projects: Changements de statut
- hr_resource_assignments: Nouvelles assignations
- candidate_notifications: Nouvelles notifications
- messages: Nouveaux messages
- kanban_cards: Mises √† jour des t√¢ches

### Hook principal am√©lior√©
\`\`\`typescript
useRealtimeProjectsFixed()
// √âcoute les changements sur:
// - projects (status) ‚Üí Synchronisation imm√©diate
// - hr_resource_assignments (booking_status)
// - Met √† jour automatiquement l'UI

// AM√âLIORATION 2024:
// - Synchronisation projets dans assignments
// - Utilisation de refs pour √©viter closures p√©rim√©es
// - Update imm√©diat sans refresh page
\`\`\`

### Indicateurs visuels temps r√©el
- **Badge "En pause"** (orange avec ic√¥ne Pause)
  - Affich√© quand status='pause' ou 'attente-team'
  - Visible sur les cartes projet candidat
  
- **Time Tracker bloqu√©**
  - Projets en pause exclus de la liste
  - Message explicite sur la restriction
  - Seuls projets 'play' permettent le tracking

### Synchronisation client ‚Üî candidat
- Changement status c√¥t√© client ‚Üí Update imm√©diat c√¥t√© candidat
- Les projets changent automatiquement d'onglet (pause/en cours)
- Pas besoin de rafra√Æchir la page
- Badge "En pause" appara√Æt/dispara√Æt en temps r√©el

### √âv√©nements surveill√©s
- INSERT: Nouvelles assignations
- UPDATE: Changements de statut (imm√©diat)
- DELETE: Suppressions (rare)`,

    'candidat-activities': `# ‚è±Ô∏è Activit√©s & Time Tracking Candidat

## Vue d'ensemble

Le syst√®me d'activit√©s pour les candidats est bas√© sur le **Time Tracking** uniquement. Les activit√©s affich√©es dans "Mes activit√©s" correspondent aux sessions de temps enregistr√©es via le Time Tracker.

## Architecture technique

### Composants principaux
\`\`\`typescript
// Tracker de temps dans le header
TimeTrackerSimple
- Localisation: src/components/time-tracking/TimeTrackerSimple.tsx
- Fonction: D√©marrer/Arr√™ter des sessions de temps
- Position: Header du dashboard candidat
- **RESTRICTION**: Ne fonctionne QUE pour les projets avec status='play'
- Les projets en pause sont exclus de la liste

// Page d'affichage des activit√©s
CandidateActivities
- Localisation: src/pages/CandidateActivities.tsx
- Fonction: Afficher, filtrer et exporter les sessions
- Utilise: useCandidateProjectsOptimized() pour la liste des projets
\`\`\`

### Table de base de donn√©es
\`\`\`sql
CREATE TABLE time_tracking_sessions (
  id UUID PRIMARY KEY,
  candidate_id UUID REFERENCES candidate_profiles(id),
  project_id UUID REFERENCES projects(id),
  activity_description TEXT,
  start_time TIMESTAMP,
  end_time TIMESTAMP,
  duration_minutes INTEGER,
  hourly_rate DECIMAL,
  total_cost DECIMAL,
  status VARCHAR(20), -- 'active', 'paused', 'completed'
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);
\`\`\`

## Flux d'enregistrement d'activit√©

### 1. D√©marrage d'une session
1. Candidat clique sur l'ic√¥ne **horloge** dans le header
2. S√©lectionne un projet dans la liste (projets avec status='play')
3. Ajoute une description de l'activit√©
4. Clique sur "D√©marrer"
5. Une entr√©e est cr√©√©e dans time_tracking_sessions avec status='active'

### 2. Pendant la session
- Timer s'affiche en temps r√©el
- Possibilit√© de mettre en pause (status='paused')
- Reprise possible apr√®s pause
- Le temps est calcul√© automatiquement

### 3. Fin de session
1. Candidat clique sur "Stop"
2. La session est marqu√©e comme status='completed'
3. duration_minutes est calcul√©
4. total_cost = duration_minutes √ó hourly_rate

### 4. Affichage dans "Mes activit√©s"
- Liste toutes les sessions avec status='completed'
- Filtrage par projet possible
- Filtrage par p√©riode (semaine/mois/tout)
- Export CSV disponible

## Hook personnalis√©: useTimeTracking

\`\`\`typescript
const {
  activeSession,      // Session en cours si existe
  candidateRate,      // Taux horaire du candidat
  loading,           // √âtat de chargement
  startSession,      // Fonction pour d√©marrer
  togglePause,       // Fonction pause/reprise
  stopSession,       // Fonction pour arr√™ter
  formatTime         // Formatage du temps
} = useTimeTracking();
\`\`\`

## Ce qui EST track√© (activit√©s visibles)

‚úÖ **Sessions de Time Tracking**
- Temps pass√© sur un projet
- Description de l'activit√©
- Calcul automatique du co√ªt
- Dur√©e pr√©cise en minutes

## Ce qui N'EST PAS track√© (non visible dans activit√©s)

‚ùå **Actions Kanban**
- Cr√©ation de cartes
- D√©placement de cartes
- Finalisation de t√¢ches
‚Üí Ces actions sont enregistr√©es dans kanban_cards mais pas dans time_tracking_sessions

‚ùå **Actions Drive**
- Upload de fichiers
- T√©l√©chargement
- Cr√©ation de dossiers
‚Üí Ces actions ne cr√©ent pas d'entr√©es d'activit√©

‚ùå **Messages**
- Envoi de messages
- Participation aux discussions
‚Üí Enregistr√©s dans messages mais pas comme activit√©s

‚ùå **Planning**
- Acceptation/Refus d'√©v√©nements
- Modifications du planning
‚Üí Pas consid√©r√© comme activit√© facturable

## Points importants

### Calcul du taux horaire
- R√©cup√©r√© depuis hr_resource_assignments
- calculated_price = taux pour le projet
- Converti en taux par minute pour pr√©cision

### Projets disponibles
- Seuls les projets avec status='play' sont list√©s
- Le candidat doit avoir booking_status='accepted'
- Utilise useCandidateProjectsOptimized() pour coh√©rence

### Format d'export CSV
\`\`\`csv
Date,Projet,Activit√©,Dur√©e (min),Tarif/min,Co√ªt total
2024-08-31,Projet A,D√©veloppement feature X,120,1.67,200
\`\`\`

## R√©sum√©

Le syst√®me d'activit√©s est **volontairement limit√©** au Time Tracking car :
1. **Facturation** : Seul le temps r√©el travaill√© est facturable
2. **Transparence** : Le client voit exactement le temps pass√©
3. **Simplicit√©** : Pas de tracking automatique intrusif
4. **Contr√¥le** : Le candidat choisit quand tracker son temps

Pour qu'une action apparaisse dans "Mes activit√©s", elle DOIT passer par le Time Tracker.`,

    'projet-workflow': `# Workflow Projet

## Cycle de vie complet d'un projet

### 1. Cr√©ation (status: 'pause')
- Client cr√©e le projet
- D√©finit titre, description, dates, budget
- Configure les ressources n√©cessaires via ReactFlow

### 2. Recherche d'√©quipe
- Pour chaque ressource ‚Üí booking_status: 'recherche'
- Notifications envoy√©es aux candidats match√©s
- Suivi des acceptations/refus

### 3. √âquipe compl√®te (status: 'attente-team')
- Tous les candidats ont accept√©
- Projet pr√™t √† d√©marrer
- En attente du kickoff client
- **Badge "En pause"** affich√© c√¥t√© candidat
- **Time Tracker bloqu√©** (pas de suivi temps possible)

### 4. D√©marrage (status: 'play')
- Client lance le kickoff
- project-orchestrator configure tout
- Outils collaboratifs activ√©s
- Invitations planning envoy√©es
- **Time Tracker disponible** (suivi temps activ√©)
- Mise √† jour realtime imm√©diate c√¥t√© candidat

### 5. En cours
- √âquipe utilise les outils
- Collaboration active
- Suivi du temps et facturation

### 6. Termin√© (status: 'completed')
- Projet marqu√© comme termin√©
- Facturation finale
- Archivage des donn√©es

## üóÇÔ∏è Syst√®me d'Archivage et Suppression

### Archivage de Projet
**Action r√©versible** - Le projet devient lecture seule

#### Processus
1. Client s√©lectionne "Archiver" dans le menu kebab
2. Modal de confirmation avec choix archive/delete
3. Saisie obligatoire: "ARCHIVE [nom du projet]"
4. Raison optionnelle

#### Effets
- **Statut**: archived_at rempli
- **Acc√®s**: Lecture seule pour tous
- **Donn√©es**: Tout est conserv√©
- **UI**: Onglet "Archiv√©s" dans dashboard
- **Notifications**: Tous les candidats notifi√©s
- **R√©versible**: Peut √™tre d√©sarchiv√©

### Suppression Douce (Soft Delete)
**Action irr√©versible** - Conservation des donn√©es critiques

#### Processus
1. Client s√©lectionne "Supprimer" dans le menu
2. Modal avec avertissements d√©taill√©s
3. Saisie obligatoire: "DELETE [nom du projet]"
4. Confirmation de l'irr√©versibilit√©

#### Effets
- **Statut**: deleted_at rempli, status ‚Üí 'cancelled'
- **Acc√®s Drive/Kanban**: R√©voqu√© imm√©diatement
- **Messages**: Archive conserv√©e (lecture seule)
- **Factures**: Toujours accessibles
- **Time Tracking**: Donn√©es conserv√©es pour facturation
- **Notifications**: Type 'project_deleted' envoy√©

### Tableau Comparatif

| Action | R√©versible | Donn√©es | Acc√®s | Facturation |
|--------|------------|---------|--------|-------------|
| **Archivage** | ‚úÖ Oui | Conserv√©es | Lecture seule | Accessible |
| **Suppression** | ‚ùå Non | Partiellement | R√©voqu√© | Historique conserv√© |
| **En pause** | ‚úÖ Oui | Actives | Complet | Time tracking bloqu√© |

### Notifications Syst√®me

#### Types ajout√©s
- \`project_archived\`: Projet mis en archive
- \`project_unarchived\`: Projet r√©activ√©
- \`project_deleted\`: Suppression d√©finitive
- \`project_cancelled\`: Annulation (via suppression)

#### Ic√¥nes
- üìÅ Archive (bleu)
- üîÑ D√©sarchivage (vert)
- üóëÔ∏è Suppression (rouge)
- ‚õî Annulation (orange)

### Tables Base de Donn√©es

#### Nouvelles colonnes dans \`projects\`
\`\`\`sql
archived_at TIMESTAMPTZ,
archived_by UUID REFERENCES profiles(id),
archived_reason TEXT,
deleted_at TIMESTAMPTZ,
deleted_by UUID REFERENCES profiles(id),
deletion_reason TEXT
\`\`\`

#### Nouvelle table \`project_action_logs\`
\`\`\`sql
CREATE TABLE project_action_logs (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  action_type TEXT CHECK (action_type IN ('archived', 'unarchived', 'deleted', 'restored')),
  action_reason TEXT,
  performed_by UUID REFERENCES profiles(id),
  affected_users UUID[],
  created_at TIMESTAMPTZ DEFAULT NOW()
);
\`\`\`

### Fonctions SQL

#### archive_project()
- Param√®tres: project_id, user_id, reason
- Retour: JSONB avec success, affected_users
- Actions: Archive + notifications

#### unarchive_project()
- Param√®tres: project_id, user_id
- Retour: JSONB avec success
- Actions: D√©sarchivage + notifications

#### soft_delete_project()
- Param√®tres: project_id, user_id, reason
- Retour: JSONB avec success, affected_users
- Actions: Suppression douce + notifications urgentes`,

    'projet-pause-reprise': `# ‚è∏Ô∏è Syst√®me de Pause/Reprise des Projets

## Vue d'ensemble

Le syst√®me permet au client de mettre en pause ou reprendre un projet √† tout moment. Cette fonctionnalit√© est essentielle pour g√©rer les projets selon les besoins m√©tier.

## Fonctionnement c√¥t√© Client

### Mise en pause d'un projet actif
1. Le client clique sur "Mettre en pause" sur un projet avec status='play'
2. Le syst√®me met √† jour le statut √† 'pause'
3. Le bouton devient "D√©marrer le projet"
4. Le badge "En pause" appara√Æt sur la carte projet

### Reprise d'un projet en pause
1. Le client clique sur "D√©marrer le projet" sur un projet avec status='pause'
2. V√©rification automatique:
   - Si aucune ressource accept√©e ‚Üí Message d'erreur
   - Si certaines ressources manquantes ‚Üí Status 'attente-team'
   - Si toutes les ressources accept√©es ‚Üí Dialog kickoff
3. Apr√®s kickoff, le projet passe en status='play'

### Code d'impl√©mentation (ClientDashboard.tsx)
\`\`\`typescript
const onToggleStatus = async (id: string, currentStatus: string) => {
  let newStatus: string;
  
  if (currentStatus === 'play') {
    newStatus = 'pause';
  } else if (currentStatus === 'pause') {
    // V√©rifications et d√©marrage via kickoff
    const acceptedResources = resourceAssignments.filter(
      a => a.project_id === id && a.booking_status === 'accepted'
    );
    if (acceptedResources.length === totalResources.length) {
      handleStartProject(project); // Ouvre le dialog kickoff
      return;
    }
  }
  
  await supabase.from('projects').update({ status: newStatus }).eq('id', id);
};
\`\`\`

## Fonctionnement c√¥t√© Candidat

### Restrictions pour projets en pause
- **Outils collaboratifs d√©sactiv√©s**: Planning, Kanban, Drive, Messages
- **Time tracking bloqu√©**: Projets en pause exclus de la liste
- **Consultation uniquement**: Bouton "Voir les d√©tails" au lieu de "Acc√©der au projet"
- **Badge visuel**: Badge orange "En pause" sur la carte projet

### Filtrage automatique (useCandidateProjectsOptimized.ts)
\`\`\`typescript
// Seuls les projets actifs sont retourn√©s pour les outils
const activeProjects = allAcceptedProjects.filter(p => p.status === 'play');
\`\`\`

### Cat√©gorisation (CandidateProjectsSection.tsx)
\`\`\`typescript
// Les projets en pause sont cat√©goris√©s comme "attente-kickoff"
const statusCounts = {
  'attente-kickoff': activeProjects.filter(
    p => p.status === 'attente-team' || p.status === 'pause'
  ).length
};
\`\`\`

## Synchronisation Realtime

- Changement de statut c√¥t√© client ‚Üí Update imm√©diat c√¥t√© candidat
- Badge "En pause" appara√Æt/dispara√Æt en temps r√©el
- Projets changent automatiquement d'onglet sans refresh
- Utilisation du hook useRealtimeProjectsFixed pour la synchronisation

## Points techniques importants

1. **Statuts projet limit√©s par DB**: 'play', 'pause', 'completed', 'archiv√©'
2. **V√©rification des ressources** avant reprise du projet
3. **Kickoff obligatoire** pour passer de 'pause' √† 'play'
4. **Filtrage automatique** des projets pour les outils collaboratifs`,

    'projet-edition-candidat': `# üîÑ √âdition de Projet et Changement de Candidat

## Vue d'ensemble

Lors de l'√©dition d'un projet, certains changements peuvent n√©cessiter de remplacer le candidat assign√©. Ce syst√®me g√®re automatiquement ces transitions.

## R√®gles de changement de candidat

### Changement OBLIGATOIRE si:
- **S√©niorit√© modifi√©e**: Le candidat actuel ne correspond plus au niveau demand√©

### Changement CONDITIONNEL si:
- **Expertises modifi√©es**: V√©rifier si le candidat actuel poss√®de les nouvelles expertises
- **Langues modifi√©es**: V√©rifier si le candidat actuel parle les nouvelles langues
- Si le candidat correspond toujours ‚Üí Garder le m√™me
- Sinon ‚Üí Rechercher un nouveau candidat

## Flux de changement de candidat

### 1. D√©tection du changement
Lors de la sauvegarde du projet modifi√©:
\`\`\`typescript
// V√©rifier si les crit√®res ont chang√©
if (oldSeniority !== newSeniority) {
  needsCandidateChange = true;
} else if (expertisesChanged || languagesChanged) {
  // V√©rifier si le candidat actuel correspond toujours
  const candidateMatches = await checkCandidateMatch(
    candidateId, 
    newExpertises, 
    newLanguages
  );
  needsCandidateChange = !candidateMatches;
}
\`\`\`

### 2. Actions si changement n√©cessaire

#### Pour l'ancien candidat:
1. **NE PAS supprimer** l'assignment
2. Mettre √† jour booking_status √† 'completed'
3. Le projet appara√Æt dans l'onglet "Termin√©s" du candidat
4. Notification: "Le projet {title} a √©t√© cl√¥tur√© suite √† un changement de besoins"

#### Pour le projet:
1. Cr√©er un nouvel assignment avec booking_status='recherche'
2. Mettre √† jour le status du projet √† 'attente-team'
3. Lancer la recherche de nouveaux candidats

#### Pour le client:
1. Affichage du badge "En attente d'√©quipe"
2. CTA devient "Booker les √©quipes" ou "En attente de confirmation"
3. Notification: "Suite aux modifications, une nouvelle recherche de candidat est en cours"

### 3. Impl√©mentation dans EditProjectModal

\`\`\`typescript
const handleSave = async () => {
  // 1. Sauvegarder les modifications du projet
  await updateProject(projectData);
  
  // 2. V√©rifier les changements de ressources
  for (const assignment of resourceAssignments) {
    const needsChange = await checkIfCandidateNeedsChange(
      assignment,
      newRequirements
    );
    
    if (needsChange && assignment.candidate_id) {
      // Cl√¥turer l'assignment actuel
      await supabase
        .from('hr_resource_assignments')
        .update({ 
          booking_status: 'completed',
          completed_at: new Date().toISOString(),
          completion_reason: 'requirements_changed'
        })
        .eq('id', assignment.id);
      
      // Cr√©er un nouvel assignment
      await supabase
        .from('hr_resource_assignments')
        .insert({
          project_id: projectId,
          profile_id: assignment.profile_id,
          seniority: newSeniority,
          expertises: newExpertises,
          languages: newLanguages,
          booking_status: 'recherche'
        });
    }
  }
  
  // 3. Mettre √† jour le statut du projet si n√©cessaire
  const hasSearching = await checkHasSearchingAssignments(projectId);
  if (hasSearching) {
    await supabase
      .from('projects')
      .update({ status: 'attente-team' })
      .eq('id', projectId);
  }
};
\`\`\`

## Tables impact√©es

### hr_resource_assignments
- Ajout de colonnes:
  - completed_at: TIMESTAMPTZ
  - completion_reason: TEXT ('requirements_changed', 'project_completed', etc.)

### candidate_notifications
- Cr√©ation de notifications pour informer les candidats

## Points d'attention

1. **Toujours conserver l'historique**: Ne jamais supprimer les assignments
2. **Notifications claires**: Informer tous les acteurs des changements
3. **Transition en douceur**: Le candidat voit son projet "termin√©" plut√¥t que supprim√©
4. **Coh√©rence des statuts**: Projet en 'attente-team' si recherche en cours`,

    'projet-demarrage': `# üî• D√©marrage Projet (Kickoff)

## Vue d'ensemble technique

Le d√©marrage d'un projet est un processus orchestr√© complexe qui configure automatiquement tous les outils collaboratifs et synchronise l'√©quipe.

## D√©clenchement

### Condition pr√©alable
- Toutes les ressources doivent avoir booking_status = 'accepted'
- Le projet doit √™tre en status 'attente-team' ou 'pause'

### Action client
1. Client va dans "Mes projets" ‚Üí Onglet "En pause"
2. Clique sur "D√©marrer le projet"
3. S√©lectionne date et heure du kickoff
4. Confirme le d√©marrage

## S√©quence d'ex√©cution

### 1. useProjectOrchestrator Hook
\`\`\`typescript
// Appel√© depuis le composant React
const { setupProject } = useProjectOrchestrator();
await setupProject(projectId, kickoffDate);
\`\`\`

### 2. project-orchestrator Edge Function

#### √âtape 1: R√©cup√©ration des donn√©es
- Charge le projet depuis 'projects'
- R√©cup√®re les assignations accept√©es (hr_resource_assignments)
- Pour chaque assignation, trouve le candidat via candidate_id
- R√©cup√®re le profil du client (owner)

#### √âtape 2: Remplissage project_teams
**NOUVEAU (30/08/2024)** - Table critique pour le kickoff
\`\`\`sql
INSERT INTO project_teams (
  project_id, member_id, member_type, 
  email, first_name, last_name, role
) VALUES
-- Client/Owner
(projectId, ownerId, 'client', email, firstName, lastName, 'owner'),
-- Chaque candidat accept√©
(projectId, candidateId, 'resource', email, firstName, lastName, profileType)
\`\`\`

#### √âtape 3: Cr√©ation Kanban
- Cr√©e kanban_boards avec titre et description
- Ajoute les colonnes standards:
  - Setup (rappels projet)
  - √Ä faire
  - En cours
  - √Ä v√©rifier
  - Finalis√©
- Cr√©e des cartes contextuelles dans Setup:
  - Description du projet
  - Dates cl√©s
  - Budget global
  - Constitution de l'√©quipe
  - Livrables √† fournir

#### √âtape 4: Initialisation Storage
- Appelle init-project-storage
- Cr√©e la structure de dossiers dans Supabase Storage:
  - /project/{projectId}/
  - Sous-dossiers par cat√©gorie de ressource

#### √âtape 5: Notifications √©quipe
- Cr√©e une notification pour chaque candidat
- Titre: "Bienvenue dans le projet {title}"
- Les informe de l'acc√®s aux outils

#### √âtape 6: Mise √† jour statut
- project.status ‚Üí 'play'

### 3. project-kickoff Edge Function

#### ‚ö†Ô∏è Important (Corrig√© Session 4)
**Ne PAS utiliser de jointures** avec client_profiles pour √©viter les probl√®mes RLS.
R√©cup√©rer les donn√©es s√©par√©ment:
1. D'abord le projet
2. Puis le profil client si besoin
3. Enfin les candidats un par un

#### √âtape 1: R√©cup√©ration du projet et de l'√©quipe
\`\`\`sql
-- R√©cup√©ration projet SANS jointure
SELECT * FROM projects WHERE id = projectId;

-- R√©cup√©ration profil client s√©par√©ment 
SELECT * FROM client_profiles WHERE id = ownerId;

-- R√©cup√©ration candidats accept√©s
SELECT * FROM hr_resource_assignments 
WHERE project_id = projectId 
AND booking_status = 'accepted';

-- Pour chaque candidat, r√©cup√©ration profil s√©par√©e
SELECT * FROM candidate_profiles WHERE id = candidateId;
\`\`\`

#### √âtape 2: Cr√©ation √©v√©nement kickoff
\`\`\`sql
INSERT INTO project_events (
  project_id, title, description,
  start_at, end_at, video_url
) VALUES (
  projectId,
  'Kickoff - {project.title}',
  'R√©union de lancement du projet',
  kickoffDate,
  kickoffDate + 1 hour,
  'https://meet.jit.si/{projectId}-kickoff'
)
\`\`\`

#### √âtape 3: Ajout des attendees
\`\`\`sql
INSERT INTO project_event_attendees (
  event_id, email, required, response_status
) 
SELECT eventId, email, true, 'pending'
FROM project_teams WHERE project_id = projectId
\`\`\`

#### √âtape 4: Notifications candidats
**NOUVEAU (30/08/2024)** - Critical pour visibilit√© planning
\`\`\`sql
INSERT INTO candidate_event_notifications (
  candidate_id, project_id, event_id,
  title, description, event_date,
  video_url, status
)
SELECT 
  member_id, projectId, eventId,
  'Invitation Kickoff - {title}',
  'Vous √™tes invit√© √† la r√©union de lancement',
  kickoffDate, videoUrl, 'pending'
FROM project_teams 
WHERE project_id = projectId 
  AND member_type = 'resource'
\`\`\`

## Tables impact√©es

### Tables principales modifi√©es
1. **projects**: status ‚Üí 'play'
2. **project_teams**: Ajout de tous les membres (client + candidats)
3. **kanban_boards**: Cr√©ation du tableau
4. **kanban_columns**: Ajout des colonnes
5. **kanban_cards**: Cr√©ation des cartes initiales
6. **project_events**: Cr√©ation √©v√©nement kickoff
7. **project_event_attendees**: Ajout des participants
8. **candidate_event_notifications**: Invitations pour candidats
9. **candidate_notifications**: Notifications g√©n√©rales

### Tables consult√©es
- hr_resource_assignments: Pour trouver les candidats accept√©s
- candidate_profiles: Pour les infos des candidats
- profiles: Pour les infos du client
- hr_profiles: Pour les cat√©gories de ressources

## Points d'attention critiques

### ‚ö†Ô∏è Conditions de succ√®s
1. **candidate_id DOIT √™tre d√©fini** dans hr_resource_assignments
2. **project_teams DOIT √™tre remplie** avant d'appeler project-kickoff
3. **Tous les candidats doivent avoir accept√©** (booking_status = 'accepted')

### üêõ Erreurs courantes
- "Aucun candidat trouv√©" ‚Üí candidate_id non d√©fini lors de l'acceptation
- "Kickoff non visible" ‚Üí project_teams non remplie
- "Invitation absente" ‚Üí candidate_event_notifications non cr√©√©e

### ‚úÖ V√©rifications
- V√©rifier que project_teams contient tous les membres
- Confirmer que candidate_event_notifications a les invitations
- S'assurer que le planning candidat affiche l'√©v√©nement

## R√©sultat final

### Pour le client
- Projet en status 'play'
- Kanban configur√© avec cartes initiales
- Planning avec √©v√©nement kickoff
- Espace Drive cr√©√©
- Messagerie active

### Pour les candidats
- Notification de bienvenue
- Invitation kickoff dans le planning
- Acc√®s aux outils collaboratifs
- Visibilit√© du projet dans leur dashboard

### Pour l'√©quipe
- Environnement de travail complet
- Outils synchronis√©s
- Communication √©tablie
- Planning partag√© actif`,

    'projet-orchestration': `# Orchestration Projet

## project-orchestrator Function

### Responsabilit√©s
- Configuration initiale du projet au d√©marrage
- Cr√©ation des espaces de travail (Kanban, Drive)
- Synchronisation de l'√©quipe
- Envoi des notifications

### Flux d'ex√©cution
1. **NOUVEAU**: V√©rification que le projet n'est pas d√©j√† en 'play'
2. V√©rification des pr√©requis (ressources accept√©es)
3. R√©cup√©ration des ressources accept√©es
4. Cr√©ation du Kanban avec colonnes standards
5. Initialisation du storage
6. Notifications √† l'√©quipe
7. Mise √† jour du statut projet ‚Üí 'play'

### Validation ajout√©e (Session 4)
\`\`\`typescript
// Emp√™che le red√©marrage d'un projet d√©j√† actif
if (project.status === 'play') {
  return new Response(
    JSON.stringify({ 
      error: 'Le projet est d√©j√† d√©marr√©',
      details: 'Ce projet a d√©j√† le statut "play"'
    }),
    { status: 400 }
  );
}
\`\`\`

### Tables modifi√©es
- kanban_boards, kanban_columns, kanban_cards
- project_teams (remplie avec tous les membres)
- candidate_notifications
- projects (status ‚Üí 'play')

### Gestion d'erreurs
- Rollback partiel non support√©
- Log d√©taill√© pour debug
- Ne bloque pas sur erreurs non critiques
- Validation statut pour √©viter doublons`,

    'projet-collaboration': `# Outils Collaboratifs

## Outils disponibles (status='play' requis)

### Planning
- Calendrier partag√© avec √©v√©nements
- Invitations avec acceptation/refus
- Int√©gration Google Calendar
- Notifications par email
- Composant: SharedPlanningView

### Kanban
- Tableau de gestion des t√¢ches
- Colonnes personnalisables
- Drag & drop
- Assignation de t√¢ches
- Pi√®ces jointes
- Composant: KanbanBoard

### Drive
- Stockage organis√© par projet
- Dossiers par cat√©gorie
- Upload/download de fichiers
- Pr√©visualisation
- Composant: SharedDriveView

### Messages (UNIFI√â 30/08/2024)
- Chat temps r√©el avanc√©
- Groupes de discussion
- Messages priv√©s
- Upload de fichiers avec sync Drive
- Pr√©sence en ligne
- Formatage de texte
- Composant: **EnhancedMessageSystem** (unifi√© pour tous)
- Voir documentation d√©taill√©e: Projet > Messagerie

## Acc√®s et permissions
- Client: Acc√®s complet √† ses projets
- Candidats: Acc√®s aux projets accept√©s uniquement
- Filtrage RLS strict

## Points importants
- Tous les outils n√©cessitent status='play'
- Initialisation automatique au kickoff
- Synchronisation temps r√©el via Supabase
- Interface unifi√©e client/candidat`,

    'projet-planning': `# üìÖ Planning & Calendrier

## üÜï Syst√®me de Planning Unifi√© (05/09/2025)

### Vue d'ensemble
Le syst√®me de planning unifi√© remplace l'ancienne impl√©mentation Schedule-X et Cal.com par une solution int√©gr√©e compl√®te bas√©e sur la table project_events.

## Architecture technique

### Composants principaux

#### 1. PlanningPage (anciennement CalcPage)
\`\`\`typescript
// src/pages/PlanningPage.tsx
interface PlanningPageProps {
  userType: 'client' | 'candidate';
  userEmail?: string;
  userName?: string;
  candidateId?: string; // Pour les candidats uniquement
}
\`\`\`

**Caract√©ristiques:**
- Page unifi√©e pour clients et candidats
- S√©lection du projet actif via dropdown
- Chargement des √©v√©nements depuis project_events
- Chargement des membres d'√©quipe depuis hr_resource_assignments
- Permissions diff√©renci√©es (clients peuvent √©diter/supprimer)

#### 2. SimpleScheduleCalendar
\`\`\`typescript
// src/components/SimpleScheduleCalendar.tsx
interface SimpleScheduleCalendarProps {
  projectName: string;
  events: CalendarEvent[];
  teamMembers?: TeamMember[];
  onEventClick?: (event: CalendarEvent) => void;
  onAddEvent?: () => void;
}
\`\`\`

**Caract√©ristiques:**
- Utilise **date-fns** au lieu de l'API Temporal
- Vue Mois et Liste
- Navigation par mois
- Affichage des √©v√©nements avec indicateur visuel
- Support des liens Jitsi Meet

#### 3. CreateEventDialog
\`\`\`typescript
// src/components/CreateEventDialog.tsx
interface CreateEventDialogProps {
  open: boolean;
  projectId: string;
  projectTitle: string;
  onClose: () => void;
  onEventCreated: () => void;
}
\`\`\`

**Fonctionnalit√©s:**
- Cr√©ation d'√©v√©nements personnalis√©s
- S√©lection des participants (√©quipe compl√®te)
- G√©n√©ration automatique du lien Jitsi
- Envoi de notifications aux candidats
- Support des lieux physiques et virtuels
- Accessible aux clients ET candidats

#### 4. ViewEventDialog (NOUVEAU)
\`\`\`typescript
// src/components/ViewEventDialog.tsx
interface ViewEventDialogProps {
  open: boolean;
  eventId: string;
  projectTitle?: string;
  onClose: () => void;
  onEventUpdated?: () => void;
  onEventDeleted?: () => void;
  canEdit?: boolean;
}
\`\`\`

**Fonctionnalit√©s:**
- Visualisation d√©taill√©e des √©v√©nements
- Mode √©dition (clients uniquement)
- Affichage des participants et leurs statuts
- Lien direct vers la visioconf√©rence
- Suppression d'√©v√©nement (clients uniquement)

### Tables de base de donn√©es

#### Colonnes metadata ajout√©es (IMPORTANT)
\`\`\`sql
-- √Ä ex√©cuter dans Supabase SQL Editor
ALTER TABLE projects ADD COLUMN metadata JSONB DEFAULT '{}';
ALTER TABLE projects ADD COLUMN planning_shared TEXT;
ALTER TABLE project_events ADD COLUMN metadata JSONB DEFAULT '{}';
\`\`\`

#### Structure metadata Schedule-X
\`\`\`json
{
  "scheduleX": {
    "calendar_created": true,
    "calendar_config": {
      "id": "calendar-project-id",
      "name": "Calendrier - Nom du projet",
      "color": "#10b981",
      "members": []
    },
    "calendar_url": "/calendar/shared/project-id",
    "kickoff_date": "2025-09-05T14:00:00Z",
    "kickoff_event": {
      "id": "kickoff-123456",
      "title": "Kickoff - Projet",
      "start": "2025-09-05T14:00:00Z",
      "end": "2025-09-05T15:00:00Z"
    },
    "kickoff_meeting_url": "https://meet.jit.si/...",
    "team_members": [],
    "integration_type": "schedule-x"
  }
}
\`\`\`

## Flux de cr√©ation d'√©v√©nement

### 1. Via Kickoff automatique
\`\`\`typescript
// supabase/functions/project-kickoff/index.ts
1. R√©cup√®re les membres de l'√©quipe (client + candidats accept√©s)
2. Remplit la table project_teams (CRITIQUE!)
3. G√©n√®re l'√©v√©nement kickoff avec lien Jitsi
4. Cr√©e les notifications candidats dans candidate_event_notifications
5. L'√©v√©nement appara√Æt dans le planning de tous les membres
\`\`\`

### 2. Via cr√©ation manuelle
\`\`\`typescript
// PlanningPage ‚Üí CreateEventDialog
1. Ouvre le dialog de cr√©ation
2. Charge automatiquement l'√©quipe du projet
3. G√©n√®re le lien Jitsi bas√© sur le titre
4. Cr√©e l'√©v√©nement dans project_events
5. Ajoute les participants dans project_event_attendees
6. Envoie les notifications aux candidats
\`\`\`

## Process m√©tier du Planning

### Pour le client
1. **Cr√©ation projet** ‚Üí status: 'pause'
2. **Candidats acceptent** ‚Üí booking_status: 'accepted'
3. **Client d√©marre projet** ‚Üí project-orchestrator remplit project_teams
4. **Kickoff cr√©√©** ‚Üí √âv√©nement dans project_events
5. **Gestion planning** ‚Üí Peut cr√©er, modifier, supprimer des √©v√©nements

### Pour le candidat
1. **Accepte mission** ‚Üí Appara√Æt dans "En attente de d√©marrage"
2. **Client d√©marre** ‚Üí Passe en "En cours"
3. **Planning accessible** ‚Üí Voit tous les √©v√©nements du projet
4. **Peut cr√©er** ‚Üí Nouveaux √©v√©nements avec l'√©quipe
5. **Pas d'√©dition** ‚Üí Ne peut pas modifier/supprimer (client uniquement)

## Int√©gration dans PlanningPage

### S√©lection du projet
\`\`\`typescript
// Diff√©renci√© selon le type d'utilisateur
const loadProjects = async () => {
  if (userType === 'client') {
    // Client: tous ses projets actifs
    const { data } = await supabase
      .from('projects')
      .select('*')
      .eq('status', 'play');
  } else {
    // Candidat: projets o√π il est accept√©
    const { data } = await supabase
      .from('projects')
      .select('*, hr_resource_assignments!inner(*)')
      .eq('status', 'play')
      .eq('hr_resource_assignments.candidate_id', candidateId)
      .eq('hr_resource_assignments.booking_status', 'accepted');
  }
};
\`\`\`

### Chargement des membres (√âVOLUTION IMPORTANTE)
\`\`\`typescript
const selectProject = async (project) => {
  // Charge les √©v√©nements
  const { data: events } = await supabase
    .from('project_events')
    .select('*')
    .eq('project_id', project.id);
  
  // NOUVEAU: Charge les membres depuis la BDD, pas metadata
  const members = [];
  
  // R√©cup√©rer le client
  const { data: clientProfile } = await supabase
    .from('client_profiles')
    .select('*')
    .eq('id', project.owner_id);
    
  // R√©cup√©rer les candidats accept√©s
  const { data: assignments } = await supabase
    .from('hr_resource_assignments')
    .select('*, candidate_profiles(*)')
    .eq('project_id', project.id)
    .eq('booking_status', 'accepted');
    
  // Pour un candidat: ne pas s'afficher soi-m√™me
  if (userType === 'candidate') {
    assignments = assignments.filter(a => a.candidate_id !== candidateId);
  }
};
\`\`\`

## Probl√®mes r√©solus (05/09/2025)

### 1. Projet reste en "Invitation en attente"
**Probl√®me:** Cat√©gorisation incorrecte des projets accept√©s
**Solution:** V√©rification du statut projet ET booking_status

### 2. Pas d'√©v√©nement kickoff visible
**Probl√®me:** project_teams non remplie emp√™che la cr√©ation du kickoff
**Solution:** project-orchestrator doit remplir project_teams AVANT project-kickoff

### 3. Membres d'√©quipe incorrects
**Probl√®me:** Utilisation de metadata obsol√®te
**Solution:** Chargement depuis hr_resource_assignments et client_profiles

### 4. Doublons Planning/Cal
**Probl√®me:** Deux sections planning diff√©rentes
**Solution:** Suppression de l'ancien Planning, renommage Cal ‚Üí Planning

## API et Hooks

### useProjectUsers (unifi√©)
\`\`\`typescript
// src/hooks/useProjectUsers.ts
// R√©cup√®re client + candidats accept√©s d'un projet
const { users, loading } = useProjectUsers(projectId);
\`\`\`

### Notifications candidats
\`\`\`typescript
// Table: candidate_event_notifications
{
  candidate_id: string,
  project_id: string,
  event_id: string,
  title: string,
  description: string,
  event_date: timestamp,
  video_url: string,
  status: 'pending' | 'accepted' | 'declined'
}
\`\`\`

## Guide de d√©ploiement

### 1. V√©rifier les colonnes metadata
\`\`\`bash
node force-add-metadata-columns.mjs
\`\`\`

### 2. D√©ployer la fonction kickoff
\`\`\`bash
npx supabase functions deploy project-kickoff --project-ref egdelmcijszuapcpglsy
\`\`\`

### 3. Tester l'int√©gration
\`\`\`bash
node test-schedule-x-integration.mjs
\`\`\`

## Avantages Schedule-X vs Cal.com

| Aspect | Cal.com | Schedule-X |
|--------|---------|------------|
| Co√ªt | Payant (cher) | Gratuit |
| Int√©gration | Externe (iframe) | Native |
| Performance | Chargement lent | Rapide |
| Personnalisation | Limit√©e | Totale |
| D√©pendances | Serveur externe | Aucune |
| Support navigateur | Tous | Tous (avec polyfill) |

## Maintenance

### Ajout de fonctionnalit√©s
- Les √©v√©nements r√©currents peuvent √™tre ajout√©s dans SimpleScheduleCalendar
- L'export iCal peut √™tre impl√©ment√© via une edge function
- Les rappels par email via Supabase Auth hooks

### Points d'attention
- Toujours v√©rifier que metadata existe avant d'y acc√©der
- Les liens Jitsi sont g√©n√©r√©s avec le pattern: \`project-title-event-title-timestamp\`
- Les notifications candidats sont cr√©√©es uniquement pour les ressources (pas le client)`,

    'projet-messagerie': `# üí¨ Syst√®me de Messagerie

## Vue d'ensemble

Le syst√®me de messagerie est un outil de communication temps r√©el unifi√© pour tous les utilisateurs (clients et candidats). Il utilise le composant **EnhancedMessageSystem** qui offre des fonctionnalit√©s avanc√©es de chat d'√©quipe.

## Architecture technique

### Composant principal
\`\`\`typescript
EnhancedMessageSystem
‚îú‚îÄ‚îÄ Props: { projectId, userType: 'client' | 'candidate' }
‚îú‚îÄ‚îÄ Hooks utilis√©s:
‚îÇ   ‚îú‚îÄ‚îÄ useMessages() - Gestion des messages et threads
‚îÇ   ‚îú‚îÄ‚îÄ useRealtimeMessages() - Synchronisation temps r√©el
‚îÇ   ‚îú‚îÄ‚îÄ useProjectMembersForMessaging() - Membres du projet
‚îÇ   ‚îú‚îÄ‚îÄ useMessageGroups() - Groupes de discussion
‚îÇ   ‚îî‚îÄ‚îÄ useUserPresence() - Statut en ligne
‚îî‚îÄ‚îÄ Features: Chat, Groupes, Upload, Formatage
\`\`\`

## Fonctionnalit√©s principales

### 1. Chat temps r√©el
- Messages instantan√©s via Supabase Realtime
- Synchronisation automatique entre tous les participants
- Indicateur de saisie en cours
- Horodatage intelligent (aujourd'hui, hier, date)

### 2. Gestion des conversations
- **√âquipe compl√®te**: Discussion avec tous les membres
- **Messages priv√©s**: Conversations 1-√†-1
- **Groupes**: Sous-groupes de discussion personnalis√©s
- Filtrage des messages par conversation

### 3. Upload de fichiers
- Support multi-fichiers
- Synchronisation automatique avec le Drive projet
- Types support√©s: Documents, Images, Archives
- Pr√©visualisation int√©gr√©e pour images
- T√©l√©chargement direct depuis le chat

### 4. Formatage de texte
- **Gras** et *Italique*
- Markdown basique support√©
- Pr√©servation des sauts de ligne
- Emojis natifs

### 5. Pr√©sence utilisateur
- Indicateur en ligne/hors ligne
- Statut temps r√©el
- Avatar avec initiales
- Badge de r√¥le (client/candidat)

## Tables de base de donn√©es

### messages
\`\`\`sql
CREATE TABLE messages (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  thread_id UUID REFERENCES message_threads(id),
  sender_id UUID REFERENCES auth.users(id),
  recipient_id UUID, -- Pour messages priv√©s
  content TEXT,
  attachments JSONB[], -- Fichiers joints
  created_at TIMESTAMP,
  updated_at TIMESTAMP,
  is_edited BOOLEAN DEFAULT false
)
\`\`\`

### message_threads
\`\`\`sql
CREATE TABLE message_threads (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  title VARCHAR(255),
  type VARCHAR(50), -- 'general', 'private', 'group'
  participants UUID[], -- IDs des participants
  created_by UUID,
  created_at TIMESTAMP,
  updated_at TIMESTAMP
)
\`\`\`

### message_groups
\`\`\`sql
CREATE TABLE message_groups (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  name VARCHAR(255),
  members UUID[], -- IDs des membres
  created_by UUID,
  created_at TIMESTAMP
)
\`\`\`

### user_presence
\`\`\`sql
CREATE TABLE user_presence (
  user_id UUID PRIMARY KEY REFERENCES auth.users(id),
  is_online BOOLEAN DEFAULT false,
  last_seen TIMESTAMP,
  current_project_id UUID
)
\`\`\`

## Hooks personnalis√©s

### useMessages()
\`\`\`typescript
const {
  threads,           // Liste des conversations
  messages,          // Messages du thread actuel
  selectedThread,    // Thread s√©lectionn√©
  setSelectedThread, // Changer de thread
  sendMessage,       // Envoyer un message
  loading,          // √âtat de chargement
  sending           // Envoi en cours
} = useMessages(projectId);
\`\`\`

### useRealtimeMessages()
- Subscribe aux changements de messages
- G√®re les INSERT, UPDATE, DELETE
- Met √† jour l'UI en temps r√©el

### useProjectMembersForMessaging()
- Liste des membres du projet
- Infos: nom, email, r√¥le, avatar
- Filtrage par type (client/candidat)

### useMessageGroups()
- CRUD des groupes de discussion
- Gestion des membres
- Synchronisation temps r√©el

### useUserPresence()
- Statut en ligne/hors ligne
- Derni√®re activit√©
- Heartbeat automatique

## Flux de donn√©es

### Envoi de message
1. User tape le message
2. Appui sur Entr√©e ou clic Send
3. **sendMessage()** appel√©
4. Si fichiers ‚Üí **uploadMultipleFiles()**
5. INSERT dans table messages
6. **syncMessageFilesToDrive()** si fichiers
7. Broadcast Realtime √† tous les clients
8. UI mise √† jour instantan√©ment

### R√©ception de message
1. Subscription Realtime active
2. √âv√©nement INSERT re√ßu
3. **handleNewMessage()** traite le message
4. Ajout √† la liste locale
5. Notification si n√©cessaire
6. UI mise √† jour

## S√©curit√© (RLS)

### Policies messages
- SELECT: Membres du projet uniquement
- INSERT: Authentifi√© + membre du projet
- UPDATE: Auteur du message uniquement
- DELETE: Auteur ou admin projet

### Policies threads
- SELECT: Participants uniquement
- INSERT: Membres du projet
- UPDATE: Cr√©ateur du thread
- DELETE: Admin projet uniquement

## Initialisation

### Au d√©marrage du projet
\`\`\`typescript
// Appel√© par project-orchestrator
await initializeProjectMessaging({
  projectId,
  members: [...] // Tous les membres
});

// Cr√©e automatiquement:
// - Thread g√©n√©ral "√âquipe compl√®te"
// - Threads priv√©s si n√©cessaire
// - Permissions et acc√®s
\`\`\`

## Points d'attention

### Performance
- Pagination des messages (50 par page)
- Lazy loading des fichiers joints
- Cache local pour les avatars
- Debounce sur la saisie

### UX
- Auto-scroll vers le bas sur nouveau message
- Persistance du scroll position
- Draft sauvegard√© localement
- Retry automatique si √©chec envoi

### Limitations
- Taille max fichier: 10MB
- Max 10 fichiers par message
- Messages: 5000 caract√®res max
- Groupes: 20 membres max

## Diff√©rences Client vs Candidat

### Client (userType='client')
- Peut cr√©er des groupes
- Peut supprimer ses messages
- Voit tous les membres
- Peut √©pingler des messages

### Candidat (userType='candidate')
- Peut rejoindre des groupes
- Peut √©diter ses messages (30 min)
- Voit les membres actifs uniquement
- Notifications push activ√©es

## Debugging

### Logs utiles
\`\`\`typescript
// Dans la console navigateur
localStorage.setItem('debug:messages', 'true');
// Active les logs d√©taill√©s

// V√©rifier la subscription
supabase.getChannels();
// Liste les canaux actifs

// √âtat des messages
console.table(messages);
// Affiche tous les messages
\`\`\`

### Erreurs courantes
- "Thread not found" ‚Üí V√©rifier project_id
- "Unauthorized" ‚Üí RLS policies √† v√©rifier
- "Realtime disconnected" ‚Üí Reconnexion auto en 5s
- "File upload failed" ‚Üí V√©rifier quota storage

## √âvolutions pr√©vues
- R√©actions emoji sur messages
- Recherche dans l'historique
- Appels vid√©o int√©gr√©s
- Traduction automatique
- Bot IA assistant`,

    'projet-drive': `# üìÅ Syst√®me Drive

## Vue d'ensemble

Le Drive est un syst√®me de stockage et de partage de fichiers int√©gr√© √† chaque projet. Il permet √† tous les membres de l'√©quipe (client et candidats) de collaborer sur des documents, partager des ressources et organiser les livrables du projet.

## Architecture technique

### Composants (v3.0 - SimpleDriveView)
\`\`\`typescript
SimpleDriveView (ACTUEL - 05/09/2025)
- Localisation: src/components/drive/SimpleDriveView.tsx
- Technologies: React, Supabase Storage, Drag & Drop natif HTML5
- Type: Interface simplifi√©e avec fonctionnalit√©s compl√®tes

Fonctionnalit√©s principales:
‚úÖ Drag & drop depuis le syst√®me de fichiers (Finder/Explorateur)
‚úÖ Drag & drop entre dossiers internes avec gestion des conflits
‚úÖ Fil d'Ariane (breadcrumb) pour navigation claire
‚úÖ Upload avec progression incr√©mentale d√©taill√©e
‚úÖ Vignettes automatiques pour les images (jpg, png, gif)
‚úÖ Renommer et supprimer les dossiers (avec confirmation)
‚úÖ Int√©gration native Messagerie et Kanban
‚úÖ Support multi-buckets (project-files, message-files, kanban-files)
‚úÖ Filtrage automatique des fichiers .keep
‚úÖ Recherche en temps r√©el sur tous les fichiers
‚úÖ S√©lecteur de projet int√©gr√© (Client & Candidat)
‚úÖ Feedback visuel am√©lior√©:
   - Zones de drop avec bordure bleue anim√©e
   - Badge "D√©poser ici" sur les dossiers cibles
   - √âl√©ment en cours de drag semi-transparent
   - Curseurs adapt√©s (pointer/move)
   - Tooltips informatifs
‚úÖ Gestion intelligente des doublons (ajout timestamp)

// Anciens syst√®mes (deprecated)
ModernDriveExplorer - Probl√®mes avec tables inexistantes
SharedDriveView - Version basique sans drag & drop
\`\`\`

### Structure de base de donn√©es (NOUVEAU)

\`\`\`sql
-- Tables du nouveau syst√®me Drive
drives                    -- Espaces de stockage
‚îú‚îÄ‚îÄ id: UUID
‚îú‚îÄ‚îÄ name: VARCHAR(255)
‚îú‚îÄ‚îÄ type: 'project' | 'personal' | 'shared'
‚îú‚îÄ‚îÄ project_id: UUID      -- Lien avec le projet
‚îî‚îÄ‚îÄ owner_id: UUID

folders                   -- Hi√©rarchie des dossiers
‚îú‚îÄ‚îÄ id: UUID
‚îú‚îÄ‚îÄ name: VARCHAR(255)
‚îú‚îÄ‚îÄ parent_id: UUID       -- Auto-r√©f√©rence pour hi√©rarchie
‚îú‚îÄ‚îÄ drive_id: UUID
‚îú‚îÄ‚îÄ path: TEXT            -- Chemin complet optimis√©
‚îú‚îÄ‚îÄ color: VARCHAR(7)     -- Personnalisation
‚îî‚îÄ‚îÄ icon: VARCHAR(50)

files                     -- M√©tadonn√©es des fichiers
‚îú‚îÄ‚îÄ id: UUID
‚îú‚îÄ‚îÄ name: VARCHAR(255)
‚îú‚îÄ‚îÄ folder_id: UUID
‚îú‚îÄ‚îÄ drive_id: UUID
‚îú‚îÄ‚îÄ storage_path: TEXT    -- Chemin dans Supabase Storage
‚îú‚îÄ‚îÄ mime_type: VARCHAR
‚îú‚îÄ‚îÄ size_bytes: BIGINT
‚îú‚îÄ‚îÄ version: INT
‚îî‚îÄ‚îÄ tags: TEXT[]

drive_members             -- Gestion des permissions
‚îú‚îÄ‚îÄ drive_id: UUID
‚îú‚îÄ‚îÄ user_id: UUID
‚îú‚îÄ‚îÄ role: 'owner' | 'editor' | 'viewer'
‚îî‚îÄ‚îÄ permissions: JSONB {read, write, delete}
\`\`\`

### Structure de stockage physique

\`\`\`
project-files/ (bucket Supabase Storage)
‚îú‚îÄ‚îÄ drives/               # Nouveau syst√®me
‚îÇ   ‚îî‚îÄ‚îÄ {drive_id}/
‚îÇ       ‚îî‚îÄ‚îÄ {random_name}.{ext}
‚îî‚îÄ‚îÄ projects/            # Ancien syst√®me (migration progressive)
    ‚îî‚îÄ‚îÄ {project_id}/
        ‚îî‚îÄ‚îÄ ...
\`\`\`

## Permissions (RLS Policies) - Mises √† jour 31/08/2024

### Structure actuelle des politiques

Le bucket 'project-files' utilise exactement **4 politiques RLS unifi√©es** :

1. **project_members_upload** (INSERT)
2. **project_members_view** (SELECT)
3. **project_members_update** (UPDATE)
4. **project_members_delete** (DELETE)

### Conditions d'acc√®s

#### Pour les Clients
- Acc√®s complet bas√© sur : projects.owner_id correspond √† auth.uid()
- Peuvent : uploader, voir, modifier, supprimer tous les fichiers du projet

#### Pour les Candidats
- Acc√®s bas√© sur : candidate_profiles.user_id correspond √† auth.uid()
- **ET** booking_status IN ('accepted', 'book√©') ‚ö†Ô∏è IMPORTANT
- Peuvent : uploader, voir, modifier, supprimer dans le projet

### ‚ö†Ô∏è Corrections critiques appliqu√©es (31/08/2024)

#### Probl√®me r√©solu
- **Avant** : 12 politiques conflictuelles, candidats ne pouvaient pas uploader
- **Cause** : Politiques v√©rifiaient uniquement booking_status = 'accepted'
- **Solution** : Accepter booking_status IN ('accepted', 'book√©')

#### Configuration correcte des politiques
\`\`\`sql
-- Exemple de condition pour candidats (utilis√©e dans les 4 politiques)
EXISTS (
  SELECT 1 FROM hr_resource_assignments hra
  JOIN candidate_profiles cp ON cp.id = hra.candidate_id
  WHERE hra.project_id::text = SPLIT_PART(name, '/', 2)
    AND cp.user_id = auth.uid()
    AND hra.booking_status IN ('accepted', 'book√©')  -- Accepte les 2 valeurs
)
\`\`\`

### Tables impliqu√©es
\`\`\`sql
-- V√©rification des permissions candidat
hr_resource_assignments
‚îú‚îÄ‚îÄ candidate_id
‚îú‚îÄ‚îÄ project_id
‚îú‚îÄ‚îÄ booking_status ('accepted' requis)
‚îî‚îÄ‚îÄ candidate_profiles
    ‚îî‚îÄ‚îÄ user_id (lien avec auth.uid())

-- V√©rification des permissions client
projects
‚îú‚îÄ‚îÄ id
‚îú‚îÄ‚îÄ owner_id (lien avec auth.uid())
‚îî‚îÄ‚îÄ status

-- V√©rification team members
client_team_members
‚îú‚îÄ‚îÄ project_id
‚îú‚îÄ‚îÄ user_id
‚îî‚îÄ‚îÄ status ('active' requis)
\`\`\`

## Flux d'utilisation (v2.0)

### 1. Initialisation automatique
Lors de la cr√©ation du projet :
- Trigger PostgreSQL cr√©e automatiquement un drive
- Structure de dossiers par d√©faut (Documents, Images, Vid√©os, Pr√©sentations, Livrables)
- Attribution du r√¥le 'owner' au client

### 2. Synchronisation des membres
Lors de l'acceptation d'une mission :
- Trigger ajoute automatiquement le candidat aux drive_members
- R√¥le 'editor' avec permissions read/write
- Acc√®s imm√©diat aux fichiers du projet

### 3. Interface moderne
\`\`\`typescript
// Hook useDrive pour toutes les op√©rations
const {
  drives,           // Liste des drives accessibles
  selectedDrive,    // Drive actuellement s√©lectionn√©
  driveContent,     // Arbre des fichiers/dossiers
  permissions,      // Permissions de l'utilisateur
  actions: {
    createFolder,   // Cr√©er un nouveau dossier
    uploadFile,     // Uploader un fichier
    deleteItem,     // Supprimer fichier/dossier
    downloadFile,   // T√©l√©charger un fichier
    moveItem,       // D√©placer par drag & drop
  }
} = useDrive(projectId, userId);
\`\`\`

## Fonctionnalit√©s v2.0

### Interface moderne
- üéØ **Drag & Drop** : Glisser-d√©poser fichiers et dossiers
- üå≥ **Arbre interactif** : Navigation avec react-arborist
- üì§ **Upload multiple** : Zone de drop avec react-dropzone
- üîç **Recherche instantan√©e** : Filtrage en temps r√©el
- üé® **Personnalisation** : Couleurs et ic√¥nes pour dossiers
- üì± **Responsive** : Interface adaptative

### Gestion avanc√©e
- üìÅ **Multi-drives** : Un drive par projet + drives personnels
- üë• **Permissions granulaires** : Owner/Editor/Viewer
- üìä **M√©tadonn√©es riches** : Tags, versions, tailles
- üîÑ **Versioning** : Historique des modifications (optionnel)
- üóëÔ∏è **Corbeille** : Restauration possible
- üîó **Liens de partage** : URLs temporaires s√©curis√©es

### Permissions par r√¥le
- **Owner (Client)** : Tous droits (read, write, delete)
- **Editor (Candidats)** : Lecture, √©criture, pas de suppression
- **Viewer** : Lecture seule

### Limitations techniques
- Taille max par fichier: 50MB
- Types support√©s: Tous (d√©tection MIME automatique)
- Quota par drive: 10GB (configurable)
- Nombre de fichiers: Illimit√©

## Int√©gration temps r√©el

Le Drive utilise les subscriptions Supabase pour :
- Mise √† jour instantan√©e de la liste des fichiers
- Notification lors de nouveaux uploads
- Synchronisation multi-utilisateurs

\`\`\`typescript
// Subscription temps r√©el
supabase
  .channel(\`project-files-\${projectId}\`)
  .on('postgres_changes', {
    event: '*',
    schema: 'storage',
    table: 'objects',
    filter: \`bucket_id=eq.project-files\`
  }, handleFileChange)
  .subscribe();
\`\`\`

## R√©solution des probl√®mes

### Erreur "RLS policy violation" pour candidats
**Sympt√¥mes** : Candidats ne peuvent pas uploader, erreur "new row violates row-level security policy"

**Causes possibles** :
1. booking_status n'est pas dans ('accepted', 'book√©')
2. candidate_profiles.user_id ne correspond pas √† auth.uid()
3. Politiques RLS conflictuelles ou manquantes

**Solutions** :
1. V√©rifier que booking_status IN ('accepted', 'book√©')
2. V√©rifier le lien user_id entre candidate_profiles et auth.users
3. S'assurer qu'il y a exactement 4 politiques pour project-files

### Historique des corrections

#### Fix 30/08/2024 - Chemin storage
- **Changement** : "project/" ‚Üí "projects/" (ajout du 's')
- **Fichier** : SharedDriveView.tsx ligne 61
- **Impact** : Alignement avec la structure r√©elle du bucket

#### Fix 31/08/2024 - Politiques RLS (MAJEUR)
- **Probl√®me** : 12 politiques conflictuelles, candidats bloqu√©s
- **Cause** : V√©rification uniquement de booking_status = 'accepted'
- **Solution appliqu√©e** :
  - Suppression de toutes les anciennes politiques
  - Cr√©ation de 4 politiques unifi√©es acceptant ('accepted', 'book√©')
  - Test et validation avec candidat r√©el

## API Endpoints

### Storage API
\`\`\`
POST   /storage/v1/object/project-files
GET    /storage/v1/object/project-files/{path}
DELETE /storage/v1/object/project-files/{path}
\`\`\`

### Edge Functions associ√©es
- **fix-drive-rls-direct** : Applique les corrections RLS
- **storage-operations** : Op√©rations batch sur fichiers
- **init-project-storage** : Initialise la structure lors du kickoff

## Monitoring

### M√©triques cl√©s
- Taux d'upload r√©ussis/√©chou√©s
- Espace utilis√© par projet
- Temps de r√©ponse storage API
- Nombre de t√©l√©chargements

### Logs utiles
\`\`\`typescript
console.log(\`üìÅ \${userType.toUpperCase()}: Uploading to \${prefix}\`);
console.log(\`üìÅ Storage error: \${error.message}\`);
\`\`\`

## √âvolutions pr√©vues
- Versioning des fichiers
- Commentaires sur fichiers
- Pr√©visualisation Office
- Int√©gration Google Drive/Dropbox
- OCR et recherche dans documents
- Signatures √©lectroniques`,

    'db-schema': `# Sch√©ma Base de Donn√©es

## Tables Principales

### profiles (auth.users)
- id: UUID
- email: string
- first_name: string
- last_name: string
- user_type: 'client' | 'candidate' | 'admin'

### projects
- id: UUID
- title: string
- description: text
- status: 'pause' | 'attente-team' | 'play' | 'completed'
  - **pause**: Projet en attente (badge orange c√¥t√© candidat)
  - **attente-team**: Tous accept√©s, attente kickoff
  - **play**: Projet actif (seul statut permettant le time tracking)
  - **completed**: Projet termin√©
- owner_id: UUID ‚Üí profiles
- project_date: date
- due_date: date
- client_budget: number

### candidate_profiles
- id: UUID
- email: string (unique)
- first_name: string
- last_name: string
- status: 'qualification' | 'disponible' | 'en_pause' | 'indisponible'
- qualification_status: 'pending' | 'stand_by' | 'qualified' | 'rejected'
- profile_id: UUID ‚Üí hr_profiles
- seniority: 'junior' | 'confirmed' | 'senior'

### hr_resource_assignments
- id: UUID
- project_id: UUID ‚Üí projects
- profile_id: UUID ‚Üí hr_profiles
- seniority: string
- booking_status: 'draft' | 'recherche' | 'accepted' | 'declined'
- candidate_id: UUID ‚Üí candidate_profiles (CRITIQUE!)
- calculated_price: number

### project_teams (NOUVEAU)
- id: UUID
- project_id: UUID ‚Üí projects
- member_id: UUID
- member_type: 'client' | 'resource'
- email: string
- first_name: string
- last_name: string
- role: string

## Relations cl√©s
- projects ‚Üí hr_resource_assignments (1:N)
- hr_resource_assignments ‚Üí candidate_profiles (N:1)
- projects ‚Üí project_teams (1:N)`,

    'db-rls': `# RLS & S√©curit√©

## Row Level Security

### Principe g√©n√©ral
- Toutes les tables ont RLS activ√©
- Filtrage c√¥t√© serveur obligatoire
- Pas d'acc√®s direct aux donn√©es
- **IMPORTANT**: Les politiques storage.objects doivent accepter 'accepted' ET 'book√©' pour booking_status

### Politiques par r√¥le

#### Client
- SELECT/UPDATE/DELETE sur ses projets
- SELECT sur les candidats de ses projets
- INSERT/UPDATE/DELETE sur les outils de ses projets
- Acc√®s complet au storage de ses projets (via owner_id)

#### Candidat
- SELECT sur ses assignations accept√©es
- SELECT/UPDATE sur son profil
- SELECT sur les projets o√π il est assign√©
- INSERT/SELECT sur les messages de ses projets
- Acc√®s au storage SI booking_status IN ('accepted', 'book√©')

#### Admin
- Acc√®s complet (service role)

### Tables critiques
- hr_resource_assignments: Filtrage strict par candidate_id
- projects: Filtrage par owner_id ou membre
- messages: Filtrage par projet membre
- storage.objects: V√©rification booking_status pour candidats

## Politiques Storage (Corrig√©es 31/08/2024)

### Structure des politiques storage.objects

Le bucket 'project-files' a exactement 4 politiques RLS:

#### 1. project_members_upload (INSERT)
Permet l'upload aux:
- Clients (propri√©taires du projet)
- Candidats avec booking_status IN ('accepted', 'book√©')

#### 2. project_members_view (SELECT)
Permet la visualisation aux:
- Clients (propri√©taires du projet)
- Candidats avec booking_status IN ('accepted', 'book√©')

#### 3. project_members_update (UPDATE)
Permet la modification aux:
- Clients (propri√©taires du projet)
- Candidats avec booking_status IN ('accepted', 'book√©')

#### 4. project_members_delete (DELETE)
Permet la suppression aux:
- Clients (propri√©taires du projet)
- Candidats avec booking_status IN ('accepted', 'book√©')

### ‚ö†Ô∏è Points d'attention critiques

#### Probl√®me r√©solu (31/08/2024)
- **Sympt√¥me**: Candidats ne pouvaient pas uploader (erreur RLS)
- **Cause**: Les politiques ne v√©rifiaient que booking_status = 'accepted'
- **Solution**: Accepter booking_status IN ('accepted', 'book√©')

#### V√©rifications importantes
1. **candidate_profiles.user_id** DOIT correspondre √† auth.uid()
2. **booking_status** peut avoir les valeurs 'accepted' OU 'book√©'
3. Ne JAMAIS avoir de politiques conflictuelles sur le m√™me bucket

### Requ√™te type pour v√©rifier les acc√®s
\`\`\`sql
-- V√©rifier qu'un candidat a acc√®s au storage
SELECT 
    cp.first_name,
    cp.user_id,
    hra.booking_status,
    hra.project_id
FROM candidate_profiles cp
JOIN hr_resource_assignments hra ON hra.candidate_id = cp.id
WHERE cp.user_id = auth.uid()
    AND hra.booking_status IN ('accepted', 'book√©');
\`\`\``,

    'db-realtime': `# Tables Temps R√©el

## Tables avec Realtime activ√©

### Configuration
\`\`\`sql
ALTER TABLE table_name REPLICA IDENTITY FULL;
ALTER PUBLICATION supabase_realtime ADD TABLE table_name;
\`\`\`

### Tables actives
1. **projects**: Changements de statut
2. **hr_resource_assignments**: Nouvelles assignations
3. **candidate_notifications**: Nouvelles notifs
4. **messages**: Chat temps r√©el
5. **kanban_cards**: Mises √† jour t√¢ches
6. **kanban_columns**: Changements colonnes
7. **project_events**: Nouveaux √©v√©nements
8. **candidate_event_notifications**: Invitations

### Abonnements c√¥t√© client
\`\`\`typescript
supabase
  .channel('project-changes')
  .on('postgres_changes', {
    event: '*',
    schema: 'public',
    table: 'projects',
    filter: \`id=eq.\${projectId}\`
  }, handleChange)
  .subscribe()
\`\`\``,

    'db-functions': `# Edge Functions

## Functions critiques

### project-orchestrator
- Configure le projet au d√©marrage
- Cr√©e Kanban, Drive, notifications
- Remplit project_teams

### project-kickoff
- Cr√©e l'√©v√©nement kickoff
- Ajoute les attendees
- Envoie les invitations candidats

### resource-booking
- G√®re acceptation/refus candidats
- DOIT d√©finir candidate_id si accept√©
- Met √† jour booking_status

### init-project-storage
- Cr√©e la structure de dossiers
- Configure les permissions

### fix-kickoff-invitations
- Corrige les invitations manquantes
- Utilitaire de maintenance

## D√©ploiement
\`\`\`bash
npx supabase functions deploy function-name
\`\`\``,

    'api-supabase': `# API Supabase

## Configuration

### Client
\`\`\`typescript
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://egdelmcijszuapcpglsy.supabase.co',
  'anon-key'
)
\`\`\`

### Authentification
- Magic link email
- Session persistante
- Refresh token automatique

### Requ√™tes
\`\`\`typescript
// SELECT avec jointure
const { data } = await supabase
  .from('projects')
  .select(\`
    *,
    hr_resource_assignments (
      *,
      candidate_profiles (*)
    )
  \`)
  .eq('status', 'play')

// INSERT
await supabase
  .from('table')
  .insert({ ... })

// UPDATE
await supabase
  .from('table')
  .update({ ... })
  .eq('id', id)
\`\`\``,

    'api-hooks': `# React Hooks

## Hooks principaux

### useAuth()
- Gestion authentification
- user, login, logout, loading

### useUserProjects()
- Projets du client connect√©
- Filtrage automatique

### useCandidateProjectsOptimized()
- Projets actifs du candidat
- Real-time updates inclus

### useRealtimeProjectsFixed()
- Synchronisation temps r√©el
- Gestion des changements d'√©tat

### useProjectOrchestrator()
- D√©marrage de projet
- Appel des Edge Functions

### useProjectUsers()
- Membres d'un projet
- Fallback sur hr_resource_assignments

### useKanbanSupabase()
- Gestion du Kanban
- CRUD des cartes et colonnes

## Patterns
- Toujours g√©rer loading et error
- Cleanup des subscriptions
- Optimistic updates quand possible`,

    'corrections-session5': `# üîß Session 5 - Drive Modernis√© avec Drag & Drop (05/09/2025)

## Refonte compl√®te du syst√®me Drive

### Contexte
Le syst√®me Drive n√©cessitait une modernisation compl√®te pour supporter le drag & drop et am√©liorer l'exp√©rience utilisateur.

## Probl√®mes r√©solus

### 1. ‚úÖ Fichiers .keep visibles
**Probl√®me**: Les fichiers .keep cr√©√©s pour maintenir les dossiers vides √©taient visibles
**Solution**: Filtrage dans \`filteredEntries\` pour cacher ces fichiers

### 2. ‚úÖ Progression upload incorrecte
**Probl√®me**: La barre de progression passait de 0% √† 100% sans √©tapes
**Solution**: Upload incr√©mentale avec simulation de chunks et mise √† jour progressive

### 3. ‚úÖ Vignettes manquantes pour images
**Probl√®me**: Les images n'avaient pas de preview
**Solution**: 
- G√©n√©ration automatique de vignettes pour jpg, png, gif
- Affichage dans une div de 48x48px avec object-cover
- Fallback sur ic√¥ne si l'image ne charge pas

### 4. ‚úÖ Op√©rations sur dossiers manquantes
**Probl√®me**: Impossible de renommer ou supprimer les dossiers
**Solution**: 
- Ajout boutons Edit3 et Trash2 pour les dossiers non-virtuels
- Dialog de renommage avec gestion compl√®te des fichiers contenus
- Confirmation avant suppression

### 5. ‚úÖ Drag & Drop complet impl√©ment√©
**Nouvelles fonctionnalit√©s**:
- **Drag & drop depuis Finder/Explorateur**: Upload direct de fichiers
- **Drag & drop entre dossiers**: D√©placement de fichiers dans le Drive
- **Feedback visuel**: Bordure et fond color√© lors du survol
- **Multi-fichiers**: Support de s√©lection multiple

### 6. ‚úÖ Fil d'Ariane (Breadcrumb)
**Ajout**: Navigation claire avec chemin complet
- Ic√¥ne Home pour la racine
- Boutons cliquables pour chaque niveau
- Chevrons entre les √©l√©ments

## Fichiers modifi√©s
- \`src/components/drive/SimpleDriveView.tsx\` - Refonte compl√®te
- \`src/pages/ClientDashboard.tsx\` - Int√©gration Drive
- \`src/pages/CandidateDashboard.tsx\` - Int√©gration Drive

## Impact
Le Drive est maintenant une solution compl√®te et moderne pour la gestion des fichiers du projet.`,

    'corrections-unified-ids': `# üîÑ Unification des IDs - Refonte Architecture (05/09/2025)

## Migration Majeure : Unification auth.uid() et profiles.id

### üéØ Objectif
Unifier compl√®tement les identifiants pour simplifier l'architecture et r√©soudre d√©finitivement les probl√®mes de permissions RLS.

### ‚ùå Probl√®me Initial
**Architecture √† 3 niveaux d'ID** :
\`\`\`
auth.users.id (UUID Supabase Auth)
    ‚Üì (lien via email seulement)
candidate_profiles.id (UUID diff√©rent)
    ‚Üì
project_teams.member_id (r√©f√©rence candidate_profiles.id)
\`\`\`

**Cons√©quences** :
- RLS complexes et dysfonctionnels
- Jointures sur email (performance d√©grad√©e)
- Bugs r√©currents d'acc√®s aux donn√©es
- Code de contournement partout

### ‚úÖ Solution Impl√©ment√©e
**Architecture unifi√©e** :
\`\`\`
auth.users.id = candidate_profiles.id = m√™me UUID
    ‚Üì (r√©f√©rence directe)
project_teams.member_id (m√™me UUID partout)
\`\`\`

### üìã Tables Modifi√©es

#### Primary Keys chang√©es
- \`candidate_profiles\` : PK = auth.uid()
- \`client_profiles\` : PK = auth.uid()

#### Foreign Keys mises √† jour
- \`hr_resource_assignments.candidate_id\` ‚Üí auth.uid()
- \`project_teams.member_id\` ‚Üí auth.uid()
- \`projects.owner_id\` ‚Üí auth.uid()
- \`candidate_notifications.candidate_id\` ‚Üí auth.uid()
- \`time_tracking_sessions.candidate_id\` ‚Üí auth.uid()
- \`candidate_event_notifications.candidate_id\` ‚Üí auth.uid()

### üîß Code Simplifi√©

#### Avant (complexe)
\`\`\`typescript
// Recherche en 2 √©tapes
const { data: user } = await supabase.auth.getUser();
const { data: profile } = await supabase
  .from('candidate_profiles')
  .select('*')
  .eq('email', user.email)  // Jointure sur string !
  .single();
\`\`\`

#### Apr√®s (simple)
\`\`\`typescript
// Direct !
const { data: user } = await supabase.auth.getUser();
const { data: profile } = await supabase
  .from('candidate_profiles')
  .select('*')
  .eq('id', user.id)  // UUID direct
  .single();
\`\`\`

### üöÄ RLS Simplifi√©es

#### Avant (fonction complexe)
\`\`\`sql
CREATE FUNCTION is_project_team_member(project_id, user_id)
  -- Recherche email dans auth.users
  -- Puis candidate_id via email
  -- Puis v√©rification dans project_teams
  -- 3 jointures !
\`\`\`

#### Apr√®s (direct)
\`\`\`sql
CREATE POLICY "Users can view their project events"
USING (
  EXISTS (
    SELECT 1 FROM hr_resource_assignments
    WHERE project_id = project_events.project_id
    AND candidate_id = auth.uid()  -- Direct !
  )
);
\`\`\`

### üìä Impact Performance
- **-60% temps requ√™tes** : Jointures UUID vs email
- **-500 lignes de code** : Suppression des contournements
- **0 bugs RLS** : Plus de mismatch d'ID

### üîÑ Migration Ex√©cut√©e

#### Phase 1 : Pr√©paration (sans impact)
1. Backup complet des donn√©es
2. Ajout colonnes temporaires auth_user_id
3. Synchronisation des IDs via email
4. V√©rification des orphelins

#### Phase 2 : Basculement
1. Changement des Primary Keys
2. Mise √† jour des Foreign Keys
3. Suppression anciennes colonnes
4. Simplification RLS

### üìù Fichiers Impact√©s et Corrig√©s

#### Hooks (8 fichiers)
- \`useCandidateIdentity.ts\` ‚úÖ
- \`useClientIdentity.ts\` ‚úÖ
- \`useProjectUsers.ts\` ‚úÖ
- \`useRealtimeProjectsFixed.ts\` ‚úÖ
- \`useTimeTracking.ts\` ‚úÖ
- \`useCandidateProjectsOptimized.ts\` ‚úÖ
- \`useProjectOrchestrator.ts\` ‚úÖ
- \`useDrive.ts\` ‚úÖ

#### Edge Functions (5 fichiers)
- \`resource-booking/index.ts\` ‚úÖ
- \`project-orchestrator/index.ts\` ‚úÖ
- \`project-kickoff/index.ts\` ‚úÖ
- \`handle-resource-modification/index.ts\` ‚úÖ
- \`fix-project-delete/index.ts\` ‚úÖ

#### Components (15+ fichiers)
- Tous mis √† jour pour utiliser auth.uid() directement

### ‚ö†Ô∏è Breaking Changes
- Les anciennes requ√™tes bas√©es sur email ne fonctionnent plus
- Les fonctions RLS complexes ont √©t√© supprim√©es
- L'API a chang√© (mais simplifi√©e)

### ‚úÖ R√©sultat Final
- **Architecture propre** : Un seul ID universel
- **Performance optimale** : Jointures directes sur UUID
- **RLS fonctionnelles** : Permissions simples et efficaces
- **Code maintable** : Plus de contournements

### üîê S√©curit√©
- Backup complet conserv√© dans \`_backup_profiles_migration\`
- Script de rollback disponible si n√©cessaire
- Colonnes \`old_id\` conserv√©es temporairement

## Recommandations Post-Migration
1. **Monitoring** : Surveiller les logs 48h
2. **Tests** : V√©rifier tous les flux utilisateur
3. **Cleanup** : Supprimer old_id dans 30 jours
4. **Documentation** : Mettre √† jour l'API doc`,

    'corrections-session4': `# üîß Session 4 - Migration Cal.com ‚Üí Schedule-X (04/09/2025)

## Migration majeure : Remplacement de Cal.com par Schedule-X

### Contexte
Cal.com s'est r√©v√©l√© √™tre une solution payante tr√®s on√©reuse. D√©cision de migrer vers Schedule-X, une alternative open-source gratuite.

## Probl√®mes r√©solus

### 1. ‚úÖ Migration compl√®te Cal.com ‚Üí Schedule-X
**Probl√®me**: Cal.com trop cher et n√©cessitait un serveur externe
**Solution compl√®te**:
- Cr√©ation de \`SimpleScheduleCalendar\` pour remplacer l'int√©gration Cal.com
- Utilisation de date-fns au lieu de l'API Temporal
- Int√©gration native dans l'application (pas d'iframe)
- Fichiers cr√©√©s:
  - \`src/components/SimpleScheduleCalendar.tsx\`
  - \`src/components/CreateEventDialog.tsx\`
  - \`supabase/functions/_shared/schedule-x.ts\`

### 2. ‚úÖ Erreur "Temporal is not defined"
**Probl√®me**: Schedule-X utilisait l'API Temporal non support√©e par tous les navigateurs
**Solution**: 
- Cr√©ation d'un calendrier custom avec date-fns
- Vue Mois et Liste impl√©ment√©es manuellement
- Support complet de tous les navigateurs

### 3. ‚úÖ Colonnes metadata manquantes
**Probl√®me**: Edge function project-kickoff retournait erreur 500
**Cause**: Tables projects et project_events sans colonnes metadata
**Solution SQL**:
\`\`\`sql
ALTER TABLE projects ADD COLUMN metadata JSONB DEFAULT '{}';
ALTER TABLE projects ADD COLUMN planning_shared TEXT;
ALTER TABLE project_events ADD COLUMN metadata JSONB DEFAULT '{}';
\`\`\`

### 4. ‚úÖ Cr√©ation manuelle d'√©v√©nements
**Probl√®me**: Impossible de cr√©er des √©v√©nements hors kickoff automatique
**Solution**: 
- Nouveau composant \`CreateEventDialog\`
- S√©lection des membres de l'√©quipe
- G√©n√©ration automatique des liens Jitsi
- Notifications automatiques aux candidats

### 5. ‚úÖ Int√©gration page Cal
**Probl√®me**: La page Cal utilisait encore l'iframe Cal.com
**Solution**:
- Refonte compl√®te de \`CalcPage.tsx\`
- Dropdown de s√©lection de projet
- Affichage du calendrier Schedule-X
- Bouton "+ Ajouter" pour cr√©er des √©v√©nements

## Nouvelles fonctionnalit√©s ajout√©es

### Calendrier Schedule-X
- Vue mensuelle avec navigation
- Vue liste chronologique
- Indicateur visuel du prochain kickoff
- Affichage des membres de l'√©quipe
- Support des liens Jitsi Meet

### Cr√©ation d'√©v√©nements
- Dialog fullscreen avec formulaire complet
- S√©lection multiple des participants
- G√©n√©ration automatique du lien visio
- Support des lieux physiques
- Notifications temps r√©el

## Impact technique

### Composants modifi√©s
- \`src/pages/CalcPage.tsx\` : Refonte compl√®te
- \`src/components/ProjectCard.tsx\` : Indicateurs Schedule-X
- \`src/components/KickoffDialog.tsx\` : Mention Schedule-X
- \`supabase/functions/project-kickoff/index.ts\` : Support Schedule-X

### Nouveaux composants
- \`SimpleScheduleCalendar.tsx\` : Calendrier sans Temporal
- \`CreateEventDialog.tsx\` : Cr√©ation d'√©v√©nements
- \`schedule-x.ts\` : Helpers Schedule-X

### Scripts de test
- \`test-schedule-x-integration.mjs\`
- \`create-test-calendar-event.mjs\`
- \`force-add-metadata-columns.mjs\`

## Avantages de la migration

| Aspect | Avant (Cal.com) | Apr√®s (Schedule-X) |
|--------|-----------------|-------------------|
| Co√ªt | Payant (cher) | Gratuit |
| Performance | Lent (iframe) | Rapide (natif) |
| Personnalisation | Limit√©e | Totale |
| Maintenance | Externe | Interne |
| Int√©gration | Complexe | Simple |

## Notes pour l'√©quipe dev

### Points d'attention
1. Toujours v√©rifier l'existence des colonnes metadata
2. Les liens Jitsi suivent le pattern: \`project-event-timestamp\`
3. Les notifications sont cr√©√©es uniquement pour les candidats

### Commandes utiles
\`\`\`bash
# V√©rifier les colonnes
node force-add-metadata-columns.mjs

# Tester l'int√©gration
node test-schedule-x-integration.mjs

# D√©ployer project-kickoff
npx supabase functions deploy project-kickoff --project-ref egdelmcijszuapcpglsy
\`\`\`
**Solution cr√©√©e**: 
- Edge function \`reset-project-status\` pour r√©initialiser √† 'pause'
- Edge function \`repair-corrupted-projects\` pour recr√©er les √©l√©ments manquants
- Scripts de test: \`reset-projects.mjs\`, \`test-project-state.mjs\`

### 4. ‚úÖ Synchronisation realtime de la progression des ressources
**Probl√®me**: La barre de progression des ressources ne se mettait pas √† jour en temps r√©el c√¥t√© client
**Cause**: Deux fonctions de fetch distinctes non synchronis√©es dans ProjectCard
**Solution**: 
- Unification pour utiliser une seule fonction \`fetchResourceAssignments\`
- Modification du callback realtime pour appeler la bonne fonction
- Fichier: \`src/components/ProjectCard.tsx\`

### 5. ‚úÖ Interface admin - Migration tabs vers sidebar
**Changement**: Remplacement des tabs par une navigation sidebar
**Ajout**: Lien direct vers la documentation /llm
**Fichiers**: 
- Cr√©ation: \`src/components/admin/AdminSidebar.tsx\`
- Modification: \`src/pages/AdminResources.tsx\`

### 6. ‚úÖ TypeError dans /llm documentation
**Probl√®me**: "useState is not a function" emp√™chait le chargement de la page
**Cause**: Mauvaise utilisation de useState avec fonction callback
**Solution**: 
- Remplacement par useEffect pour l'initialisation
- Ajout de la section 'general' manquante
- Fichier: \`src/pages/llm/LLMDashboard.tsx\`

## Impact des corrections
- Processus de kickoff maintenant 100% fonctionnel
- Candidats re√ßoivent correctement les invitations et notifications
- Synchronisation temps r√©el am√©lior√©e pour tous les utilisateurs
- Interface admin plus ergonomique
- Documentation technique accessible directement`,

    'corrections-session3': `# üîß Session 3 - Corrections et Am√©liorations UX (03/09/2025)

## Probl√®mes r√©solus

### 1. ‚úÖ Pi√®ces jointes invisibles pour candidats
**Probl√®me**: Les fichiers attach√©s aux projets √©taient visibles c√¥t√© client mais pas c√¥t√© candidat
**Cause**: Incoh√©rence dans les chemins de stockage (utilisation de \`project/\` vs \`projects/\`)
**Solution**: 
- Uniformisation de tous les chemins vers \`projects/\` avec 's'
- Fichiers modifi√©s:
  - \`EditProjectModal.tsx\`: Correction du path de listing
  - \`CreateProjectModal.tsx\`: Correction du path d'upload
  - \`CandidateProjectsSection.tsx\`: Ajout r√©cup√©ration fichiers

### 2. ‚úÖ Progress bar √©quipe non r√©active
**Probl√®me**: La barre de progression ne se mettait pas √† jour en temps r√©el quand les candidats acceptaient
**Cause**: Calcul unique sans r√©activit√© aux changements
**Solution**: 
- Utilisation de \`useMemo\` avec d√©pendance sur \`resourceAssignments\`
- Recalcul automatique √† chaque changement
- Fichier: \`ProjectCard.tsx\`

### 3. ‚úÖ Affichage √©quipe incompl√®te
**Probl√®me**: Les candidats ne voyaient que leur propre r√¥le, pas l'√©quipe compl√®te
**Solution**: 
- Chargement de tous les membres via \`fetchFullTeam()\`
- Affichage sur une ligne pour chaque membre
- Fichier: \`CandidateProjectsSection.tsx\`

### 4. ‚úÖ CTA redondants c√¥t√© client
**Probl√®me**: 3 boutons faisaient la m√™me action (ouvrir d√©tails projet)
**Solution**: 
- Cr√©ation de 2 popups fullscreen distincts:
  - Modal constitution √©quipe
  - Modal d√©tail projet
- Refactorisation des CTA avec actions distinctes
- Fichier: \`ProjectCard.tsx\`

### 5. ‚úÖ M√©tier affichant "Non d√©fini"
**Probl√®me**: Mapping incorrect entre \`hr_profiles.name\` et \`hr_profiles.label\`
**Solution**: 
- Correction du mapping dans l'enrichissement
- Fichier: \`CandidateDashboard.tsx\`

## Composants cr√©√©s

### FullScreenModal pour constitution √©quipe
\`\`\`tsx
<FullScreenModal
  isOpen={isTeamModalOpen}
  onClose={() => setIsTeamModalOpen(false)}
  title="Constitution de l'√©quipe"
>
  // Affichage d√©taill√© de l'√©quipe avec statuts
</FullScreenModal>
\`\`\`

### FullScreenModal pour d√©tails projet
\`\`\`tsx
<FullScreenModal
  isOpen={isDetailsModalOpen}
  onClose={() => setIsDetailsModalOpen(false)}
  title={project.title}
>
  // D√©tails complets du projet
</FullScreenModal>
\`\`\`

## Am√©liorations UX

### Visuel √©quipe valid√©e
- Membres confirm√©s affich√©s en vert (\`text-green-600\`)
- Badge "Confirm√©" pour les acceptations
- Indicateur visuel clair du statut

### Formatage dates
- Remplacement de \`formatDistanceToNow\` par \`toLocaleDateString\`
- Affichage clair: "03/09/2025" au lieu de "il y a 6h" pour dates futures

### Menu kebab optimis√©
- "Voir les d√©tails" remplac√© par "Modifier l'√©quipe"
- Actions plus claires et distinctes

## ‚ö†Ô∏è Point technique important : Remont√©e des √©quipes

### Structure des donn√©es √©quipe

#### Table hr_resource_assignments (champs existants)
\`\`\`sql
-- Champs disponibles pour la requ√™te
- id, project_id, candidate_id, profile_id
- booking_status: 'draft' | 'recherche' | 'accepted' | 'declined'
- seniority: niveau requis pour le poste
- languages: array des langues requises
- expertises: array des expertises requises
- calculated_price: tarif calcul√©
-- ATTENTION: 'industries' N'EXISTE PAS dans cette table
\`\`\`

#### Table candidate_profiles (champs r√©els)
\`\`\`sql
-- Structure document√©e
- id, email, first_name, last_name
- status: 'qualification' | 'disponible' | 'en_pause' | 'indisponible'
- qualification_status, profile_id, seniority
-- ATTENTION: PAS de job_title, technical_skills, professional_info
\`\`\`

### Requ√™te correcte pour r√©cup√©rer l'√©quipe
\`\`\`typescript
const { data: assignments } = await supabase
  .from('hr_resource_assignments')
  .select(\`
    id,
    project_id,
    candidate_id,
    profile_id,
    booking_status,
    seniority,
    languages,      // Langues requises pour le poste
    expertises,     // Expertises requises pour le poste
    calculated_price,
    candidate_profiles (
      id,
      email,
      first_name,
      last_name     // Uniquement ces champs existent
    )
  \`)
  .eq('project_id', projectId);

// Enrichissement avec hr_profiles pour le label m√©tier
const { data: hrProfile } = await supabase
  .from('hr_profiles')
  .select('name')  // Le nom du m√©tier
  .eq('id', assignment.profile_id)
  .single();
\`\`\`

### Affichage des informations
- **M√©tier**: Depuis hr_profiles.name (requ√™te s√©par√©e)
- **S√©niorit√©**: hr_resource_assignments.seniority
- **Langues/Expertises**: Arrays depuis hr_resource_assignments
- **Candidat assign√©**: first_name/last_name depuis candidate_profiles (si booking_status='accepted')

### Erreurs courantes √† √©viter
1. ‚ùå Ne PAS chercher 'industries' dans hr_resource_assignments
2. ‚ùå Ne PAS chercher 'job_title' ou 'professional_info' dans candidate_profiles
3. ‚ùå Ne PAS utiliser SELECT * avec jointures (sp√©cifier les champs)
4. ‚úÖ Toujours v√©rifier l'existence des champs dans la documentation`,

    'corrections-session2': `# üîß Session 2 - Corrections Bugs Critiques (03/09/2025)

## Bugs corrig√©s

### 1. ‚úÖ Matching candidats incomplet
**Probl√®me**: CandidateDashboard ne v√©rifiait pas toutes les comp√©tences requises
**Analyse**: Le matching ne prenait en compte que profile_id et seniority
**Solution**: 
\`\`\`typescript
// Ajout v√©rification compl√®te dans CandidateDashboard.tsx
const isMatch = 
  profile_id === candidateProfile.hr_profile_id &&
  seniority === candidateProfile.seniority_level &&
  languages?.every(lang => candidateProfile.languages?.includes(lang)) &&
  expertises?.every(exp => candidateProfile.professional_info?.expertise?.includes(exp)) &&
  industries?.every(ind => candidateProfile.professional_info?.industry?.includes(ind));
\`\`\`

### 2. ‚úÖ Popup projets accept√©s (404)
**Probl√®me**: Le CTA "Acc√©der au projet" g√©n√©rait une erreur 404
**Cause**: Tentative de navigation vers une route inexistante
**Solution**: 
- Toujours ouvrir le popup fullscreen au lieu de naviguer
- Fichier: \`CandidateProjectsSection.tsx\`

### 3. ‚úÖ Suppression projet avec contrainte SQL
**Probl√®me**: Impossible de supprimer un projet (violation projects_status_check)
**Cause**: Tentative d'utiliser status='cancelled' non autoris√©
**Solution**: 
- Cr√©ation Edge Function \`fix-project-delete\`
- Utilisation de status='completed' au lieu de 'cancelled'
- Fichier: \`DeleteProjectDialog.tsx\`

## Edge Functions cr√©√©es

### fix-project-delete
\`\`\`typescript
// Suppression s√©curis√©e sans violation de contrainte
await supabase
  .from('projects')
  .update({ status: 'completed' })
  .eq('id', projectId);
\`\`\`

## Limitations identifi√©es

### Contrainte status projet
- Valeurs autoris√©es uniquement: 'pause', 'play', 'completed'
- 'cancelled', 'archived', 'attente-team' g√©n√®rent des erreurs
- **Action requise**: Migration SQL pour √©tendre l'enum`,

    'corrections-session1': `# üîß Session 1 - Configuration Design System (02/09/2025)

## Impl√©mentations majeures

### 1. ‚úÖ Syst√®me de design premium
**Composants cr√©√©s**:
- IntroOverlay: Animation d'introduction avec logo
- HeroLyniqFixed: Hero section avec vid√©o background
- HeroLyniqBlend: Version alternative avec blend modes

### 2. ‚úÖ Effet Division (Chromatic Aberration)
**Implementation**: Superposition de calques cyan/magenta avec d√©calages
**Utilisation**: Titre principal homepage pour effet moderne

### 3. ‚úÖ Configuration Tailwind √©tendue
**Ajouts**:
- Palette couleurs premium (black, near-black, accent violet)
- Typographie responsive avec clamp()
- Shadows et gradients personnalis√©s

### 4. ‚úÖ FullScreenModal unifi√©
**Probl√®me**: Incoh√©rence UX entre diff√©rents modals
**Solution**: 
- Cr√©ation composant FullScreenModal r√©utilisable
- Application √† tous les popups (suppression, archive, d√©tails)
- Animation Framer Motion coh√©rente

## Fichiers modifi√©s

- \`tailwind.config.ts\`: Configuration compl√®te design system
- \`src/index.css\`: Classes utilitaires premium
- \`src/components/ui/intro-overlay.tsx\`: Animation intro
- \`src/components/ui/hero-lyniq-fixed.tsx\`: Hero avec vid√©o
- \`src/components/DeleteProjectDialog.tsx\`: Utilisation FullScreenModal
- \`src/components/ui/fullscreen-modal.tsx\`: Modal unifi√©`,

    'wiki-overview': `# üìö Wiki Collaboratif - Vue d'ensemble

## üéØ Objectif
Le syst√®me Wiki a √©t√© con√ßu pour permettre aux √©quipes projet de cr√©er et partager de la documentation collaborative, avec un syst√®me de permissions granulaire et une synchronisation en temps r√©el.

## ‚ú® Fonctionnalit√©s principales

### 1. Pages publiques/priv√©es
- **Pages priv√©es** : Visibles uniquement par leur cr√©ateur
- **Pages publiques** : Visibles par toute l'√©quipe du projet
- **Basculement en temps r√©el** : Les changements de visibilit√© sont instantan√©s pour tous

### 2. Organisation par membre
- Navigation group√©e par auteur
- Avatar et badge "Moi" pour l'utilisateur courant
- Compteur de pages par auteur
- Auto-expansion de sa propre section

### 3. Syst√®me de commentaires
- **Uniquement sur pages publiques** : Favorise la collaboration
- **Commentaires imbriqu√©s** : Support des r√©ponses en cascade
- **Gestion compl√®te** : √âdition, suppression, r√©solution
- **Temps r√©el** : Mise √† jour instantan√©e pour tous

### 4. √âditeur riche BlockNote
- Formatage WYSIWYG complet
- Support images et m√©dias
- Blocs de code avec coloration syntaxique
- Tableaux, listes, citations
- Sauvegarde automatique

### 5. Arborescence de pages
- Support pages parent/enfant
- Navigation hi√©rarchique
- Ordre d'affichage personnalisable
- Ic√¥nes personnalis√©es par page

## üîê Acc√®s et permissions

### Pour les clients
- Acc√®s complet au wiki du projet
- Peut cr√©er/√©diter/supprimer toutes ses pages
- Voit toutes les pages publiques de l'√©quipe

### Pour les candidats
- Acc√®s au wiki des projets actifs uniquement
- Peut cr√©er/√©diter/supprimer ses propres pages
- Voit les pages publiques de l'√©quipe

## üì± Interface utilisateur

### Mode normal
- √âditeur int√©gr√© dans le dashboard
- Navigation lat√©rale avec arborescence
- Panneau de commentaires r√©tractable

### Mode plein √©cran
- Expansion en place (pas de popup)
- Masquage navigation et header
- Focus total sur le contenu
- Retour simple avec Escape`,

    'wiki-architecture': `# üèóÔ∏è Architecture technique du Wiki

## üìä Structure base de donn√©es

### Table wiki_pages
\`\`\`sql
CREATE TABLE wiki_pages (
  id UUID PRIMARY KEY,
  project_id UUID REFERENCES projects(id),
  title TEXT NOT NULL,
  content TEXT,
  author_id UUID REFERENCES auth.users(id),
  parent_id UUID REFERENCES wiki_pages(id),
  is_public BOOLEAN DEFAULT false,
  display_order INTEGER DEFAULT 0,
  slug TEXT,
  icon TEXT DEFAULT 'FileText',
  version INTEGER DEFAULT 1,
  original_title TEXT,
  created_at TIMESTAMPTZ,
  updated_at TIMESTAMPTZ
);
\`\`\`

### Table wiki_comments
\`\`\`sql
CREATE TABLE wiki_comments (
  id UUID PRIMARY KEY,
  page_id UUID REFERENCES wiki_pages(id),
  author_id UUID REFERENCES auth.users(id),
  parent_comment_id UUID REFERENCES wiki_comments(id),
  content TEXT NOT NULL,
  is_resolved BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ,
  updated_at TIMESTAMPTZ
);
\`\`\`

## üß© Composants React

### WikiView
**Fichier** : \`src/components/wiki/WikiView.tsx\`
- Composant principal orchestrateur
- G√®re l'√©tat global du wiki
- Synchronisation realtime
- Mode plein √©cran int√©gr√©

### WikiEditor
**Fichier** : \`src/components/wiki/WikiEditor.tsx\`
- Wrapper BlockNote editor
- Gestion sauvegarde automatique
- Fix du bug useState dispatcher
- Conversion HTML lossy

### WikiNavigation
**Fichier** : \`src/components/wiki/WikiNavigation.tsx\`
- Arborescence des pages
- Groupement par auteur
- Indicateurs visuels (public/priv√©)
- Gestion expansion/collapse

### WikiComments
**Fichier** : \`src/components/wiki/WikiComments.tsx\`
- Syst√®me complet de commentaires
- R√©ponses imbriqu√©es
- Actions CRUD compl√®tes
- Synchronisation realtime

## üîÑ Flux de donn√©es

### Chargement initial
1. R√©cup√©ration pages du projet
2. Filtrage selon permissions
3. Construction arborescence
4. Chargement profils auteurs
5. Activation subscriptions realtime

### Cr√©ation/√âdition page
1. Validation permissions
2. Sauvegarde Supabase
3. Broadcast realtime
4. Mise √† jour locale optimiste
5. Synchronisation autres clients

### Changement visibilit√©
1. Toggle is_public
2. Trigger PostgreSQL
3. Notification pg_notify
4. Broadcast WebSocket
5. Rafra√Æchissement navigation`,

    'wiki-permissions': `# üîê Syst√®me de permissions du Wiki

## üõ°Ô∏è Row Level Security (RLS)

### Politique de lecture
\`\`\`sql
CREATE POLICY "users_view_wiki_pages"
ON wiki_pages FOR SELECT
USING (
  -- Page publique OU auteur
  (is_public = true OR author_id = auth.uid())
  AND EXISTS (
    SELECT 1 FROM projects p
    WHERE p.id = wiki_pages.project_id
    AND (
      -- Client du projet
      p.owner_id = auth.uid()
      -- OU candidat accept√©
      OR EXISTS (
        SELECT 1 FROM hr_resource_assignments
        WHERE project_id = p.id
        AND candidate_id = auth.uid()
        AND booking_status = 'accepted'
      )
    )
  )
);
\`\`\`

### Politique de cr√©ation
\`\`\`sql
CREATE POLICY "users_create_wiki_pages"
ON wiki_pages FOR INSERT
WITH CHECK (
  author_id = auth.uid()
  AND EXISTS (
    -- V√©rification appartenance projet
    SELECT 1 FROM projects p
    WHERE p.id = project_id
    AND (p.owner_id = auth.uid() OR /* candidat accept√© */)
  )
);
\`\`\`

### Politique de modification
\`\`\`sql
CREATE POLICY "users_update_own_pages"
ON wiki_pages FOR UPDATE
USING (author_id = auth.uid())
WITH CHECK (author_id = auth.uid());
\`\`\`

## üîç Filtrage c√¥t√© client

### Visibilit√© des pages
\`\`\`typescript
// Dans WikiView.tsx
const visiblePages = pages.filter(page => {
  return page.is_public || page.author_id === userId;
});
\`\`\`

### Pages par auteur
\`\`\`typescript
// Dans WikiNavigation.tsx
const groupPagesByAuthor = () => {
  const authorsMap = new Map();
  pages.forEach(page => {
    // Groupement avec tri utilisateur actuel en premier
  });
  return authorsArray.sort((a, b) => {
    if (a.is_current_user) return -1;
    if (b.is_current_user) return 1;
    return a.name.localeCompare(b.name);
  });
};
\`\`\`

## üö® Points d'attention s√©curit√©

### 1. Double v√©rification
- RLS c√¥t√© serveur (source de v√©rit√©)
- Filtrage client (UX uniquement)
- Jamais de donn√©es sensibles c√¥t√© client

### 2. Permissions commentaires
- Cr√©ation uniquement sur pages publiques
- Modification/suppression par auteur uniquement
- Pas de commentaires sur pages priv√©es

### 3. Isolation projets
- Aucune fuite entre projets
- V√©rification syst√©matique project_id
- Candidats uniquement sur projets accept√©s`,

    'wiki-realtime': `# ‚ö° Synchronisation temps r√©el du Wiki

## üîå Configuration Supabase Realtime

### Activation tables
\`\`\`sql
-- Activer realtime pour les tables
ALTER PUBLICATION supabase_realtime ADD TABLE wiki_pages;
ALTER PUBLICATION supabase_realtime ADD TABLE wiki_comments;
\`\`\`

### Triggers PostgreSQL
\`\`\`sql
-- Trigger updated_at
CREATE TRIGGER update_wiki_pages_updated_at_trigger
BEFORE UPDATE ON wiki_pages
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();

-- Trigger notification visibilit√©
CREATE TRIGGER wiki_visibility_change_trigger
AFTER UPDATE ON wiki_pages
FOR EACH ROW
WHEN (OLD.is_public IS DISTINCT FROM NEW.is_public)
EXECUTE FUNCTION notify_wiki_visibility_change();
\`\`\`

## üì° Subscriptions WebSocket

### Subscription pages
\`\`\`typescript
// Dans WikiView.tsx
const subscribeToChanges = () => {
  const channel = supabase
    .channel(\`wiki-pages-\${projectId}\`)
    .on('postgres_changes', {
      event: '*',
      schema: 'public',
      table: 'wiki_pages',
      filter: \`project_id=eq.\${projectId}\`
    }, handlePageChange)
    .subscribe();
};
\`\`\`

### Subscription commentaires
\`\`\`typescript
// Dans WikiComments.tsx
const subscribeToComments = () => {
  const channel = supabase
    .channel(\`wiki-comments-\${pageId}\`)
    .on('postgres_changes', {
      event: '*',
      schema: 'public',
      table: 'wiki_comments',
      filter: \`page_id=eq.\${pageId}\`
    }, loadComments)
    .subscribe();
};
\`\`\`

## üîÑ Gestion des √©v√©nements

### Types d'√©v√©nements
- **INSERT** : Nouvelle page/commentaire
- **UPDATE** : Modification contenu/visibilit√©
- **DELETE** : Suppression page/commentaire

### Traitement √©v√©nements
\`\`\`typescript
const handlePageChange = (payload) => {
  const { eventType, new: newRecord, old: oldRecord } = payload;
  
  switch(eventType) {
    case 'INSERT':
      // Ajouter nouvelle page si visible
      if (newRecord.is_public || newRecord.author_id === userId) {
        addPageToList(newRecord);
      }
      break;
      
    case 'UPDATE':
      // G√©rer changement visibilit√©
      if (oldRecord.is_public !== newRecord.is_public) {
        if (newRecord.is_public || newRecord.author_id === userId) {
          updatePageInList(newRecord);
        } else {
          removePageFromList(newRecord.id);
        }
      }
      break;
      
    case 'DELETE':
      removePageFromList(oldRecord.id);
      break;
  }
};
\`\`\`

## üéØ Optimisations

### Debounce sauvegarde
\`\`\`typescript
const debouncedSave = useMemo(
  () => debounce(async (content) => {
    await updatePage(content);
  }, 1000),
  [pageId]
);
\`\`\`

### Mise √† jour optimiste
\`\`\`typescript
// Mise √† jour locale imm√©diate
setLocalContent(newContent);
// Sauvegarde async
debouncedSave(newContent);
\`\`\`

### Cleanup subscriptions
\`\`\`typescript
useEffect(() => {
  const channel = subscribeToChanges();
  return () => {
    supabase.removeChannel(channel);
  };
}, [projectId]);
\`\`\``,

    'wiki-comments': `# üí¨ Syst√®me de commentaires du Wiki

## üé® Interface utilisateur

### Panneau r√©tractable
- Ferm√© par d√©faut pour maximiser l'espace
- Bouton toggle avec compteur de commentaires
- Animation smooth d'ouverture/fermeture
- Largeur fixe de 400px en mode ouvert

### Affichage commentaires
- Avatar avec initiale de l'auteur
- Nom et temps relatif (ex: "il y a 2 heures")
- Badge "R√©solu" pour commentaires r√©solus
- Actions contextuelles (√©diter, supprimer, r√©soudre)

### R√©ponses imbriqu√©es
- Indentation visuelle (ml-8)
- Auto-expansion si r√©ponses pr√©sentes
- Bouton expand/collapse en bas √† gauche
- Compteur de r√©ponses visible

## üîß Impl√©mentation technique

### Structure commentaire
\`\`\`typescript
interface Comment {
  id: string;
  page_id: string;
  author_id: string;
  author_name?: string;
  parent_comment_id: string | null;
  content: string;
  is_resolved: boolean;
  created_at: string;
  updated_at: string;
  replies?: Comment[];
}
\`\`\`

### Construction arbre commentaires
\`\`\`typescript
const loadComments = async () => {
  // R√©cup√©ration √† plat
  const { data } = await supabase
    .from('wiki_comments_with_authors')
    .select('*')
    .eq('page_id', pageId);
    
  // Construction arbre
  const commentsMap = new Map();
  const rootComments = [];
  
  data.forEach(comment => {
    commentsMap.set(comment.id, { ...comment, replies: [] });
  });
  
  data.forEach(comment => {
    if (comment.parent_comment_id) {
      const parent = commentsMap.get(comment.parent_comment_id);
      parent.replies.push(commentsMap.get(comment.id));
    } else {
      rootComments.push(commentsMap.get(comment.id));
    }
  });
  
  setComments(rootComments);
};
\`\`\`

### Actions disponibles

#### Cr√©ation
\`\`\`typescript
const addComment = async () => {
  await supabase
    .from('wiki_comments')
    .insert({
      page_id: pageId,
      author_id: currentUserId,
      parent_comment_id: replyTo,
      content: newComment.trim(),
    });
};
\`\`\`

#### Modification
\`\`\`typescript
const updateComment = async (commentId) => {
  await supabase
    .from('wiki_comments')
    .update({ content: editingContent })
    .eq('id', commentId);
};
\`\`\`

#### R√©solution
\`\`\`typescript
const toggleResolve = async (commentId, currentStatus) => {
  await supabase
    .from('wiki_comments')
    .update({ is_resolved: !currentStatus })
    .eq('id', commentId);
};
\`\`\`

## üìã R√®gles m√©tier

### Qui peut commenter ?
- ‚úÖ Membres de l'√©quipe projet
- ‚úÖ Sur pages publiques uniquement
- ‚ùå Pas sur pages priv√©es
- ‚ùå Pas les externes au projet

### Qui peut modifier ?
- ‚úÖ Auteur du commentaire uniquement
- ‚úÖ √âdition du contenu
- ‚úÖ Marquage comme r√©solu
- ‚úÖ Suppression

### Notifications
- Pas de syst√®me de notification email
- Mise √† jour temps r√©el via WebSocket
- Compteur visible sur bouton toggle`,

    'wiki-navigation': `# üß≠ Navigation et organisation du Wiki

## üìÇ Structure hi√©rarchique

### Organisation par auteur
- Groupement principal par membre de l'√©quipe
- Tri : utilisateur actuel en premier
- Avatar + nom + compteur de pages
- Badge "Moi" pour identification rapide

### Arborescence pages
- Support parent/enfant illimit√©
- Ic√¥nes personnalisables (Lucide React)
- Indicateurs visuels :
  - üåê Globe vert = Public
  - üîí Cadenas orange = Priv√©
  - üí¨ Bulle = Contient commentaires
- Ordre d'affichage personnalisable

## üéØ Composant WikiNavigation

### Props interface
\`\`\`typescript
interface WikiNavigationProps {
  pages: WikiPage[];
  selectedPageId: string | null;
  currentUserId: string | null;
  onPageSelect: (page: WikiPage) => void;
  userProfiles: Map<string, string>;
}
\`\`\`

### Algorithme de tri
\`\`\`typescript
// Tri des auteurs
authors.sort((a, b) => {
  // Utilisateur actuel toujours en premier
  if (a.is_current_user) return -1;
  if (b.is_current_user) return 1;
  // Puis par nom alphab√©tique
  return a.name.localeCompare(b.name);
});

// Tri des pages
pages.sort((a, b) => {
  // D'abord par ordre d√©fini
  if (a.display_order !== undefined && b.display_order !== undefined) {
    return a.display_order - b.display_order;
  }
  // Puis alphab√©tique
  return a.title.localeCompare(b.title);
});
\`\`\`

### Construction de l'arbre
\`\`\`typescript
const buildPageTree = (flatPages) => {
  const pageMap = new Map();
  const rootPages = [];
  
  // Map toutes les pages
  flatPages.forEach(page => {
    pageMap.set(page.id, { ...page, children: [] });
  });
  
  // Construire relations parent/enfant
  flatPages.forEach(page => {
    if (page.parent_id && pageMap.has(page.parent_id)) {
      const parent = pageMap.get(page.parent_id);
      parent.children.push(pageMap.get(page.id));
    } else {
      rootPages.push(pageMap.get(page.id));
    }
  });
  
  return rootPages;
};
\`\`\`

## üé® Styles et interactions

### √âtats visuels
- **Hover** : Background accent l√©ger
- **S√©lectionn√©** : Background primary + texte blanc
- **Expand√©** : Chevron vers le bas
- **Collapsed** : Chevron vers la droite

### Animations
- Transition smooth sur hover (150ms)
- Expansion/collapse instantan√©
- Auto-scroll vers page s√©lectionn√©e

### Responsive
- Largeur fixe sidebar (320px)
- ScrollArea pour listes longues
- Truncate pour titres trop longs`,

    'wiki-editor': `# ‚úèÔ∏è √âditeur BlockNote

## üéØ Int√©gration BlockNote

### Configuration de base
\`\`\`typescript
import { BlockNoteEditor } from "@blocknote/core";
import { useCreateBlockNote } from "@blocknote/react";

const editor = useCreateBlockNote({
  initialContent: content ? JSON.parse(content) : undefined,
});
\`\`\`

### Fix du bug useState dispatcher
**Probl√®me** : "can't access property 'useState', dispatcher is null"
**Cause** : onChange appel√© pendant le rendu React
**Solution** : Isolation dans useEffect

\`\`\`typescript
// ‚ùå Ancien code probl√©matique
editor.onChange(() => {
  editor.blocksToHTMLLossy(editor.document).then(onChange);
});

// ‚úÖ Code corrig√©
useEffect(() => {
  const handleChange = () => {
    editor.blocksToHTMLLossy(editor.document)
      .then((html) => onChange(html))
      .catch((error) => console.error('Erreur conversion:', error));
  };
  editor.onChange(handleChange);
}, [editor, onChange]);
\`\`\`

## üìù Fonctionnalit√©s support√©es

### Formatage texte
- **Gras**, *italique*, ~~barr√©~~
- Titres H1 ‚Üí H6
- Listes √† puces et num√©rot√©es
- Citations (blockquote)
- Code inline et blocs

### Blocs avanc√©s
- Tables avec √©dition cellules
- Images avec upload/URL
- Vid√©os embed
- Fichiers attach√©s
- S√©parateurs horizontaux

### Raccourcis clavier
- **Cmd/Ctrl + B** : Gras
- **Cmd/Ctrl + I** : Italique
- **Cmd/Ctrl + Z** : Annuler
- **/** : Menu slash commands
- **Tab** : Indenter liste
- **Shift + Tab** : D√©sindenter

## üîÑ Sauvegarde automatique

### Debounce strategy
\`\`\`typescript
const debouncedSave = useMemo(
  () => debounce(async (html: string) => {
    try {
      await supabase
        .from('wiki_pages')
        .update({ content: html })
        .eq('id', pageId);
    } catch (error) {
      toast.error('Erreur sauvegarde');
    }
  }, 1000),
  [pageId]
);
\`\`\`

### Indicateur visuel
- Point vert : Sauvegard√©
- Point orange : Modification en cours
- Point rouge : Erreur sauvegarde

## üé® Personnalisation UI

### Theme BlockNote
\`\`\`css
.bn-editor {
  font-family: Inter, system-ui;
  min-height: 400px;
}

.bn-block-content {
  line-height: 1.6;
}

.bn-inline-code {
  background: rgb(243 244 246);
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
}
\`\`\`

### Mode plein √©cran
- Hauteur : calc(100vh - header)
- Largeur : 100% container
- Focus trap activ√©
- Escape pour sortir

## üöÄ Optimisations performances

### Lazy loading
- Chargement BlockNote uniquement si page s√©lectionn√©e
- Import dynamique des extensions

### Memoization
- useCallback pour onChange
- useMemo pour editor instance
- React.memo sur WikiEditor

### Cleanup
\`\`\`typescript
useEffect(() => {
  return () => {
    // Cleanup editor subscriptions
    editor.removeAllListeners();
  };
}, [editor]);
\`\`\``,

    'payment-system': `# üí≥ Syst√®me de Paiement Stripe

## üìù Vue d'ensemble

Le syst√®me de paiement int√©gr√© permet aux clients de g√©rer leurs cr√©dits pour cr√©er des projets et booker des √©quipes.

## üèóÔ∏è Architecture

### Tables de base de donn√©es

#### client_credits
\`\`\`sql
CREATE TABLE public.client_credits (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id),
  balance_cents INTEGER NOT NULL DEFAULT 0,
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id)
);
\`\`\`

#### payment_history
\`\`\`sql
CREATE TABLE public.payment_history (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id),
  amount_cents INTEGER NOT NULL,
  stripe_payment_id TEXT,
  payment_status TEXT DEFAULT 'pending',
  payment_method TEXT DEFAULT 'stripe',
  invoice_url TEXT,
  payment_date TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
\`\`\`

## üí∞ Gestion des cr√©dits

### Hook useClientCredits
\`\`\`typescript
import { useClientCredits } from '@/hooks/useClientCredits';

const { 
  balance,           // Solde en centimes
  loading,          // √âtat de chargement
  hasMinimumCredits, // V√©rification du minimum
  formatBalance,     // Format pour affichage (EUR)
  checkCreditsForAction, // V√©rifier avant action
  deductCredits,    // D√©duire des cr√©dits
  refreshBalance    // Rafra√Æchir le solde
} = useClientCredits();
\`\`\`

### V√©rification avant action
\`\`\`typescript
// Avant de d√©marrer un projet
const creditCheck = checkCreditsForAction('D√©marrer un projet', 5000);
if (!creditCheck.success) {
  toast.error(creditCheck.message);
  setShowPaymentModal(true);
  return;
}
\`\`\`

## üí≥ Int√©gration Stripe

### Configuration
\`\`\`typescript
// Cl√©s Stripe (test pour le moment)
const STRIPE_PUBLISHABLE_KEY = 'pk_test_...'
const STRIPE_SECRET_KEY = 'sk_test_...' // C√¥t√© serveur uniquement
\`\`\`

### Composant StripePaymentModal
\`\`\`typescript
<StripePaymentModal
  isOpen={showPaymentModal}
  onClose={() => setShowPaymentModal(false)}
  onSuccess={() => {
    toast.success('Cr√©dits ajout√©s');
    refreshBalance();
  }}
  minimumAmount={50} // Minimum 50‚Ç¨
/>
\`\`\`

## üìä Historique des paiements

### Page d√©di√©e dans les param√®tres
- Onglet "Mes paiements" dans ClientSettings
- Affichage du solde actuel
- Liste chronologique des paiements
- T√©l√©chargement de factures HTML

### Composant PaymentHistory
\`\`\`typescript
<PaymentHistory />
// Affiche:
// - Solde actuel avec bouton d'ajout
// - Historique complet
// - Boutons de t√©l√©chargement facture
\`\`\`

## üîê S√©curit√©

### RLS Policies
\`\`\`sql
-- Clients voient uniquement leurs cr√©dits
CREATE POLICY "Users can view own credits" 
ON client_credits FOR SELECT
USING (auth.uid() = user_id);

-- Clients voient uniquement leur historique
CREATE POLICY "Users can view own payment history"
ON payment_history FOR SELECT
USING (auth.uid() = user_id);
\`\`\`

## üöÄ Edge Functions

### manage-client-credits
Actions disponibles:
- **check_balance**: V√©rifier le solde
- **add_credits**: Ajouter des cr√©dits (avec Stripe)
- **deduct_credits**: D√©duire des cr√©dits

\`\`\`typescript
const { data } = await supabase.functions.invoke('manage-client-credits', {
  body: {
    action: 'add_credits',
    userId: user.id,
    amount: 5000, // En centimes
    paymentMethodId: 'pm_card_visa'
  }
});
\`\`\`

## üìù Workflow complet

### 1. Client veut cr√©er un projet
1. Clic sur "Booker une √©quipe" ou "D√©marrer"
2. V√©rification des cr√©dits (minimum 50‚Ç¨)
3. Si insuffisant ‚Üí Popup de paiement
4. Paiement via Stripe
5. Cr√©dits ajout√©s au compte
6. Action autoris√©e

### 2. Ajout de cr√©dits
1. Client va dans Param√®tres ‚Üí Mes paiements
2. Clic sur "Ajouter des cr√©dits"
3. Saisie du montant (minimum 50‚Ç¨)
4. Saisie des informations de carte
5. Paiement s√©curis√© via Stripe
6. Mise √† jour instantan√©e du solde
7. Enregistrement dans l'historique

### 3. T√©l√©chargement de facture
1. Client acc√®de √† l'historique
2. Clic sur l'ic√¥ne de t√©l√©chargement
3. G√©n√©ration de la facture HTML
4. T√©l√©chargement automatique

## ‚ö†Ô∏è Points importants

### Montants minimums
- D√©p√¥t minimum: 50‚Ç¨
- Projet n√©cessite: 50‚Ç¨ minimum

### Format des montants
- Base de donn√©es: Centimes (INTEGER)
- Affichage: Euros (formatBalance())
- Stripe: Centimes

### Temps r√©el
- Solde mis √† jour en temps r√©el
- Subscription Supabase Realtime
- Refresh automatique apr√®s paiement

## üîß Maintenance

### V√©rifier les paiements
\`\`\`sql
SELECT * FROM payment_history 
WHERE user_id = '[USER_ID]'
ORDER BY payment_date DESC;
\`\`\`

### V√©rifier le solde
\`\`\`sql
SELECT * FROM client_credits
WHERE user_id = '[USER_ID]';
\`\`\`

### Ajouter des cr√©dits manuellement (admin)
\`\`\`sql
UPDATE client_credits
SET balance_cents = balance_cents + 5000
WHERE user_id = '[USER_ID]';
\`\`\``
  });

  const getContent = () => {
    return content[activeSection as keyof typeof content] || content.general;
  };

  const getSectionTitle = () => {
    // Chercher dans tous les menus
    for (const item of menuItems) {
      if (item.id === activeSection) return item.label;
      if (item.children) {
        const child = item.children.find(c => c.id === activeSection);
        if (child) return child.label;
      }
    }
    return 'Documentation';
  };

  const handleSave = () => {
    localStorage.setItem('llm_documentation', JSON.stringify(content));
    toast({
      title: "Documentation sauvegard√©e",
      description: "Les modifications ont √©t√© enregistr√©es localement"
    });
    setIsEditing(false);
  };

  const handleContentChange = (value: string) => {
    setContent(prev => ({
      ...prev,
      [activeSection]: value
    }));
  };

  // Charger depuis localStorage
  useEffect(() => {
    const saved = localStorage.getItem('llm_documentation');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setContent(prev => ({ ...prev, ...parsed }));
      } catch (e) {
        console.error('Error loading saved documentation:', e);
      }
    }
  }, []);

  const renderMenuItem = (item: MenuItem, level = 0) => {
    const hasChildren = item.children && item.children.length > 0;
    const isExpanded = expandedSections.has(item.id);
    const Icon = item.icon;

    return (
      <div key={item.id}>
        <button
          onClick={() => {
            if (hasChildren) {
              toggleSection(item.id);
            } else {
              setActiveSection(item.id);
            }
          }}
          className={cn(
            "w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md transition-colors",
            "text-gray-300 hover:bg-gray-700 hover:text-white",
            activeSection === item.id && "bg-blue-600 text-white font-medium",
            level > 0 && "pl-8"
          )}
        >
          {hasChildren && (
            <span className="w-4">
              {isExpanded ? <ChevronDown className="w-4 h-4" /> : <ChevronRight className="w-4 h-4" />}
            </span>
          )}
          {Icon && <Icon className="w-4 h-4 text-gray-400" />}
          <span className="flex-1 text-left">{item.label}</span>
        </button>
        
        {hasChildren && isExpanded && (
          <div className="ml-2">
            {item.children!.map(child => renderMenuItem(child, level + 1))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="flex h-screen bg-gray-900">
      {/* Sidebar */}
      <div className="w-80 bg-gray-800 border-r border-gray-700">
        <div className="p-6 border-b border-gray-700">
          <h1 className="text-2xl font-bold text-white flex items-center gap-2">
            <FileText className="w-6 h-6 text-blue-400" />
            Documentation LLM
          </h1>
          <p className="text-sm text-gray-400 mt-2">
            R√©f√©rence technique pour l'IA
          </p>
        </div>
        
        <ScrollArea className="h-[calc(100vh-120px)]">
          <div className="p-4 space-y-1">
            {menuItems.map(item => renderMenuItem(item))}
          </div>
        </ScrollArea>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-auto bg-gray-50">
        <div className="max-w-5xl mx-auto p-8">
          <Alert className="mb-6 bg-blue-50 border-blue-200">
            <AlertCircle className="h-4 w-4 text-blue-600" />
            <AlertDescription className="text-gray-700">
              Cette documentation est utilis√©e comme r√©f√©rence par l'IA pour comprendre l'architecture du projet.
              Les sections marqu√©es üî• contiennent les derni√®res mises √† jour importantes.
            </AlertDescription>
          </Alert>

          <Card className="bg-white shadow-lg">
            <CardHeader>
              <div className="flex justify-between items-center">
                <div>
                  <CardTitle className="text-2xl text-gray-900">{getSectionTitle()}</CardTitle>
                  <CardDescription className="text-gray-600">
                    {activeSection === 'projet-demarrage' && 
                      "Documentation technique compl√®te du processus de d√©marrage de projet"
                    }
                    {activeSection === 'general' && 
                      "Vue d'ensemble de l'architecture et des conventions"
                    }
                    {activeSection.startsWith('candidat') && 
                      "Documentation du flux et processus candidat"
                    }
                    {activeSection.startsWith('db') && 
                      "Structure et configuration de la base de donn√©es"
                    }
                  </CardDescription>
                </div>
                <div className="flex gap-2">
                  {/* Hide edit button for design system sections */}
                  {!activeSection.startsWith('design-') && (
                    isEditing ? (
                      <>
                        <Button onClick={handleSave} size="sm">
                          <Save className="w-4 h-4 mr-2" />
                          Sauvegarder
                        </Button>
                        <Button onClick={() => setIsEditing(false)} variant="outline" size="sm">
                          Annuler
                        </Button>
                      </>
                    ) : (
                      <Button onClick={() => setIsEditing(true)} variant="outline" size="sm">
                        <FileText className="w-4 h-4 mr-2" />
                        √âditer
                      </Button>
                    )
                  )}
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {/* Render React components for design system sections */}
              {activeSection === 'design-modal' ? (
                <Suspense fallback={<div className="flex items-center justify-center p-8">Chargement...</div>}>
                  <DesignSystemModal />
                </Suspense>
              ) : isEditing ? (
                <Textarea
                  value={getContent()}
                  onChange={(e) => handleContentChange(e.target.value)}
                  className="min-h-[600px] font-mono text-sm bg-gray-50 text-gray-900 border-gray-300"
                  placeholder="Documentation..."
                />
              ) : (
                <div className="prose prose-sm max-w-none">
                  <pre className="whitespace-pre-wrap bg-gray-50 text-gray-900 p-6 rounded-lg overflow-x-auto border border-gray-200">
                    {getContent()}
                  </pre>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default LLMDashboard;