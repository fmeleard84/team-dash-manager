import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey, {
      db: { schema: 'public' },
      auth: { persistSession: false }
    });

    console.log('üöÄ Application directe de la migration IA Team...');

    const migrations = [];

    // 1. Ajouter la colonne prompt_id
    try {
      const { error } = await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE public.hr_profiles ADD COLUMN IF NOT EXISTS prompt_id UUID REFERENCES public.prompts_ia(id) ON DELETE SET NULL;'
      });

      if (error) {
        console.log('Note: Colonne prompt_id peut d√©j√† exister:', error.message);
      } else {
        migrations.push('‚úÖ Colonne prompt_id ajout√©e');
      }
    } catch (e) {
      console.log('Info: Colonne prompt_id existe probablement d√©j√†');
    }

    // 2. Cr√©er la table ia_resource_prompts
    try {
      const { error } = await supabase.rpc('exec_sql', {
        sql: `
          CREATE TABLE IF NOT EXISTS public.ia_resource_prompts (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            profile_id UUID NOT NULL REFERENCES public.hr_profiles(id) ON DELETE CASCADE,
            prompt_id UUID NOT NULL REFERENCES public.prompts_ia(id) ON DELETE CASCADE,
            is_primary BOOLEAN DEFAULT true,
            context VARCHAR(100),
            created_at TIMESTAMPTZ DEFAULT now(),
            updated_at TIMESTAMPTZ DEFAULT now()
          );
        `
      });

      if (!error) {
        migrations.push('‚úÖ Table ia_resource_prompts cr√©√©e');

        // Ajouter la contrainte unique s√©par√©ment
        await supabase.rpc('exec_sql', {
          sql: 'ALTER TABLE public.ia_resource_prompts ADD CONSTRAINT IF NOT EXISTS unique_profile_prompt UNIQUE(profile_id, prompt_id);'
        });
      }
    } catch (e) {
      console.log('Info: Table ia_resource_prompts existe probablement d√©j√†');
    }

    // 3. Activer RLS
    try {
      await supabase.rpc('exec_sql', {
        sql: 'ALTER TABLE public.ia_resource_prompts ENABLE ROW LEVEL SECURITY;'
      });
      migrations.push('‚úÖ RLS activ√© sur ia_resource_prompts');
    } catch (e) {
      console.log('RLS d√©j√† activ√©');
    }

    // 4. Cr√©er les politiques RLS
    const policies = [
      {
        name: 'ia_resource_prompts_select',
        sql: `
          CREATE POLICY IF NOT EXISTS "ia_resource_prompts_select"
          ON public.ia_resource_prompts FOR SELECT
          USING (true);
        `
      },
      {
        name: 'ia_resource_prompts_admin_insert',
        sql: `
          CREATE POLICY IF NOT EXISTS "ia_resource_prompts_admin_insert"
          ON public.ia_resource_prompts FOR INSERT
          WITH CHECK (
            EXISTS (
              SELECT 1 FROM public.profiles
              WHERE profiles.id = auth.uid()
              AND profiles.role = 'admin'
            )
          );
        `
      },
      {
        name: 'ia_resource_prompts_admin_update',
        sql: `
          CREATE POLICY IF NOT EXISTS "ia_resource_prompts_admin_update"
          ON public.ia_resource_prompts FOR UPDATE
          USING (
            EXISTS (
              SELECT 1 FROM public.profiles
              WHERE profiles.id = auth.uid()
              AND profiles.role = 'admin'
            )
          );
        `
      },
      {
        name: 'ia_resource_prompts_admin_delete',
        sql: `
          CREATE POLICY IF NOT EXISTS "ia_resource_prompts_admin_delete"
          ON public.ia_resource_prompts FOR DELETE
          USING (
            EXISTS (
              SELECT 1 FROM public.profiles
              WHERE profiles.id = auth.uid()
              AND profiles.role = 'admin'
            )
          );
        `
      }
    ];

    for (const policy of policies) {
      try {
        await supabase.rpc('exec_sql', { sql: policy.sql });
      } catch (e) {
        console.log(`Policy ${policy.name} existe probablement d√©j√†`);
      }
    }
    migrations.push('‚úÖ Politiques RLS cr√©√©es');

    // 5. Cr√©er les index
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_ia_prompts_profile ON public.ia_resource_prompts(profile_id);',
      'CREATE INDEX IF NOT EXISTS idx_ia_prompts_prompt ON public.ia_resource_prompts(prompt_id);',
      'CREATE INDEX IF NOT EXISTS idx_hr_profiles_prompt ON public.hr_profiles(prompt_id);'
    ];

    for (const index of indexes) {
      try {
        await supabase.rpc('exec_sql', { sql: index });
      } catch (e) {
        console.log('Index existe probablement d√©j√†');
      }
    }
    migrations.push('‚úÖ Index cr√©√©s');

    // 6. Ins√©rer les prompts IA de base
    const prompts = [
      {
        name: 'IA R√©dacteur',
        context: 'ia_writer',
        prompt: 'Tu es un r√©dacteur IA sp√©cialis√© dans la cr√©ation de contenu professionnel. Tu produis des documents structur√©s, clairs et adapt√©s au contexte du projet. Tu utilises un ton professionnel et tu structures toujours tes livrables avec des titres, sous-titres et sections bien d√©finies.',
        active: true,
        priority: 100
      },
      {
        name: 'IA Chef de Projet',
        context: 'ia_project_manager',
        prompt: 'Tu es un chef de projet IA qui aide √† organiser, planifier et suivre les projets. Tu cr√©es des plannings, des roadmaps, des rapports d\'avancement et tu aides √† coordonner les √©quipes. Tu es m√©thodique, structur√© et orient√© r√©sultats.',
        active: true,
        priority: 100
      },
      {
        name: 'IA D√©veloppeur',
        context: 'ia_developer',
        prompt: 'Tu es un d√©veloppeur IA qui aide √† concevoir des architectures techniques, √©crire de la documentation technique, proposer des solutions et r√©viser du code. Tu es pr√©cis, technique et tu fournis toujours des exemples concrets.',
        active: true,
        priority: 100
      },
      {
        name: 'IA Designer',
        context: 'ia_designer',
        prompt: 'Tu es un designer IA qui aide √† cr√©er des concepts visuels, des maquettes, des chartes graphiques et des guidelines UX/UI. Tu es cr√©atif, orient√© utilisateur et tu fournis des descriptions d√©taill√©es de tes propositions visuelles.',
        active: true,
        priority: 100
      },
      {
        name: 'IA Analyste',
        context: 'ia_analyst',
        prompt: 'Tu es un analyste IA qui aide √† analyser des donn√©es, cr√©er des rapports, identifier des tendances et proposer des recommandations strat√©giques. Tu es analytique, factuel et tu bases toujours tes conclusions sur des donn√©es concr√®tes.',
        active: true,
        priority: 100
      }
    ];

    let promptsInserted = 0;
    for (const prompt of prompts) {
      const { data: existing } = await supabase
        .from('prompts_ia')
        .select('id')
        .eq('name', prompt.name)
        .single();

      if (!existing) {
        const { error } = await supabase
          .from('prompts_ia')
          .insert(prompt);

        if (!error) {
          promptsInserted++;
        }
      }
    }

    if (promptsInserted > 0) {
      migrations.push(`‚úÖ ${promptsInserted} prompts IA ins√©r√©s`);
    }

    // V√©rification finale
    const { data: columnCheck } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT column_name
        FROM information_schema.columns
        WHERE table_schema = 'public'
        AND table_name = 'hr_profiles'
        AND column_name = 'prompt_id';
      `
    });

    const { data: tableCheck } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public'
        AND table_name = 'ia_resource_prompts';
      `
    });

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Migration IA Team appliqu√©e avec succ√®s',
        migrations,
        verification: {
          prompt_id_column: columnCheck?.length > 0,
          ia_resource_prompts_table: tableCheck?.length > 0
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    );
  } catch (error) {
    console.error('‚ùå Erreur:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    );
  }
});