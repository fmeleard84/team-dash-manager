import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.0'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    console.log('üîç V√©rification des prompts dans prompts_ia...')

    // 1. V√©rifier s'il y a des prompts
    const { data: prompts, error: promptsError } = await supabase
      .from('prompts_ia')
      .select('*')
      .order('priority', { ascending: false })
    
    if (promptsError) {
      console.error('‚ùå Erreur r√©cup√©ration prompts:', promptsError)
      throw promptsError
    }

    console.log(`‚úÖ ${prompts?.length || 0} prompts trouv√©s`)

    // 2. Si pas de prompts, en cr√©er
    if (!prompts || prompts.length === 0) {
      console.log('üìù Cr√©ation des prompts par d√©faut...')
      
      const defaultPrompts = [
        {
          name: 'Assistant G√©n√©ral',
          context: 'general',
          prompt: `Tu es l'assistant vocal intelligent de Team Dash Manager, une plateforme de gestion de projets avec matching de ressources humaines.

R√îLE PRINCIPAL :
- Aider les clients √† composer des √©quipes pour leurs projets
- Identifier les besoins en ressources humaines selon le projet
- Proposer les profils adapt√©s depuis notre base de m√©tiers
- Cr√©er les √©quipes via les outils disponibles

PROCESSUS :
1. Comprendre le besoin du client (type de projet, dur√©e, budget)
2. Identifier les m√©tiers n√©cessaires
3. Proposer une √©quipe avec les bonnes expertises
4. Cr√©er l'√©quipe si le client est d'accord

IMPORTANT :
- Ne pas donner d'instructions techniques ou tutoriels
- Se concentrer sur la composition d'√©quipes
- Utiliser UNIQUEMENT les m√©tiers disponibles dans la base
- Toujours proposer une √©quipe adapt√©e au projet`,
          active: true,
          priority: 100
        },
        {
          name: 'Composition d\'√©quipe',
          context: 'team-composition',
          prompt: `Pour composer une √©quipe, suis ce processus :

1. ANALYSE DU BESOIN :
   - Type de projet (site web, app mobile, marketing, etc.)
   - Dur√©e estim√©e
   - Budget disponible (optionnel mais utile)
   - Technologies ou comp√©tences sp√©cifiques

2. IDENTIFICATION DES M√âTIERS :
   - Consulte les m√©tiers disponibles dans la base
   - V√©rifie les expertises associ√©es √† chaque m√©tier
   - S√©lectionne les profils pertinents

3. PROPOSITION D'√âQUIPE :
   - Pr√©sente les m√©tiers s√©lectionn√©s
   - Explique le r√¥le de chaque membre
   - Pr√©cise les s√©niorit√©s recommand√©es
   - Indique les expertises cl√©s

4. CR√âATION :
   - Si le client valide, utilise create_team
   - Passe les bons param√®tres (m√©tiers, s√©niorit√©s, expertises)`,
          active: true,
          priority: 90
        },
        {
          name: 'Comportement Assistant',
          context: 'behavior',
          prompt: `COMPORTEMENT :
- Sois concis et direct
- Pose des questions pour clarifier les besoins
- Propose toujours une solution concr√®te
- Guide le client vers la cr√©ation d'√©quipe
- Utilise les outils disponibles pour cr√©er les √©quipes`,
          active: true,
          priority: 80
        }
      ]

      const { error: insertError } = await supabase
        .from('prompts_ia')
        .insert(defaultPrompts)
      
      if (insertError) {
        console.error('‚ùå Erreur insertion prompts:', insertError)
        throw insertError
      }
      
      console.log('‚úÖ Prompts par d√©faut cr√©√©s')
    } else {
      // 3. Activer les prompts s'ils sont inactifs
      const inactivePrompts = prompts.filter(p => !p.active)
      if (inactivePrompts.length > 0) {
        console.log(`üîÑ Activation de ${inactivePrompts.length} prompts inactifs...`)
        
        const { error: updateError } = await supabase
          .from('prompts_ia')
          .update({ active: true })
          .in('id', inactivePrompts.map(p => p.id))
        
        if (updateError) {
          console.error('‚ùå Erreur activation prompts:', updateError)
        } else {
          console.log('‚úÖ Prompts activ√©s')
        }
      }
    }

    // 4. V√©rifier les policies RLS
    console.log('üîç V√©rification des policies RLS...')
    const { data: policies } = await supabase.rpc('check_rls_policies', {
      table_name: 'prompts_ia'
    }).single()

    return new Response(
      JSON.stringify({
        success: true,
        prompts_count: prompts?.length || 0,
        prompts: prompts,
        policies: policies
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )
  } catch (error) {
    console.error('Erreur:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})