import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    console.log('üöÄ D√©but de la migration IA Team...');

    // 1. Ajouter la colonne prompt_id √† hr_profiles
    const { error: alterError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE public.hr_profiles
        ADD COLUMN IF NOT EXISTS prompt_id UUID REFERENCES public.prompts_ia(id) ON DELETE SET NULL;
      `
    });

    if (alterError) {
      console.error('Erreur ajout colonne prompt_id:', alterError);
    } else {
      console.log('‚úÖ Colonne prompt_id ajout√©e √† hr_profiles');
    }

    // 2. Cr√©er la table ia_resource_prompts
    const { error: createTableError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS public.ia_resource_prompts (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          profile_id UUID NOT NULL REFERENCES public.hr_profiles(id) ON DELETE CASCADE,
          prompt_id UUID NOT NULL REFERENCES public.prompts_ia(id) ON DELETE CASCADE,
          is_primary BOOLEAN DEFAULT true,
          context VARCHAR(100),
          created_at TIMESTAMPTZ DEFAULT now(),
          updated_at TIMESTAMPTZ DEFAULT now(),
          UNIQUE(profile_id, prompt_id)
        );
      `
    });

    if (createTableError) {
      console.error('Erreur cr√©ation table ia_resource_prompts:', createTableError);
    } else {
      console.log('‚úÖ Table ia_resource_prompts cr√©√©e');
    }

    // 3. Cr√©er les index
    const indexQueries = [
      `CREATE INDEX IF NOT EXISTS idx_ia_resource_prompts_profile ON public.ia_resource_prompts(profile_id);`,
      `CREATE INDEX IF NOT EXISTS idx_ia_resource_prompts_prompt ON public.ia_resource_prompts(prompt_id);`,
      `CREATE INDEX IF NOT EXISTS idx_hr_profiles_prompt ON public.hr_profiles(prompt_id);`
    ];

    for (const query of indexQueries) {
      await supabase.rpc('exec_sql', { sql: query });
    }
    console.log('‚úÖ Index cr√©√©s');

    // 4. Ins√©rer les prompts IA de base
    const prompts = [
      {
        name: 'IA R√©dacteur',
        context: 'ia_writer',
        prompt: 'Tu es un r√©dacteur IA sp√©cialis√© dans la cr√©ation de contenu professionnel. Tu produis des documents structur√©s, clairs et adapt√©s au contexte du projet. Tu utilises un ton professionnel et tu structures toujours tes livrables avec des titres, sous-titres et sections bien d√©finies.',
        active: true,
        priority: 100
      },
      {
        name: 'IA Chef de Projet',
        context: 'ia_project_manager',
        prompt: 'Tu es un chef de projet IA qui aide √† organiser, planifier et suivre les projets. Tu cr√©es des plannings, des roadmaps, des rapports d\'avancement et tu aides √† coordonner les √©quipes. Tu es m√©thodique, structur√© et orient√© r√©sultats.',
        active: true,
        priority: 100
      },
      {
        name: 'IA D√©veloppeur',
        context: 'ia_developer',
        prompt: 'Tu es un d√©veloppeur IA qui aide √† concevoir des architectures techniques, √©crire de la documentation technique, proposer des solutions et r√©viser du code. Tu es pr√©cis, technique et tu fournis toujours des exemples concrets.',
        active: true,
        priority: 100
      },
      {
        name: 'IA Designer',
        context: 'ia_designer',
        prompt: 'Tu es un designer IA qui aide √† cr√©er des concepts visuels, des maquettes, des chartes graphiques et des guidelines UX/UI. Tu es cr√©atif, orient√© utilisateur et tu fournis des descriptions d√©taill√©es de tes propositions visuelles.',
        active: true,
        priority: 100
      },
      {
        name: 'IA Analyste',
        context: 'ia_analyst',
        prompt: 'Tu es un analyste IA qui aide √† analyser des donn√©es, cr√©er des rapports, identifier des tendances et proposer des recommandations strat√©giques. Tu es analytique, factuel et tu bases toujours tes conclusions sur des donn√©es concr√®tes.',
        active: true,
        priority: 100
      }
    ];

    for (const prompt of prompts) {
      const { error: insertError } = await supabase
        .from('prompts_ia')
        .upsert(prompt, { onConflict: 'name' });

      if (insertError) {
        console.error(`Erreur insertion prompt ${prompt.name}:`, insertError);
      }
    }
    console.log('‚úÖ Prompts IA de base ins√©r√©s');

    // 5. Configurer les politiques RLS
    const rlsPolicies = [
      `ALTER TABLE public.ia_resource_prompts ENABLE ROW LEVEL SECURITY;`,
      `CREATE POLICY IF NOT EXISTS "ia_resource_prompts_select_policy" ON public.ia_resource_prompts FOR SELECT USING (true);`,
      `CREATE POLICY IF NOT EXISTS "ia_resource_prompts_insert_policy" ON public.ia_resource_prompts FOR INSERT WITH CHECK (EXISTS (SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.role = 'admin'));`,
      `CREATE POLICY IF NOT EXISTS "ia_resource_prompts_update_policy" ON public.ia_resource_prompts FOR UPDATE USING (EXISTS (SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.role = 'admin'));`,
      `CREATE POLICY IF NOT EXISTS "ia_resource_prompts_delete_policy" ON public.ia_resource_prompts FOR DELETE USING (EXISTS (SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.role = 'admin'));`
    ];

    for (const policy of rlsPolicies) {
      await supabase.rpc('exec_sql', { sql: policy });
    }
    console.log('‚úÖ Politiques RLS configur√©es');

    // 6. Cr√©er la fonction pour r√©cup√©rer le prompt d'une ressource IA
    const { error: funcError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE OR REPLACE FUNCTION get_ia_resource_prompt(resource_id UUID)
        RETURNS TABLE (
          prompt_id UUID,
          prompt_name TEXT,
          prompt_content TEXT,
          prompt_context TEXT
        )
        LANGUAGE plpgsql
        AS $$
        BEGIN
          RETURN QUERY
          SELECT
            p.id as prompt_id,
            p.name as prompt_name,
            p.prompt as prompt_content,
            p.context as prompt_context
          FROM public.hr_profiles hp
          LEFT JOIN public.prompts_ia p ON hp.prompt_id = p.id
          WHERE hp.id = resource_id
            AND hp.is_ai = true
            AND p.active = true
          LIMIT 1;
        END;
        $$;
      `
    });

    if (funcError) {
      console.error('Erreur cr√©ation fonction get_ia_resource_prompt:', funcError);
    } else {
      console.log('‚úÖ Fonction get_ia_resource_prompt cr√©√©e');
    }

    console.log('üéâ Migration IA Team termin√©e avec succ√®s !');

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Migration IA Team appliqu√©e avec succ√®s'
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    );
  } catch (error) {
    console.error('‚ùå Erreur migration:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    );
  }
});