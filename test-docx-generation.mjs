import { createClient } from '@supabase/supabase-js';
import * as docx from 'docx';

const supabaseUrl = 'https://egdelmcijszuapcpglsy.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVnZGVsbWNpanN6dWFwY3BnbHN5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDE2MjIwMCwiZXhwIjoyMDY5NzM4MjAwfQ.K3m7mUvhUJcSmuMQs-yXnhXQRMBc_CJwmz-dIX6bU1Q';

const supabase = createClient(supabaseUrl, supabaseKey);

// Fonction pour g√©n√©rer un document DOCX
async function generateDocxBuffer(data) {
  const { Document, Paragraph, TextRun, HeadingLevel, AlignmentType } = docx;

  const doc = new Document({
    sections: [{
      properties: {},
      children: [
        // En-t√™te
        new Paragraph({
          text: data.title || 'Document g√©n√©r√© par IA',
          heading: HeadingLevel.HEADING_1,
          alignment: AlignmentType.CENTER,
          spacing: { after: 400 }
        }),

        // M√©tadonn√©es
        new Paragraph({
          alignment: AlignmentType.LEFT,
          spacing: { after: 200 },
          children: [
            new TextRun({ text: 'Auteur: ', bold: true }),
            new TextRun({ text: data.author || 'IA' })
          ]
        }),

        new Paragraph({
          alignment: AlignmentType.LEFT,
          spacing: { after: 200 },
          children: [
            new TextRun({ text: 'Date: ', bold: true }),
            new TextRun({ text: new Date().toLocaleDateString('fr-FR') })
          ]
        }),

        new Paragraph({
          alignment: AlignmentType.LEFT,
          spacing: { after: 200 },
          children: [
            new TextRun({ text: 'Type de contenu: ', bold: true }),
            new TextRun({ text: data.contentType || 'Document' })
          ]
        }),

        new Paragraph({
          alignment: AlignmentType.LEFT,
          spacing: { after: 400 },
          children: [
            new TextRun({ text: 'Projet ID: ', bold: true }),
            new TextRun({ text: data.projectId })
          ]
        }),

        // Ligne de s√©paration
        new Paragraph({
          text: '‚îÄ'.repeat(50),
          spacing: { after: 400 }
        }),

        // Contenu principal
        new Paragraph({
          text: 'Contenu',
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 300 }
        }),

        ...data.content.split('\n').map(line =>
          new Paragraph({
            text: line,
            spacing: { after: 200 }
          })
        ),

        // Pied de page
        new Paragraph({
          text: '‚îÄ'.repeat(50),
          spacing: { before: 400, after: 200 }
        }),

        new Paragraph({
          text: 'Document g√©n√©r√© automatiquement par l\'IA de l\'√©quipe',
          alignment: AlignmentType.CENTER,
          spacing: { after: 200 },
          children: [
            new TextRun({
              text: 'Document g√©n√©r√© automatiquement par l\'IA de l\'√©quipe',
              italics: true,
              size: 20
            })
          ]
        })
      ]
    }]
  });

  // G√©n√©rer le buffer
  const buffer = await docx.Packer.toBuffer(doc);
  return buffer;
}

async function testDocxGeneration() {
  console.log('üß™ Test de g√©n√©ration DOCX pour contenu IA...\n');

  try {
    // 1. Trouver un projet avec une IA
    const { data: projects, error: projectError } = await supabase
      .from('projects')
      .select(`
        id,
        title,
        hr_resource_assignments!inner(
          profile_id,
          candidate_id,
          booking_status,
          hr_profiles!inner(
            id,
            name,
            is_ai
          )
        )
      `)
      .eq('hr_resource_assignments.hr_profiles.is_ai', true)
      .eq('hr_resource_assignments.booking_status', 'accepted')
      .limit(1)
      .single();

    if (projectError || !projects) {
      console.error('‚ùå Pas de projet avec IA trouv√©:', projectError);
      return;
    }

    const project = projects;
    const iaResource = project.hr_resource_assignments.find(r => r.hr_profiles.is_ai);

    console.log('üìã Projet trouv√©:', project.title);
    console.log('ü§ñ IA trouv√©e:', iaResource.hr_profiles.name);

    // 2. G√©n√©rer un contenu exemple
    const testContent = `# Plan de test application

## Objectif
Valider le bon fonctionnement de l'application apr√®s les derni√®res modifications.

## Strat√©gie de test

### 1. Tests unitaires
- V√©rifier chaque composant individuellement
- Couverture minimale de 80%
- Focus sur les fonctions critiques

### 2. Tests d'int√©gration
- Tester les interactions entre modules
- Validation des flux de donn√©es
- V√©rification des APIs

### 3. Tests de performance
- Temps de r√©ponse < 200ms
- Support de 100 utilisateurs simultan√©s
- Optimisation des requ√™tes base de donn√©es

## Planning
- Semaine 1: Mise en place environnement
- Semaine 2: D√©veloppement tests unitaires
- Semaine 3: Tests d'int√©gration
- Semaine 4: Tests de performance et rapport

## Risques identifi√©s
- Manque de donn√©es de test r√©alistes
- Environnement de test instable
- D√©lais serr√©s

## Conclusion
Ce plan couvre l'ensemble des aspects critiques pour garantir la qualit√©.`;

    // 3. G√©n√©rer le document DOCX
    console.log('\nüìÑ G√©n√©ration du document DOCX...');

    const docxBuffer = await generateDocxBuffer({
      title: 'Plan de Test Application',
      author: iaResource.hr_profiles.name,
      projectId: project.id,
      contentType: 'plan',
      content: testContent
    });

    console.log('‚úÖ Document DOCX g√©n√©r√©, taille:', docxBuffer.length, 'octets');

    // 4. Convertir en base64 pour l'Edge Function
    const base64Buffer = Buffer.from(docxBuffer).toString('base64');

    // 5. Appeler l'Edge Function
    console.log('\nüì§ Envoi vers Edge Function save-ai-content-to-drive...');

    const timestamp = new Date().toISOString().slice(0, 10);
    const fileName = `${timestamp}_test_plan_${iaResource.hr_profiles.name.replace(/\s+/g, '_')}.docx`;

    const response = await fetch(`${supabaseUrl}/functions/v1/save-ai-content-to-drive`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseKey}`
      },
      body: JSON.stringify({
        projectId: project.id,
        fileName: fileName,
        content: testContent,
        contentType: 'plan',
        aiMemberName: iaResource.hr_profiles.name,
        isDocx: true,
        docxBuffer: base64Buffer
      })
    });

    const result = await response.json();

    if (result.success) {
      console.log('‚úÖ Document sauvegard√© avec succ√®s !');
      console.log('üìÅ Chemin:', result.data.filePath);
      console.log('üîó URL:', result.data.fileUrl);
      console.log('üìä Taille:', result.data.fileSize, 'octets');
      console.log('ü§ñ IA:', result.data.aiMemberName);
      console.log('üìù Type:', result.data.contentType);
    } else {
      console.error('‚ùå Erreur:', result.error);
    }

  } catch (error) {
    console.error('‚ùå Erreur test:', error);
  }
}

// Lancer le test
testDocxGeneration();