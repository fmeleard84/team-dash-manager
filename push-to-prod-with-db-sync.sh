#!/bin/bash

# Script am√©lior√© pour pousser les changements de dev vers prod
# AVEC synchronisation de la base de donn√©es
# Usage: ./push-to-prod-with-db-sync.sh

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Push vers Production avec Sync DB - Team Dash Manager${NC}"
echo "========================================================="
echo ""

# Fonction pour demander confirmation
confirm() {
    read -r -p "$1 (y/N) " response
    case "$response" in
        [yY][eE][sS]|[yY])
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# ================================================
# SECTION 1: SYNCHRONISATION BASE DE DONN√âES
# ================================================
echo -e "${CYAN}üóÑÔ∏è  SECTION 1: Synchronisation de la Base de Donn√©es${NC}"
echo "------------------------------------------------"

if confirm "Voulez-vous synchroniser le sch√©ma de base de donn√©es DEV ‚Üí PROD?"; then
    echo -e "${YELLOW}üìä Analyse des diff√©rences entre DEV et PROD...${NC}"

    # Lancer le script de synchronisation
    cd /opt/team-dash-manager

    if [ -f "sync-database-to-prod.mjs" ]; then
        node sync-database-to-prod.mjs

        # Chercher le fichier de migration le plus r√©cent
        LATEST_MIGRATION=$(ls -t /opt/team-dash-manager-prod/sync-output/migration-to-prod-*.sql 2>/dev/null | head -1)

        if [ -n "$LATEST_MIGRATION" ]; then
            echo ""
            echo -e "${GREEN}‚úÖ Script de migration cr√©√©:${NC}"
            echo "$LATEST_MIGRATION"
            echo ""
            echo -e "${YELLOW}üìã Instructions pour appliquer la migration:${NC}"
            echo "1. Ouvrir: https://supabase.com/dashboard/project/nlesrzepybeeghghjafc/sql/new"
            echo "2. Copier et ex√©cuter le contenu de: $LATEST_MIGRATION"
            echo ""

            if confirm "Voulez-vous voir le contenu du script de migration?"; then
                echo -e "${CYAN}--- D√âBUT DU SCRIPT DE MIGRATION ---${NC}"
                head -50 "$LATEST_MIGRATION"
                echo "..."
                echo -e "${CYAN}--- FIN DE L'EXTRAIT (50 premi√®res lignes) ---${NC}"
            fi

            echo ""
            read -p "Appuyez sur Enter apr√®s avoir appliqu√© la migration (ou pour continuer)..." -r
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Script de synchronisation non trouv√©, cr√©ation...${NC}"

        # Cr√©er le script s'il n'existe pas (copie depuis prod)
        if [ -f "/opt/team-dash-manager-prod/sync-database-to-prod.mjs" ]; then
            cp "/opt/team-dash-manager-prod/sync-database-to-prod.mjs" "/opt/team-dash-manager/"
            echo -e "${GREEN}‚úÖ Script copi√©, relancez ce script${NC}"
            exit 0
        fi
    fi
else
    echo -e "${YELLOW}‚è≠Ô∏è  Synchronisation DB ignor√©e${NC}"
fi

# ================================================
# SECTION 2: SAUVEGARDE DES CHANGEMENTS DEV
# ================================================
echo ""
echo -e "${CYAN}üìù SECTION 2: Sauvegarde des changements en dev${NC}"
echo "------------------------------------------------"

cd /opt/team-dash-manager

# V√©rifier s'il y a des changements
if [[ -n $(git status -s) ]]; then
    echo "Changements d√©tect√©s:"
    git status -s
    echo ""

    if confirm "Voulez-vous committer ces changements?"; then
        git add .
        echo -e "${YELLOW}Message de commit (Enter pour message par d√©faut):${NC}"
        read -r commit_msg

        if [ -z "$commit_msg" ]; then
            commit_msg="üöÄ Deploy: Mise √† jour automatique depuis dev avec sync DB"
        fi

        git commit -m "$commit_msg"
        git push origin main
        echo -e "${GREEN}‚úÖ Changements sauvegard√©s et pouss√©s${NC}"
    fi
else
    echo "Aucun changement √† commit"
fi

# ================================================
# SECTION 3: SYNCHRONISATION CODE VERS PROD
# ================================================
echo ""
echo -e "${CYAN}üì• SECTION 3: Synchronisation du code vers production${NC}"
echo "------------------------------------------------"

cd /opt/team-dash-manager-prod

# Pull des derniers changements
echo "R√©cup√©ration des derniers changements..."
git pull origin main

# V√©rifier les changements dans package.json
if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
    echo -e "${YELLOW}üì¶ Installation des nouvelles d√©pendances...${NC}"
    npm install
fi

# ================================================
# SECTION 4: BUILD DE PRODUCTION
# ================================================
echo ""
echo -e "${CYAN}üî® SECTION 4: Build de production${NC}"
echo "------------------------------------------------"

npm run build

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"
else
    echo -e "${RED}‚ùå Erreur lors du build${NC}"
    exit 1
fi

# ================================================
# SECTION 5: D√âPLOIEMENT DES EDGE FUNCTIONS
# ================================================
echo ""
echo -e "${CYAN}‚ö° SECTION 5: Edge Functions${NC}"
echo "------------------------------------------------"

if confirm "Voulez-vous d√©ployer les Edge Functions vers PROD?"; then
    # Liste des fonctions importantes √† d√©ployer
    FUNCTIONS=(
        "init-client-credits"
        "manage-client-credits"
        "handle-new-user-simple"
        "project-orchestrator"
        "resource-booking"
    )

    for func in "${FUNCTIONS[@]}"; do
        if [ -d "/opt/team-dash-manager-prod/supabase/functions/$func" ]; then
            echo -e "${YELLOW}D√©ploiement de $func...${NC}"
            SUPABASE_ACCESS_TOKEN="sbp_b8ec67e2a4f3a7922f6cfea023b2cf81a00a7d9e" \
            SUPABASE_DB_PASSWORD="Raymonde7510" \
            npx supabase functions deploy "$func" --project-ref nlesrzepybeeghghjafc --no-verify-jwt || true
        fi
    done

    echo -e "${GREEN}‚úÖ Edge Functions d√©ploy√©es${NC}"
else
    echo -e "${YELLOW}‚è≠Ô∏è  D√©ploiement des Edge Functions ignor√©${NC}"
fi

# ================================================
# SECTION 6: RED√âMARRAGE APPLICATION
# ================================================
echo ""
echo -e "${CYAN}‚ôªÔ∏è SECTION 6: Red√©marrage de l'application${NC}"
echo "------------------------------------------------"

# V√©rifier si PM2 g√®re d√©j√† l'app
if pm2 list | grep -q "team-dash-prod"; then
    pm2 restart team-dash-prod
    echo -e "${GREEN}‚úÖ Application de production red√©marr√©e${NC}"
else
    pm2 start /opt/team-dash-manager/ecosystem.config.cjs --only team-dash-prod
    echo -e "${GREEN}‚úÖ Application de production d√©marr√©e${NC}"
fi

# Sauvegarder la configuration PM2
pm2 save

# ================================================
# SECTION 7: V√âRIFICATIONS FINALES
# ================================================
echo ""
echo -e "${CYAN}üìä SECTION 7: Statut et v√©rifications${NC}"
echo "------------------------------------------------"

# Afficher le statut PM2
pm2 status

echo ""
echo -e "${GREEN}üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!${NC}"
echo ""

# R√©sum√©
echo -e "${BLUE}üìç URLs d'acc√®s:${NC}"
echo "  ‚Ä¢ Production: https://vaya.rip"
echo "  ‚Ä¢ D√©veloppement: http://localhost:8081"
echo ""

echo -e "${BLUE}üîç Checklist post-d√©ploiement:${NC}"
echo "  ‚úÖ Tester la connexion sur https://vaya.rip"
echo "  ‚úÖ V√©rifier le dashboard client (pas d'erreur 406)"
echo "  ‚úÖ V√©rifier que les cr√©dits s'affichent"
echo "  ‚úÖ V√©rifier que les templates de projets apparaissent"
echo ""

echo -e "${YELLOW}üí° Commandes utiles:${NC}"
echo "  ‚Ä¢ Logs production: pm2 logs team-dash-prod --lines 50"
echo "  ‚Ä¢ Logs Edge Functions: npx supabase functions logs --project-ref nlesrzepybeeghghjafc"
echo "  ‚Ä¢ Console SQL: https://supabase.com/dashboard/project/nlesrzepybeeghghjafc/sql"
echo ""

# Afficher les derniers logs
if confirm "Voulez-vous voir les derniers logs de production?"; then
    echo -e "${YELLOW}üìú Derniers logs de production:${NC}"
    pm2 logs team-dash-prod --nostream --lines 20
fi

echo ""
echo -e "${GREEN}‚ú® Script termin√©!${NC}"