const fs = require('fs');

const contentData = fs.readFileSync('content-data.js', 'utf-8');

// Remove the useState wrapper to get just the object
let objectStart = contentData.indexOf('{');
let objectEnd = contentData.lastIndexOf('});');

const objectContent = contentData.slice(objectStart, objectEnd + 1);

// Parse the object content to extract individual sections
const sections = {};
const sectionNames = [];

// Use regex to find section boundaries
const sectionRegex = /['"]([^'"]+)['"]\s*:\s*`([^`]*(?:`[^`]*)*)`/gs;

let match;
while ((match = sectionRegex.exec(objectContent)) !== null) {
  const sectionName = match[1];
  const sectionContent = match[2];
  sections[sectionName] = sectionContent;
  sectionNames.push(sectionName);
}

console.log(`Found ${sectionNames.length} sections:`, sectionNames);

// Generate the TypeScript export
let tsContent = `// LLM Documentation Content Data
// This file contains all the documentation sections for the LLM Dashboard

export interface DocumentationSection {
  [key: string]: string;
}

export const documentationSections: DocumentationSection = {
`;

// Add each section
for (const [sectionName, sectionContent] of Object.entries(sections)) {
  tsContent += `  '${sectionName}': \`${sectionContent}\`,\n\n`;
}

tsContent += `};

// Section titles mapping
export const sectionTitles: Record<string, string> = {
  'general': 'üìö Documentation G√©n√©rale',
  'design-system': 'üé® Design System',
  'candidat-flow': 'Flux candidat',
  'candidat-onboarding': 'Onboarding candidat',
  'candidat-qualification': 'Qualification candidat',
  'candidat-missions': 'Gestion des missions',
  'candidat-activities': '‚è±Ô∏è Activit√©s & Time Tracking',
  'candidat-realtime': 'Candidat temps r√©el',
  'projet-workflow': 'Workflow projet',
  'projet-pause-reprise': '‚è∏Ô∏è Pause/Reprise projet',
  'projet-edition-candidat': 'üîÑ √âdition & Changement candidat',
  'projet-demarrage': 'üî• D√©marrage projet',
  'projet-orchestration': 'Orchestration projet',
  'projet-collaboration': 'Outils collaboratifs',
  'projet-planning': 'Planning & √âv√©nements',
  'projet-messagerie': 'üí¨ Messagerie',
  'projet-drive': 'üìÅ Drive',
  'db-schema': 'Sch√©ma base de donn√©es',
  'db-rls': 'RLS & S√©curit√©',
  'db-realtime': 'Tables temps r√©el',
  'db-functions': 'Edge Functions',
  'corrections-unified-ids': 'üîÑ Unification IDs',
  'corrections-session5': 'üîß Session 5',
  'corrections-session4': 'üîß Session 4',
  'corrections-session3': 'üîß Session 3',
  'corrections-session2': 'üîß Session 2',
  'corrections-session1': 'üîß Session 1',
  'wiki-overview': 'üéØ Wiki Vue d\\'ensemble',
  'wiki-architecture': 'üèóÔ∏è Architecture Wiki',
  'wiki-permissions': 'üîê Permissions Wiki',
  'wiki-realtime': '‚ö° Synchronisation Wiki',
  'wiki-comments': 'üí¨ Commentaires Wiki',
  'wiki-navigation': 'üß≠ Navigation Wiki',
  'wiki-editor': '‚úèÔ∏è √âditeur Wiki'
};

export const getSectionTitle = (sectionId: string): string => {
  return sectionTitles[sectionId] || sectionId;
};

export const getSectionContent = (sectionId: string): string => {
  return documentationSections[sectionId] || \`# Section \${sectionId}

Contenu non trouv√© pour cette section.\`;
};
`;

fs.writeFileSync('src/components/llm/LLMDocumentationSections.tsx', tsContent, 'utf-8');
console.log('Generated LLMDocumentationSections.tsx with', Object.keys(sections).length, 'sections');